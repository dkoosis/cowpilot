# AUTH_FLOWS.yaml v1.0-claude-optimized
# ✓=works ∅=missing λ=limitation †=workaround ‡=critical ∇=implement
# MACHINE_OPTIMIZED_AUTH_PATTERNS[not_human_readable]

‡RTM_FROB_FLOW:
  TYPE: custom_frob_based[NOT_oauth]
  λCRITICAL: NO_redirect_uri→stays_on_rtm.com
  
  FLOW:
    1_GET_FROB: GET→/services/rest/?method=rtm.auth.getFrob&api_key={KEY}&api_sig={SIG}→{frob}
    2_USER_AUTH: https://rememberthemilk.com/services/auth/?api_key={KEY}&perms={PERMS}&frob={FROB}&api_sig={SIG}
    3_NO_REDIRECT: user_clicks_allow→rtm_shows_success→λNO_CALLBACK
    4_EXCHANGE: GET→/services/rest/?method=rtm.auth.getToken&api_key={KEY}&frob={FROB}&api_sig={SIG}→{token,user}
  
  ‡SIGNATURE: MD5(secret+sorted_params)→params_alpha_sorted→format:secretkey1value1key2value2
  
  †CLAUDE_ADAPTER:
    FAKE_OAUTH: code→frob_mapping[in_memory]
    INTERMEDIATE_PAGE: rtm_popup+manual_continue_button
    POLLING: 2s_interval×5min_timeout→getToken_until_success
    REDIRECT: user_clicks_continue→redirect_to_claude_callback_with_fake_code
  
  CONSTRAINTS:
    FROB_EXPIRY: ~1hr_unused
    TOKEN_EXPIRY: ∅never
    PERMS: read|write|delete
    NO_REFRESH: tokens_permanent
  
  ‡ERRORS:
    98: invalid_signature[check_param_sort]
    101: invalid_frob[expired_or_invalid]
    102: login_required[user_didnt_auth]
  
  ‡RTM_DEBUG_FINDINGS[2025-07-27]:
    ‡RACE_CONDITION_CONFIRMED:
      TIMELINE: callback→redirect(~10ms)→client_token_request
      CLIENT_RESPONSE: {"error":"authorization_pending","error_description":"User has not completed authorization"}
      ROOT_CAUSE: redirect_before_user_completes_rtm_auth
    ‡RTM_API_BEHAVIOR:
      ERROR_101: "Invalid frob - did you authenticate?"
      MEANING: frob_never_authorized_by_user
      POLLING_RESULT: continuously_fails_until_timeout(5min)
    ‡BROKEN_UX_FLOW:
      1. POST_/oauth/authorize→gets_rtm_frob→shows_intermediate_page
      2. user_clicks_rtm_url(new_window)→∅supposed_to_auth_but_doesnt
      3. user_clicks_continue→hits_/rtm/callback
      4. immediate_redirect_to_client
      5. client_calls_/oauth/token→gets_authorization_pending
      6. polling_never_succeeds(frob_invalid)
    ‡PROBLEMS:
      PRIMARY: UX_flow→user_never_completes_rtm_auth
      SECONDARY: race_condition→redirect_too_fast
    ‡FIXES_REQUIRED:
      1. fix_rtm_flow→ensure_user_completes_auth_before_callback
      2. handle_pending→client_retry_OR_wait_synchronously
    ‡KEY_INSIGHT: primary_issue_broken_rtm_auth_flow_not_race_condition

‡SPEKTRIX_HMAC_FLOW:
  TYPE: hmac_sha1_signatures[NOT_oauth]
  ‡CRITICAL: custom_hmac_required[native_google_apps_script_fails]
  
  CREDENTIALS:
    CLIENT_NAME: spektrix_client_name
    API_USER: spektrix_api_username  
    API_KEY: base64_encoded_secret_key
  
  ‡SIGNATURE_GENERATION:
    STRING_TO_SIGN: METHOD\nURL\nDATE\n[MD5_BODY_IF_PRESENT]
    KEY_PROCESSING: base64_decode(api_key)→byte_array→string_conversion
    HMAC: custom_hmac_sha1(string_to_sign,processed_key)→base64_encode
    AUTH_HEADER: "SpektrixAPI3 {API_USER}:{SIGNATURE}"
  
  ‡PAYLOAD_REQUIREMENTS:
    CONTENT_TYPE: "application/json"[required]
    BODY_ENCODING: JSON.stringify()→Utilities.newBlob().getBytes()[byte_array_required]
    MD5_HASH: required_even_for_empty_bodies_in_signature
    DATE_FORMAT: "EEE, dd MMM yyyy HH:mm:ss 'GMT'"[exact_format]
  
  ‡ENDPOINT_PATTERNS[CRITICAL]:
    ✓CORRECT: POST_/customers[plural]
    ❌BROKEN: POST_/customer[singular]→401_unauthorized
    ✓CUSTOMER_CREATE: POST_/customers{firstName,lastName,email}
    ✓ADDRESS_ADD: POST_/customers/{id}/addresses[separate_step]
    ✓CUSTOMER_SEARCH: GET_/customers?email={email}
    ✓TAG_UPDATE: PUT_/customers/{id}/tags[{id:tag_id}]
  
  ‡AUTHENTICATION_MODE:
    REQUIRED: system_owner_permissions
    ❌FAILS: customer_session_mode
  
  λLIMITATIONS:
    NO_TAG_CREATE: tags_must_pre_exist_in_spektrix
    TWO_STEP_CREATE: customer_first→address_separate
    NO_BATCH_OPS: individual_api_calls_required
  
  ‡ERRORS:
    401: [signature_mismatch,wrong_endpoint_pattern,insufficient_permissions]
    400: [malformed_payload,wrong_content_type,invalid_data]
  
  ‡DEBUG_TOOLS[from_sandy_project]:
    SIGNATURE_VERIFICATION: https://integrate.spektrix.com/docs/authentication
    COMPARE_IMPLEMENTATIONS: custom_vs_native_hmac_testing
    ENDPOINT_TESTING: /customers_vs_/customer_validation

GENERIC_OAUTH2[reference]:
  FLOW:
    1_AUTHORIZE: GET→/oauth/authorize?client_id={}&redirect_uri={}&state={}
    2_USER_AUTH: provider_login_page
    3_CALLBACK: redirect→{redirect_uri}?code={}&state={}
    4_EXCHANGE: POST→/oauth/token{grant_type:authorization_code,code,client_id,client_secret}→{access_token}
  
  ✓FEATURES: [redirect_uri,state_param,refresh_tokens,token_expiry]
  
  ‡CLAUDE_AI_OAUTH_PATHS[LEARNED_2025-07-27]:
    EXPECTS: /authorize+/token[NOT_/oauth/authorize]
    STANDARD_PATHS: /oauth/authorize+/oauth/token
    SOLUTION: support_both_endpoint_patterns

GOOGLE_OAUTH2_PKCE:
  ∇TODO: document_pkce_flow
  λREQUIRES: code_challenge+verifier

GITHUB_DEVICE_FLOW:
  ∇TODO: document_device_flow
  λNO_REDIRECT: polling_based_like_rtm
