!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!Go	package	/the real package specified by the package name/
!_TAG_FIELD_DESCRIPTION!Go	packageName	/the name for referring the package/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!CSS	c,class	/classes/
!_TAG_KIND_DESCRIPTION!CSS	i,id	/identities/
!_TAG_KIND_DESCRIPTION!CSS	s,selector	/selectors/
!_TAG_KIND_DESCRIPTION!DTD	E,entity	/entities/
!_TAG_KIND_DESCRIPTION!DTD	a,attribute	/attributes/
!_TAG_KIND_DESCRIPTION!DTD	e,element	/elements/
!_TAG_KIND_DESCRIPTION!DTD	n,notation	/notations/
!_TAG_KIND_DESCRIPTION!DTD	p,parameterEntity	/parameter entities/
!_TAG_KIND_DESCRIPTION!Go	M,anonMember	/struct anonymous members/
!_TAG_KIND_DESCRIPTION!Go	P,packageName	/name for specifying imported package/
!_TAG_KIND_DESCRIPTION!Go	Y,unknown	/unknown/
!_TAG_KIND_DESCRIPTION!Go	a,talias	/type aliases/
!_TAG_KIND_DESCRIPTION!Go	c,const	/constants/
!_TAG_KIND_DESCRIPTION!Go	f,func	/functions/
!_TAG_KIND_DESCRIPTION!Go	i,interface	/interfaces/
!_TAG_KIND_DESCRIPTION!Go	m,member	/struct members/
!_TAG_KIND_DESCRIPTION!Go	n,methodSpec	/interface method specification/
!_TAG_KIND_DESCRIPTION!Go	p,package	/packages/
!_TAG_KIND_DESCRIPTION!Go	s,struct	/structs/
!_TAG_KIND_DESCRIPTION!Go	t,type	/types/
!_TAG_KIND_DESCRIPTION!Go	v,var	/variables/
!_TAG_KIND_DESCRIPTION!JSON	a,array	/arrays/
!_TAG_KIND_DESCRIPTION!JSON	b,boolean	/booleans/
!_TAG_KIND_DESCRIPTION!JSON	n,number	/numbers/
!_TAG_KIND_DESCRIPTION!JSON	o,object	/objects/
!_TAG_KIND_DESCRIPTION!JSON	s,string	/strings/
!_TAG_KIND_DESCRIPTION!JSON	z,null	/nulls/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	h,hashtag	/hashtags/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_KIND_DESCRIPTION!TypeScript	C,constant	/constants/
!_TAG_KIND_DESCRIPTION!TypeScript	G,generator	/generators/
!_TAG_KIND_DESCRIPTION!TypeScript	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!TypeScript	c,class	/classes/
!_TAG_KIND_DESCRIPTION!TypeScript	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!TypeScript	f,function	/functions/
!_TAG_KIND_DESCRIPTION!TypeScript	g,enum	/enums/
!_TAG_KIND_DESCRIPTION!TypeScript	i,interface	/interfaces/
!_TAG_KIND_DESCRIPTION!TypeScript	m,method	/methods/
!_TAG_KIND_DESCRIPTION!TypeScript	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!TypeScript	p,property	/properties/
!_TAG_KIND_DESCRIPTION!TypeScript	v,variable	/variables/
!_TAG_KIND_DESCRIPTION!Yaml	a,anchor	/anchors/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	1.1	/current.age/
!_TAG_PARSER_VERSION!CSS	0.0	/current.age/
!_TAG_PARSER_VERSION!DTD	0.0	/current.age/
!_TAG_PARSER_VERSION!Go	0.0	/current.age/
!_TAG_PARSER_VERSION!JSON	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	1.1	/current.age/
!_TAG_PARSER_VERSION!TypeScript	0.0	/current.age/
!_TAG_PARSER_VERSION!Yaml	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/Users/vcto/Projects/mcp-go-main/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.2.0	/47808be57/
!_TAG_ROLE_DESCRIPTION!DTD!element	attOwner	/attributes owner/
!_TAG_ROLE_DESCRIPTION!DTD!parameterEntity	condition	/conditions/
!_TAG_ROLE_DESCRIPTION!DTD!parameterEntity	elementName	/element names/
!_TAG_ROLE_DESCRIPTION!DTD!parameterEntity	partOfAttDef	/part of attribute definition/
!_TAG_ROLE_DESCRIPTION!Go!package	imported	/imported package/
!_TAG_ROLE_DESCRIPTION!Go!unknown	receiverType	/receiver type/
!_TAG_ROLE_DESCRIPTION!Yaml!anchor	alias	/alias/
.vocs_HomePage .vocs_HomePage_logo	www/docs/styles.css	/^.vocs_HomePage .vocs_HomePage_logo {$/;"	c
0	www/tsconfig.json	/^    "lib": ["ES2020", "DOM", "DOM.Iterable"],$/;"	s	array:compilerOptions.lib
0	www/tsconfig.json	/^  "include": ["**\/*.ts", "**\/*.tsx"]$/;"	s	array:include
1	www/tsconfig.json	/^    "lib": ["ES2020", "DOM", "DOM.Iterable"],$/;"	s	array:compilerOptions.lib
1	www/tsconfig.json	/^  "include": ["**\/*.ts", "**\/*.tsx"]$/;"	s	array:include
1. Correction	CODE_OF_CONDUCT.md	/^### 1. Correction$/;"	S	section:Contributor Covenant Code of Conduct""Enforcement Guidelines
2	www/tsconfig.json	/^    "lib": ["ES2020", "DOM", "DOM.Iterable"],$/;"	s	array:compilerOptions.lib
2. Warning	CODE_OF_CONDUCT.md	/^### 2. Warning$/;"	S	section:Contributor Covenant Code of Conduct""Enforcement Guidelines
3. Temporary Ban	CODE_OF_CONDUCT.md	/^### 3. Temporary Ban$/;"	S	section:Contributor Covenant Code of Conduct""Enforcement Guidelines
4. Permanent Ban	CODE_OF_CONDUCT.md	/^### 4. Permanent Ban$/;"	S	section:Contributor Covenant Code of Conduct""Enforcement Guidelines
@types/react	www/package.json	/^    "@types\/react": "latest",$/;"	s	object:devDependencies
ADD	examples/everything/main.go	/^	ADD                    ToolName = "add"$/;"	c	package:main	typeref:type:ToolName
AccessToken	client/transport/oauth.go	/^	AccessToken string `json:"access_token"`$/;"	m	struct:transport.Token	typeref:typename:string
AddAfterCallTool	server/hooks.go	/^func (c *Hooks) AddAfterCallTool(hook OnAfterCallToolFunc) {$/;"	f	struct:server.Hooks
AddAfterGetPrompt	server/hooks.go	/^func (c *Hooks) AddAfterGetPrompt(hook OnAfterGetPromptFunc) {$/;"	f	struct:server.Hooks
AddAfterInitialize	server/hooks.go	/^func (c *Hooks) AddAfterInitialize(hook OnAfterInitializeFunc) {$/;"	f	struct:server.Hooks
AddAfterListPrompts	server/hooks.go	/^func (c *Hooks) AddAfterListPrompts(hook OnAfterListPromptsFunc) {$/;"	f	struct:server.Hooks
AddAfterListResourceTemplates	server/hooks.go	/^func (c *Hooks) AddAfterListResourceTemplates(hook OnAfterListResourceTemplatesFunc) {$/;"	f	struct:server.Hooks
AddAfterListResources	server/hooks.go	/^func (c *Hooks) AddAfterListResources(hook OnAfterListResourcesFunc) {$/;"	f	struct:server.Hooks
AddAfterListTools	server/hooks.go	/^func (c *Hooks) AddAfterListTools(hook OnAfterListToolsFunc) {$/;"	f	struct:server.Hooks
AddAfterPing	server/hooks.go	/^func (c *Hooks) AddAfterPing(hook OnAfterPingFunc) {$/;"	f	struct:server.Hooks
AddAfterReadResource	server/hooks.go	/^func (c *Hooks) AddAfterReadResource(hook OnAfterReadResourceFunc) {$/;"	f	struct:server.Hooks
AddAfterSetLevel	server/hooks.go	/^func (c *Hooks) AddAfterSetLevel(hook OnAfterSetLevelFunc) {$/;"	f	struct:server.Hooks
AddBeforeAny	server/hooks.go	/^func (c *Hooks) AddBeforeAny(hook BeforeAnyHookFunc) {$/;"	f	struct:server.Hooks
AddBeforeCallTool	server/hooks.go	/^func (c *Hooks) AddBeforeCallTool(hook OnBeforeCallToolFunc) {$/;"	f	struct:server.Hooks
AddBeforeGetPrompt	server/hooks.go	/^func (c *Hooks) AddBeforeGetPrompt(hook OnBeforeGetPromptFunc) {$/;"	f	struct:server.Hooks
AddBeforeInitialize	server/hooks.go	/^func (c *Hooks) AddBeforeInitialize(hook OnBeforeInitializeFunc) {$/;"	f	struct:server.Hooks
AddBeforeListPrompts	server/hooks.go	/^func (c *Hooks) AddBeforeListPrompts(hook OnBeforeListPromptsFunc) {$/;"	f	struct:server.Hooks
AddBeforeListResourceTemplates	server/hooks.go	/^func (c *Hooks) AddBeforeListResourceTemplates(hook OnBeforeListResourceTemplatesFunc) {$/;"	f	struct:server.Hooks
AddBeforeListResources	server/hooks.go	/^func (c *Hooks) AddBeforeListResources(hook OnBeforeListResourcesFunc) {$/;"	f	struct:server.Hooks
AddBeforeListTools	server/hooks.go	/^func (c *Hooks) AddBeforeListTools(hook OnBeforeListToolsFunc) {$/;"	f	struct:server.Hooks
AddBeforePing	server/hooks.go	/^func (c *Hooks) AddBeforePing(hook OnBeforePingFunc) {$/;"	f	struct:server.Hooks
AddBeforeReadResource	server/hooks.go	/^func (c *Hooks) AddBeforeReadResource(hook OnBeforeReadResourceFunc) {$/;"	f	struct:server.Hooks
AddBeforeSetLevel	server/hooks.go	/^func (c *Hooks) AddBeforeSetLevel(hook OnBeforeSetLevelFunc) {$/;"	f	struct:server.Hooks
AddNotificationHandler	server/server.go	/^func (s *MCPServer) AddNotificationHandler($/;"	f	struct:server.MCPServer
AddOnError	server/hooks.go	/^func (c *Hooks) AddOnError(hook OnErrorHookFunc) {$/;"	f	struct:server.Hooks
AddOnRegisterSession	server/hooks.go	/^func (c *Hooks) AddOnRegisterSession(hook OnRegisterSessionHookFunc) {$/;"	f	struct:server.Hooks
AddOnRequestInitialization	server/hooks.go	/^func (c *Hooks) AddOnRequestInitialization(hook OnRequestInitializationFunc) {$/;"	f	struct:server.Hooks
AddOnSuccess	server/hooks.go	/^func (c *Hooks) AddOnSuccess(hook OnSuccessHookFunc) {$/;"	f	struct:server.Hooks
AddOnUnregisterSession	server/hooks.go	/^func (c *Hooks) AddOnUnregisterSession(hook OnUnregisterSessionHookFunc) {$/;"	f	struct:server.Hooks
AddPrompt	mcptest/mcptest.go	/^func (s *Server) AddPrompt(prompt mcp.Prompt, handler server.PromptHandlerFunc) {$/;"	f	struct:mcptest.Server
AddPrompt	server/server.go	/^func (s *MCPServer) AddPrompt(prompt mcp.Prompt, handler PromptHandlerFunc) {$/;"	f	struct:server.MCPServer
AddPrompts	mcptest/mcptest.go	/^func (s *Server) AddPrompts(prompts ...server.ServerPrompt) {$/;"	f	struct:mcptest.Server
AddPrompts	server/server.go	/^func (s *MCPServer) AddPrompts(prompts ...ServerPrompt) {$/;"	f	struct:server.MCPServer
AddResource	mcptest/mcptest.go	/^func (s *Server) AddResource(resource mcp.Resource, handler server.ResourceHandlerFunc) {$/;"	f	struct:mcptest.Server
AddResource	server/server.go	/^func (s *MCPServer) AddResource($/;"	f	struct:server.MCPServer
AddResourceTemplate	mcptest/mcptest.go	/^func (s *Server) AddResourceTemplate(template mcp.ResourceTemplate, handler server.ResourceTempl/;"	f	struct:mcptest.Server
AddResourceTemplate	server/server.go	/^func (s *MCPServer) AddResourceTemplate($/;"	f	struct:server.MCPServer
AddResourceTemplates	mcptest/mcptest.go	/^func (s *Server) AddResourceTemplates(templates ...server.ServerResourceTemplate) {$/;"	f	struct:mcptest.Server
AddResourceTemplates	server/server.go	/^func (s *MCPServer) AddResourceTemplates(resourceTemplates ...ServerResourceTemplate) {$/;"	f	struct:server.MCPServer
AddResources	mcptest/mcptest.go	/^func (s *Server) AddResources(resources ...server.ServerResource) {$/;"	f	struct:mcptest.Server
AddResources	server/server.go	/^func (s *MCPServer) AddResources(resources ...ServerResource) {$/;"	f	struct:server.MCPServer
AddSessionTool	server/session.go	/^func (s *MCPServer) AddSessionTool(sessionID string, tool mcp.Tool, handler ToolHandlerFunc) err/;"	f	unknown:server.MCPServer	typeref:typename:error
AddSessionTools	server/session.go	/^func (s *MCPServer) AddSessionTools(sessionID string, tools ...ServerTool) error {$/;"	f	unknown:server.MCPServer	typeref:typename:error
AddTool	mcptest/mcptest.go	/^func (s *Server) AddTool(tool mcp.Tool, handler server.ToolHandlerFunc) {$/;"	f	struct:mcptest.Server
AddTool	server/server.go	/^func (s *MCPServer) AddTool(tool mcp.Tool, handler ToolHandlerFunc) {$/;"	f	struct:server.MCPServer
AddTools	mcptest/mcptest.go	/^func (s *Server) AddTools(tools ...server.ServerTool) {$/;"	f	struct:mcptest.Server
AddTools	server/server.go	/^func (s *MCPServer) AddTools(tools ...ServerTool) {$/;"	f	struct:server.MCPServer
Additional Context	.github/ISSUE_TEMPLATE/bug_report.md	/^## Additional Context$/;"	s
Additional Information	.github/pull_request_template.md	/^## Additional Information$/;"	s
AdditionalFields	mcp/types.go	/^	AdditionalFields map[string]any `json:"-"`$/;"	m	struct:mcp.NotificationParams	typeref:typename:map[string]any
AdditionalFields	mcp/types.go	/^	AdditionalFields map[string]any$/;"	m	struct:mcp.Meta	typeref:typename:map[string]any
AdditionalProperties	mcp/tools.go	/^func AdditionalProperties(schema any) PropertyOption {$/;"	f	package:mcp	typeref:typename:PropertyOption
Age	examples/typed_tools/main.go	/^	Age       int      `json:"age"`$/;"	m	struct:main.GreetingArgs	typeref:typename:int
Alternatives/Workarounds Considered	.github/ISSUE_TEMPLATE/feature-request.md	/^## Alternatives\/Workarounds Considered$/;"	s
Annotated	mcp/types.go	/^	Annotated$/;"	M	struct:mcp.AudioContent	typeref:typename:Annotated
Annotated	mcp/types.go	/^	Annotated$/;"	M	struct:mcp.EmbeddedResource	typeref:typename:Annotated
Annotated	mcp/types.go	/^	Annotated$/;"	M	struct:mcp.ImageContent	typeref:typename:Annotated
Annotated	mcp/types.go	/^	Annotated$/;"	M	struct:mcp.Resource	typeref:typename:Annotated
Annotated	mcp/types.go	/^	Annotated$/;"	M	struct:mcp.ResourceLink	typeref:typename:Annotated
Annotated	mcp/types.go	/^	Annotated$/;"	M	struct:mcp.ResourceTemplate	typeref:typename:Annotated
Annotated	mcp/types.go	/^	Annotated$/;"	M	struct:mcp.TextContent	typeref:typename:Annotated
Annotated	mcp/types.go	/^type Annotated struct {$/;"	s	package:mcp
Annotations	mcp/tools.go	/^	Annotations ToolAnnotation `json:"annotations"`$/;"	m	struct:mcp.Tool	typeref:typename:ToolAnnotation
Annotations	mcp/types.go	/^	Annotations *Annotations `json:"annotations,omitempty"`$/;"	m	struct:mcp.Annotated	typeref:typename:*Annotations
Annotations	mcp/types.go	/^type Annotations struct {$/;"	s	package:mcp
Args	examples/custom_context/main.go	/^	Args    map[string]any    `json:"args"`$/;"	m	struct:main.response	typeref:typename:map[string]any
Argument	mcp/types.go	/^	Argument struct {$/;"	m	struct:mcp.CompleteParams	typeref:typename:struct { Name string `json:"name"`; Value string `json:"value"`; }
ArgumentDescription	mcp/prompts.go	/^func ArgumentDescription(desc string) ArgumentOption {$/;"	f	package:mcp	typeref:typename:ArgumentOption
ArgumentOption	mcp/prompts.go	/^type ArgumentOption func(*PromptArgument)$/;"	t	package:mcp	typeref:typename:func(*PromptArgument)
Arguments	mcp/prompts.go	/^	Arguments []PromptArgument `json:"arguments,omitempty"`$/;"	m	struct:mcp.Prompt	typeref:typename:[]PromptArgument
Arguments	mcp/prompts.go	/^	Arguments map[string]string `json:"arguments,omitempty"`$/;"	m	struct:mcp.GetPromptParams	typeref:typename:map[string]string
Arguments	mcp/tools.go	/^	Arguments any    `json:"arguments,omitempty"`$/;"	m	struct:mcp.CallToolParams	typeref:typename:any
Arguments	mcp/types.go	/^	Arguments map[string]any `json:"arguments,omitempty"`$/;"	m	struct:mcp.ReadResourceParams	typeref:typename:map[string]any
AsAudioContent	mcp/utils.go	/^func AsAudioContent(content any) (*AudioContent, bool) {$/;"	f	package:mcp	typeref:typename:(*AudioContent, bool)
AsBlobResourceContents	mcp/utils.go	/^func AsBlobResourceContents(content any) (*BlobResourceContents, bool) {$/;"	f	package:mcp	typeref:typename:(*BlobResourceContents, bool)
AsEmbeddedResource	mcp/utils.go	/^func AsEmbeddedResource(content any) (*EmbeddedResource, bool) {$/;"	f	package:mcp	typeref:typename:(*EmbeddedResource, bool)
AsImageContent	mcp/utils.go	/^func AsImageContent(content any) (*ImageContent, bool) {$/;"	f	package:mcp	typeref:typename:(*ImageContent, bool)
AsTextContent	mcp/utils.go	/^func AsTextContent(content any) (*TextContent, bool) {$/;"	f	package:mcp	typeref:typename:(*TextContent, bool)
AsTextResourceContents	mcp/utils.go	/^func AsTextResourceContents(content any) (*TextResourceContents, bool) {$/;"	f	package:mcp	typeref:typename:(*TextResourceContents, bool)
Attribution	CODE_OF_CONDUCT.md	/^## Attribution$/;"	s	chapter:Contributor Covenant Code of Conduct
Audience	mcp/types.go	/^	Audience []Role `json:"audience,omitempty"`$/;"	m	struct:mcp.Annotations	typeref:typename:[]Role
AudioContent	mcp/types.go	/^type AudioContent struct {$/;"	s	package:mcp
AuthServerMetadata	client/transport/oauth.go	/^type AuthServerMetadata struct {$/;"	s	package:transport
AuthServerMetadataURL	client/transport/oauth.go	/^	AuthServerMetadataURL string$/;"	m	struct:transport.OAuthConfig	typeref:typename:string
AuthorizationEndpoint	client/transport/oauth.go	/^	AuthorizationEndpoint             string   `json:"authorization_endpoint"`$/;"	m	struct:transport.AuthServerMetadata	typeref:typename:string
AuthorizationServers	client/transport/oauth.go	/^	AuthorizationServers []string `json:"authorization_servers"`$/;"	m	struct:transport.OAuthProtectedResource	typeref:typename:[]string
Basic Session Handling	README.md	/^#### Basic Session Handling$/;"	t	subsection:Extras""Session Management
BeforeAnyHookFunc	server/hooks.go	/^type BeforeAnyHookFunc func(ctx context.Context, id any, method mcp.MCPMethod, message any)$/;"	t	package:server	typeref:typename:func(ctx context.Context, id any, method mcp.MCPMethod, message any)
BenchmarkMCPServer_Pagination	server/server_test.go	/^func BenchmarkMCPServer_Pagination(b *testing.B) {$/;"	f	package:server
BenchmarkMCPServer_PaginationForReflect	server/server_test.go	/^func BenchmarkMCPServer_PaginationForReflect(b *testing.B) {$/;"	f	package:server
BidirectionalInterface	client/transport/interface.go	/^type BidirectionalInterface interface {$/;"	i	package:transport
BindArguments	mcp/tools.go	/^func (r CallToolRequest) BindArguments(target any) error {$/;"	f	struct:mcp.CallToolRequest	typeref:typename:error
Blob	mcp/types.go	/^	Blob string `json:"blob"`$/;"	m	struct:mcp.BlobResourceContents	typeref:typename:string
BlobResourceContents	mcp/types.go	/^type BlobResourceContents struct {$/;"	s	package:mcp
COMPLEX	examples/everything/main.go	/^	COMPLEX PromptName = "complex_prompt"$/;"	c	package:main	typeref:type:PromptName
CallTool	client/client.go	/^func (c *Client) CallTool($/;"	f	struct:client.Client	typeref:typename:(*mcp.CallToolResult, error)
CallTool	client/interface.go	/^	CallTool($/;"	n	interface:client.MCPClient	typeref:typename:(*mcp.CallToolResult, error)
CallToolParams	mcp/tools.go	/^type CallToolParams struct {$/;"	s	package:mcp
CallToolRequest	mcp/tools.go	/^type CallToolRequest struct {$/;"	s	package:mcp
CallToolResult	mcp/tools.go	/^type CallToolResult struct {$/;"	s	package:mcp
CancelledNotification	mcp/types.go	/^type CancelledNotification struct {$/;"	s	package:mcp
CancelledNotificationParams	mcp/types.go	/^type CancelledNotificationParams struct {$/;"	s	package:mcp
Capabilities	mcp/types.go	/^	Capabilities    ClientCapabilities `json:"capabilities"`$/;"	m	struct:mcp.InitializeParams	typeref:typename:ClientCapabilities
Capabilities	mcp/types.go	/^	Capabilities    ServerCapabilities `json:"capabilities"`$/;"	m	struct:mcp.InitializeResult	typeref:typename:ServerCapabilities
Checklist	.github/pull_request_template.md	/^## Checklist$/;"	s
Client	client/client.go	/^type Client struct {$/;"	s	package:client
Client	mcptest/mcptest.go	/^func (s *Server) Client() *client.Client {$/;"	f	struct:mcptest.Server	typeref:typename:*client.Client
Client Side	examples/inprocess_sampling/README.md	/^### Client Side$/;"	S	section:InProcess Sampling Example""Key Components
ClientCapabilities	mcp/types.go	/^type ClientCapabilities struct {$/;"	s	package:mcp
ClientID	client/transport/oauth.go	/^	ClientID string$/;"	m	struct:transport.OAuthConfig	typeref:typename:string
ClientInfo	mcp/types.go	/^	ClientInfo      Implementation     `json:"clientInfo"`$/;"	m	struct:mcp.InitializeParams	typeref:typename:Implementation
ClientNotification	mcp/types.go	/^type ClientNotification any$/;"	t	package:mcp	typeref:typename:any
ClientOption	client/client.go	/^type ClientOption func(*Client)$/;"	t	package:client	typeref:typename:func(*Client)
ClientOption	client/transport/sse.go	/^type ClientOption func(*SSE)$/;"	t	package:transport	typeref:typename:func(*SSE)
ClientRequest	mcp/types.go	/^type ClientRequest any$/;"	t	package:mcp	typeref:typename:any
ClientResult	mcp/types.go	/^type ClientResult any$/;"	t	package:mcp	typeref:typename:any
ClientSecret	client/transport/oauth.go	/^	ClientSecret string$/;"	m	struct:transport.OAuthConfig	typeref:typename:string
ClientSession	server/session.go	/^type ClientSession interface {$/;"	i	package:server
ClientSessionFromContext	server/session.go	/^func ClientSessionFromContext(ctx context.Context) ClientSession {$/;"	f	package:server	typeref:typename:ClientSession
Close	client/client.go	/^func (c *Client) Close() error {$/;"	f	struct:client.Client	typeref:typename:error
Close	client/interface.go	/^	Close() error$/;"	n	interface:client.MCPClient	typeref:typename:error
Close	client/protocol_negotiation_test.go	/^func (m *mockProtocolTransport) Close() error {$/;"	f	struct:client.mockProtocolTransport	typeref:typename:error
Close	client/sampling_test.go	/^func (m *mockTransport) Close() error {$/;"	f	struct:client.mockTransport	typeref:typename:error
Close	client/transport/inprocess.go	/^func (c *InProcessTransport) Close() error {$/;"	f	struct:transport.InProcessTransport	typeref:typename:error
Close	client/transport/interface.go	/^	Close() error$/;"	n	interface:transport.Interface	typeref:typename:error
Close	client/transport/sse.go	/^func (c *SSE) Close() error {$/;"	f	struct:transport.SSE	typeref:typename:error
Close	client/transport/stdio.go	/^func (c *Stdio) Close() error {$/;"	f	struct:transport.Stdio	typeref:typename:error
Close	client/transport/streamable_http.go	/^func (c *StreamableHTTP) Close() error {$/;"	f	struct:transport.StreamableHTTP	typeref:typename:error
Close	mcptest/mcptest.go	/^func (s *Server) Close() {$/;"	f	struct:mcptest.Server
Code Sample	.github/ISSUE_TEMPLATE/bug_report.md	/^## Code Sample$/;"	s
CommandFunc	client/transport/stdio.go	/^type CommandFunc func(ctx context.Context, command string, env []string, args []string) (*exec.C/;"	t	package:transport	typeref:typename:func(ctx context.Context, command string, env []string, args []string) (*exec.Cmd, error)
Complete	client/client.go	/^func (c *Client) Complete($/;"	f	struct:client.Client	typeref:typename:(*mcp.CompleteResult, error)
Complete	client/interface.go	/^	Complete($/;"	n	interface:client.MCPClient	typeref:typename:(*mcp.CompleteResult, error)
CompleteMessageEndpoint	server/sse.go	/^func (s *SSEServer) CompleteMessageEndpoint() (string, error) {$/;"	f	struct:server.SSEServer	typeref:typename:(string, error)
CompleteMessagePath	server/sse.go	/^func (s *SSEServer) CompleteMessagePath() string {$/;"	f	struct:server.SSEServer	typeref:typename:string
CompleteParams	mcp/types.go	/^type CompleteParams struct {$/;"	s	package:mcp
CompleteRequest	mcp/types.go	/^type CompleteRequest struct {$/;"	s	package:mcp
CompleteResult	mcp/types.go	/^type CompleteResult struct {$/;"	s	package:mcp
CompleteSseEndpoint	server/sse.go	/^func (s *SSEServer) CompleteSseEndpoint() (string, error) {$/;"	f	struct:server.SSEServer	typeref:typename:(string, error)
CompleteSsePath	server/sse.go	/^func (s *SSEServer) CompleteSsePath() string {$/;"	f	struct:server.SSEServer	typeref:typename:string
Completion	mcp/types.go	/^	Completion struct {$/;"	m	struct:mcp.CompleteResult	typeref:typename:struct { Values []string `json:"values"`; Total int `json:"total,omitempty"`; HasMore bool `json:"hasMore,omitempty"`; }
Configuration	examples/oauth_client/README.md	/^## Configuration$/;"	s	chapter:OAuth Client Example
Content	mcp/prompts.go	/^	Content Content `json:"content"` \/\/ Can be TextContent, ImageContent, AudioContent or Embedde/;"	m	struct:mcp.PromptMessage	typeref:typename:Content
Content	mcp/tools.go	/^	Content []Content `json:"content"` \/\/ Can be TextContent, ImageContent, AudioContent, or Embe/;"	m	struct:mcp.CallToolResult	typeref:typename:[]Content
Content	mcp/types.go	/^	Content any  `json:"content"` \/\/ Can be TextContent, ImageContent or AudioContent$/;"	m	struct:mcp.SamplingMessage	typeref:typename:any
Content	mcp/types.go	/^type Content interface {$/;"	i	package:mcp
Contents	mcp/types.go	/^	Contents []ResourceContents `json:"contents"` \/\/ Can be TextResourceContents or BlobResourceC/;"	m	struct:mcp.ReadResourceResult	typeref:typename:[]ResourceContents
Contributing	CONTRIBUTING.md	/^# Contributing$/;"	c
Contributor Covenant Code of Conduct	CODE_OF_CONDUCT.md	/^# Contributor Covenant Code of Conduct$/;"	c
Core Concepts	README.md	/^## Core Concepts$/;"	s
CostPriority	mcp/types.go	/^	CostPriority float64 `json:"costPriority,omitempty"`$/;"	m	struct:mcp.ModelPreferences	typeref:typename:float64
CreateMessage	client/inprocess.go	/^func (w *inProcessSamplingHandlerWrapper) CreateMessage(ctx context.Context, request mcp.CreateM/;"	f	struct:client.inProcessSamplingHandlerWrapper	typeref:typename:(*mcp.CreateMessageResult, error)
CreateMessage	client/inprocess_sampling_test.go	/^func (h *MockSamplingHandler) CreateMessage(ctx context.Context, request mcp.CreateMessageReques/;"	f	struct:client.MockSamplingHandler	typeref:typename:(*mcp.CreateMessageResult, error)
CreateMessage	client/sampling.go	/^	CreateMessage(ctx context.Context, request mcp.CreateMessageRequest) (*mcp.CreateMessageResult,/;"	n	interface:client.SamplingHandler	typeref:typename:(*mcp.CreateMessageResult, error)
CreateMessage	client/sampling_test.go	/^func (m *mockSamplingHandler) CreateMessage(ctx context.Context, request mcp.CreateMessageReques/;"	f	struct:client.mockSamplingHandler	typeref:typename:(*mcp.CreateMessageResult, error)
CreateMessage	examples/inprocess_sampling/main.go	/^func (h *MockSamplingHandler) CreateMessage(ctx context.Context, request mcp.CreateMessageReques/;"	f	struct:main.MockSamplingHandler	typeref:typename:(*mcp.CreateMessageResult, error)
CreateMessage	examples/sampling_client/main.go	/^func (h *MockSamplingHandler) CreateMessage(ctx context.Context, request mcp.CreateMessageReques/;"	f	struct:main.MockSamplingHandler	typeref:typename:(*mcp.CreateMessageResult, error)
CreateMessage	server/inprocess_session.go	/^	CreateMessage(ctx context.Context, request mcp.CreateMessageRequest) (*mcp.CreateMessageResult,/;"	n	interface:server.SamplingHandler	typeref:typename:(*mcp.CreateMessageResult, error)
CreateMessageParams	mcp/types.go	/^	CreateMessageParams `json:"params"`$/;"	M	struct:mcp.CreateMessageRequest	typeref:typename:CreateMessageParams
CreateMessageParams	mcp/types.go	/^type CreateMessageParams struct {$/;"	s	package:mcp
CreateMessageRequest	mcp/types.go	/^type CreateMessageRequest struct {$/;"	s	package:mcp
CreateMessageResult	mcp/types.go	/^type CreateMessageResult struct {$/;"	s	package:mcp
Cursor	mcp/types.go	/^	Cursor Cursor `json:"cursor,omitempty"`$/;"	m	struct:mcp.PaginatedParams	typeref:typename:Cursor
Cursor	mcp/types.go	/^type Cursor string$/;"	t	package:mcp	typeref:typename:string
Data	mcp/types.go	/^	Data any `json:"data"`$/;"	m	struct:mcp.LoggingMessageNotificationParams	typeref:typename:any
Data	mcp/types.go	/^	Data string `json:"data"`$/;"	m	struct:mcp.AudioContent	typeref:typename:string
Data	mcp/types.go	/^	Data string `json:"data"`$/;"	m	struct:mcp.ImageContent	typeref:typename:string
DefaultArray	mcp/tools.go	/^func DefaultArray[T any](value []T) PropertyOption {$/;"	f	package:mcp	typeref:typename:(value []T) PropertyOption
DefaultBool	mcp/tools.go	/^func DefaultBool(value bool) PropertyOption {$/;"	f	package:mcp	typeref:typename:PropertyOption
DefaultLogger	util/logger.go	/^func DefaultLogger() Logger {$/;"	f	package:util	typeref:typename:Logger
DefaultNumber	mcp/tools.go	/^func DefaultNumber(value float64) PropertyOption {$/;"	f	package:mcp	typeref:typename:PropertyOption
DefaultString	mcp/tools.go	/^func DefaultString(value string) PropertyOption {$/;"	f	package:mcp	typeref:typename:PropertyOption
DeletePrompts	server/server.go	/^func (s *MCPServer) DeletePrompts(names ...string) {$/;"	f	struct:server.MCPServer
DeleteSessionTools	server/session.go	/^func (s *MCPServer) DeleteSessionTools(sessionID string, names ...string) error {$/;"	f	unknown:server.MCPServer	typeref:typename:error
DeleteTools	server/server.go	/^func (s *MCPServer) DeleteTools(names ...string) {$/;"	f	struct:server.MCPServer
Description	.github/ISSUE_TEMPLATE/bug_report.md	/^## Description$/;"	s
Description	.github/pull_request_template.md	/^## Description$/;"	s
Description	mcp/prompts.go	/^	Description string          `json:"description,omitempty"`$/;"	m	struct:mcp.GetPromptResult	typeref:typename:string
Description	mcp/prompts.go	/^	Description string `json:"description,omitempty"`$/;"	m	struct:mcp.Prompt	typeref:typename:string
Description	mcp/prompts.go	/^	Description string `json:"description,omitempty"`$/;"	m	struct:mcp.PromptArgument	typeref:typename:string
Description	mcp/tools.go	/^	Description string `json:"description,omitempty"`$/;"	m	struct:mcp.Tool	typeref:typename:string
Description	mcp/tools.go	/^func Description(desc string) PropertyOption {$/;"	f	package:mcp	typeref:typename:PropertyOption
Description	mcp/types.go	/^	Description string `json:"description"`$/;"	m	struct:mcp.ResourceLink	typeref:typename:string
Description	mcp/types.go	/^	Description string `json:"description,omitempty"`$/;"	m	struct:mcp.Resource	typeref:typename:string
Description	mcp/types.go	/^	Description string `json:"description,omitempty"`$/;"	m	struct:mcp.ResourceTemplate	typeref:typename:string
DestructiveHint	mcp/tools.go	/^	DestructiveHint *bool `json:"destructiveHint,omitempty"`$/;"	m	struct:mcp.ToolAnnotation	typeref:typename:*bool
Development	server/internal/gen/README.md	/^## Development$/;"	s	chapter:Readme for Codegen
Development Guidelines	CONTRIBUTING.md	/^## Development Guidelines$/;"	s	chapter:Contributing
Documentation Issue	.github/ISSUE_TEMPLATE/documentation-improvement.md	/^## Documentation Issue$/;"	s
DynamicBasePathFunc	server/sse.go	/^type DynamicBasePathFunc func(r *http.Request, sessionID string) string$/;"	t	package:server	typeref:typename:func(r *http.Request, sessionID string) string
ECHO	examples/everything/main.go	/^	ECHO                   ToolName = "echo"$/;"	c	package:main	typeref:type:ToolName
EmbeddedResource	mcp/types.go	/^type EmbeddedResource struct {$/;"	s	package:mcp
EmptyResult	mcp/types.go	/^type EmptyResult Result$/;"	t	package:mcp	typeref:typename:Result
EnableSampling	server/sampling.go	/^func (s *MCPServer) EnableSampling() {$/;"	f	unknown:server.MCPServer
Enforcement	CODE_OF_CONDUCT.md	/^## Enforcement$/;"	s	chapter:Contributor Covenant Code of Conduct
Enforcement Guidelines	CODE_OF_CONDUCT.md	/^## Enforcement Guidelines$/;"	s	chapter:Contributor Covenant Code of Conduct
Enforcement Responsibilities	CODE_OF_CONDUCT.md	/^## Enforcement Responsibilities$/;"	s	chapter:Contributor Covenant Code of Conduct
Enum	mcp/tools.go	/^func Enum(values ...string) PropertyOption {$/;"	f	package:mcp	typeref:typename:PropertyOption
Environment	.github/ISSUE_TEMPLATE/bug_report.md	/^## Environment$/;"	s
Err	client/transport/error.go	/^	Err error$/;"	m	struct:transport.Error	typeref:typename:error
ErrDynamicPathConfig	server/errors.go	/^type ErrDynamicPathConfig struct {$/;"	s	package:server
ErrGetMethodNotAllowed	client/transport/streamable_http.go	/^	ErrGetMethodNotAllowed = fmt.Errorf("GET method not allowed")$/;"	v	package:transport
ErrInvalidState	client/transport/oauth.go	/^var ErrInvalidState = errors.New("invalid state parameter, possible CSRF attack")$/;"	v	package:transport
ErrNotificationChannelBlocked	server/errors.go	/^	ErrNotificationChannelBlocked = errors.New("notification channel full or blocked")$/;"	v	package:server
ErrNotificationNotInitialized	server/errors.go	/^	ErrNotificationNotInitialized = errors.New("notification channel not initialized")$/;"	v	package:server
ErrOAuthAuthorizationRequired	client/transport/streamable_http.go	/^var ErrOAuthAuthorizationRequired = errors.New("no valid token available, authorization required/;"	v	package:transport
ErrPromptNotFound	server/errors.go	/^	ErrPromptNotFound   = errors.New("prompt not found")$/;"	v	package:server
ErrResourceNotFound	server/errors.go	/^	ErrResourceNotFound = errors.New("resource not found")$/;"	v	package:server
ErrSessionDoesNotSupportLogging	server/errors.go	/^	ErrSessionDoesNotSupportLogging = errors.New("session does not support setting logging level")$/;"	v	package:server
ErrSessionDoesNotSupportTools	server/errors.go	/^	ErrSessionDoesNotSupportTools   = errors.New("session does not support per-session tools")$/;"	v	package:server
ErrSessionExists	server/errors.go	/^	ErrSessionExists                = errors.New("session already exists")$/;"	v	package:server
ErrSessionNotFound	server/errors.go	/^	ErrSessionNotFound              = errors.New("session not found")$/;"	v	package:server
ErrSessionNotInitialized	server/errors.go	/^	ErrSessionNotInitialized        = errors.New("session not properly initialized")$/;"	v	package:server
ErrSessionTerminated	client/transport/streamable_http.go	/^	ErrSessionTerminated   = fmt.Errorf("session terminated (404). need to re-initialize")$/;"	v	package:transport
ErrToolNotFound	server/errors.go	/^	ErrToolNotFound     = errors.New("tool not found")$/;"	v	package:server
ErrUnsupported	server/errors.go	/^	ErrUnsupported      = errors.New("not supported")$/;"	v	package:server
Error	client/transport/error.go	/^func (e *Error) Error() string {$/;"	f	struct:transport.Error	typeref:typename:string
Error	client/transport/error.go	/^type Error struct {$/;"	s	package:transport
Error	client/transport/interface.go	/^	Error   *struct {$/;"	m	struct:transport.JSONRPCResponse	typeref:typename:*struct { Code int `json:"code"`; Message string `json:"message"`; Data json.RawMessage `json:"data"`; }
Error	client/transport/oauth.go	/^func (e OAuthError) Error() string {$/;"	f	struct:transport.OAuthError	typeref:typename:string
Error	client/transport/streamable_http.go	/^func (e *OAuthAuthorizationRequiredError) Error() string {$/;"	f	struct:transport.OAuthAuthorizationRequiredError	typeref:typename:string
Error	mcp/errors.go	/^func (e UnsupportedProtocolVersionError) Error() string {$/;"	f	struct:mcp.UnsupportedProtocolVersionError	typeref:typename:string
Error	mcp/types.go	/^	Error   struct {$/;"	m	struct:mcp.JSONRPCError	typeref:typename:struct { Code int `json:"code"`; Message string `json:"message"`; Data any `json:"data,omitempty"`; }
Error	server/errors.go	/^func (e *ErrDynamicPathConfig) Error() string {$/;"	f	struct:server.ErrDynamicPathConfig	typeref:typename:string
Error	server/server.go	/^func (e *UnparsableMessageError) Error() string {$/;"	f	struct:server.UnparsableMessageError	typeref:typename:string
Error	server/server.go	/^func (e *requestError) Error() string {$/;"	f	struct:server.requestError	typeref:typename:string
Error	server/streamable_http_test.go	/^	Error  *mcp.JSONRPCError `json:"error"`$/;"	m	struct:server.jsonRPCResponse	typeref:typename:*mcp.JSONRPCError
Error	testdata/mockstdio_server.go	/^	Error   *struct {$/;"	m	struct:main.JSONRPCResponse	typeref:typename:*struct { Code int `json:"code"`; Message string `json:"message"`; }
ErrorCode	client/transport/oauth.go	/^	ErrorCode        string `json:"error"`$/;"	m	struct:transport.OAuthError	typeref:typename:string
ErrorDescription	client/transport/oauth.go	/^	ErrorDescription string `json:"error_description,omitempty"`$/;"	m	struct:transport.OAuthError	typeref:typename:string
ErrorURI	client/transport/oauth.go	/^	ErrorURI         string `json:"error_uri,omitempty"`$/;"	m	struct:transport.OAuthError	typeref:typename:string
Errorf	client/transport/streamable_http_test.go	/^func (l *testLogger) Errorf(format string, args ...any) {$/;"	f	struct:transport.testLogger
Errorf	util/logger.go	/^	Errorf(format string, v ...any)$/;"	n	interface:util.Logger
Errorf	util/logger.go	/^func (l *stdLogger) Errorf(format string, v ...any) {$/;"	f	struct:util.stdLogger
Example Usage	.github/ISSUE_TEMPLATE/feature-request.md	/^## Example Usage$/;"	s
Examples	README.md	/^## Examples$/;"	s
Expected Output	examples/inprocess_sampling/README.md	/^## Expected Output$/;"	s	chapter:InProcess Sampling Example
Experimental	mcp/types.go	/^	Experimental map[string]any `json:"experimental,omitempty"`$/;"	m	struct:mcp.ClientCapabilities	typeref:typename:map[string]any
Experimental	mcp/types.go	/^	Experimental map[string]any `json:"experimental,omitempty"`$/;"	m	struct:mcp.ServerCapabilities	typeref:typename:map[string]any
ExpiresAt	client/transport/oauth.go	/^	ExpiresAt time.Time `json:"expires_at,omitempty"`$/;"	m	struct:transport.Token	typeref:typename:time.Time
ExpiresIn	client/transport/oauth.go	/^	ExpiresIn int64 `json:"expires_in,omitempty"`$/;"	m	struct:transport.Token	typeref:typename:int64
ExtractMap	mcp/utils.go	/^func ExtractMap(data map[string]any, key string) map[string]any {$/;"	f	package:mcp	typeref:typename:map[string]any
ExtractString	mcp/utils.go	/^func ExtractString(data map[string]any, key string) string {$/;"	f	package:mcp	typeref:typename:string
Extras	README.md	/^## Extras$/;"	s
Features	examples/oauth_client/README.md	/^## Features$/;"	s	chapter:OAuth Client Example
Features	examples/sampling_client/README.md	/^## Features$/;"	s	chapter:MCP Sampling Example Client
Features	examples/sampling_server/README.md	/^## Features$/;"	s	chapter:MCP Sampling Example Server
FormatNumberResult	mcp/utils.go	/^func FormatNumberResult(value float64) *CallToolResult {$/;"	f	package:mcp	typeref:typename:*CallToolResult
GET_TINY_IMAGE	examples/everything/main.go	/^	GET_TINY_IMAGE         ToolName = "getTinyImage"$/;"	c	package:main	typeref:type:ToolName
Generate	server/streamable_http.go	/^	Generate() string$/;"	n	interface:server.SessionIdManager	typeref:typename:string
Generate	server/streamable_http.go	/^func (s *InsecureStatefulSessionIdManager) Generate() string {$/;"	f	struct:server.InsecureStatefulSessionIdManager	typeref:typename:string
Generate	server/streamable_http.go	/^func (s *StatelessSessionIdManager) Generate() string {$/;"	f	struct:server.StatelessSessionIdManager	typeref:typename:string
GenerateCodeChallenge	client/oauth.go	/^var GenerateCodeChallenge = transport.GenerateCodeChallenge$/;"	v	package:client
GenerateCodeChallenge	client/transport/oauth_utils.go	/^func GenerateCodeChallenge(codeVerifier string) string {$/;"	f	package:transport	typeref:typename:string
GenerateCodeVerifier	client/oauth.go	/^var GenerateCodeVerifier = transport.GenerateCodeVerifier$/;"	v	package:client
GenerateCodeVerifier	client/transport/oauth_utils.go	/^func GenerateCodeVerifier() (string, error) {$/;"	f	package:transport	typeref:typename:(string, error)
GenerateInProcessSessionID	server/inprocess_session.go	/^func GenerateInProcessSessionID() string {$/;"	f	package:server	typeref:typename:string
GenerateInProcessSessionID	server/server.go	/^func (s *MCPServer) GenerateInProcessSessionID() string {$/;"	f	struct:server.MCPServer	typeref:typename:string
GenerateRandomString	client/transport/oauth_utils.go	/^func GenerateRandomString(length int) (string, error) {$/;"	f	package:transport	typeref:typename:(string, error)
GenerateState	client/oauth.go	/^var GenerateState = transport.GenerateState$/;"	v	package:client
GenerateState	client/transport/oauth_utils.go	/^func GenerateState() (string, error) {$/;"	f	package:transport	typeref:typename:(string, error)
Get	client/http_test.go	/^func (sm *SafeMap) Get(key string) int {$/;"	f	struct:client.SafeMap	typeref:typename:int
GetArguments	mcp/tools.go	/^func (r CallToolRequest) GetArguments() map[string]any {$/;"	f	struct:mcp.CallToolRequest	typeref:typename:map[string]any
GetAuthorizationHeader	client/transport/oauth.go	/^func (h *OAuthHandler) GetAuthorizationHeader(ctx context.Context) (string, error) {$/;"	f	struct:transport.OAuthHandler	typeref:typename:(string, error)
GetAuthorizationURL	client/transport/oauth.go	/^func (h *OAuthHandler) GetAuthorizationURL(ctx context.Context, state, codeChallenge string) (st/;"	f	struct:transport.OAuthHandler	typeref:typename:(string, error)
GetBaseURL	client/transport/sse.go	/^func (c *SSE) GetBaseURL() *url.URL {$/;"	f	struct:transport.SSE	typeref:typename:*url.URL
GetBool	mcp/tools.go	/^func (r CallToolRequest) GetBool(key string, defaultValue bool) bool {$/;"	f	struct:mcp.CallToolRequest	typeref:typename:bool
GetBoolSlice	mcp/tools.go	/^func (r CallToolRequest) GetBoolSlice(key string, defaultValue []bool) []bool {$/;"	f	struct:mcp.CallToolRequest	typeref:typename:[]bool
GetClientCapabilities	client/client.go	/^func (c *Client) GetClientCapabilities() mcp.ClientCapabilities {$/;"	f	struct:client.Client	typeref:typename:mcp.ClientCapabilities
GetClientCapabilities	server/inprocess_session.go	/^func (s *InProcessSession) GetClientCapabilities() mcp.ClientCapabilities {$/;"	f	struct:server.InProcessSession	typeref:typename:mcp.ClientCapabilities
GetClientCapabilities	server/session.go	/^	GetClientCapabilities() mcp.ClientCapabilities$/;"	n	interface:server.SessionWithClientInfo	typeref:typename:mcp.ClientCapabilities
GetClientCapabilities	server/session_test.go	/^func (f *sessionTestClientWithClientInfo) GetClientCapabilities() mcp.ClientCapabilities {$/;"	f	struct:server.sessionTestClientWithClientInfo	typeref:typename:mcp.ClientCapabilities
GetClientCapabilities	server/sse.go	/^func (s *sseSession) GetClientCapabilities() mcp.ClientCapabilities {$/;"	f	struct:server.sseSession	typeref:typename:mcp.ClientCapabilities
GetClientCapabilities	server/stdio.go	/^func (s *stdioSession) GetClientCapabilities() mcp.ClientCapabilities {$/;"	f	struct:server.stdioSession	typeref:typename:mcp.ClientCapabilities
GetClientID	client/transport/oauth.go	/^func (h *OAuthHandler) GetClientID() string {$/;"	f	struct:transport.OAuthHandler	typeref:typename:string
GetClientInfo	server/inprocess_session.go	/^func (s *InProcessSession) GetClientInfo() mcp.Implementation {$/;"	f	struct:server.InProcessSession	typeref:typename:mcp.Implementation
GetClientInfo	server/session.go	/^	GetClientInfo() mcp.Implementation$/;"	n	interface:server.SessionWithClientInfo	typeref:typename:mcp.Implementation
GetClientInfo	server/session_test.go	/^func (f *sessionTestClientWithClientInfo) GetClientInfo() mcp.Implementation {$/;"	f	struct:server.sessionTestClientWithClientInfo	typeref:typename:mcp.Implementation
GetClientInfo	server/sse.go	/^func (s *sseSession) GetClientInfo() mcp.Implementation {$/;"	f	struct:server.sseSession	typeref:typename:mcp.Implementation
GetClientInfo	server/stdio.go	/^func (s *stdioSession) GetClientInfo() mcp.Implementation {$/;"	f	struct:server.stdioSession	typeref:typename:mcp.Implementation
GetClientSecret	client/transport/oauth.go	/^func (h *OAuthHandler) GetClientSecret() string {$/;"	f	struct:transport.OAuthHandler	typeref:typename:string
GetEndpoint	client/sse.go	/^func GetEndpoint(c *Client) *url.URL {$/;"	f	package:client	typeref:typename:*url.URL
GetEndpoint	client/transport/sse.go	/^func (c *SSE) GetEndpoint() *url.URL {$/;"	f	struct:transport.SSE	typeref:typename:*url.URL
GetExpectedState	client/transport/oauth.go	/^func (h *OAuthHandler) GetExpectedState() string {$/;"	f	struct:transport.OAuthHandler	typeref:typename:string
GetFloat	mcp/tools.go	/^func (r CallToolRequest) GetFloat(key string, defaultValue float64) float64 {$/;"	f	struct:mcp.CallToolRequest	typeref:typename:float64
GetFloatSlice	mcp/tools.go	/^func (r CallToolRequest) GetFloatSlice(key string, defaultValue []float64) []float64 {$/;"	f	struct:mcp.CallToolRequest	typeref:typename:[]float64
GetInt	mcp/tools.go	/^func (r CallToolRequest) GetInt(key string, defaultValue int) int {$/;"	f	struct:mcp.CallToolRequest	typeref:typename:int
GetIntSlice	mcp/tools.go	/^func (r CallToolRequest) GetIntSlice(key string, defaultValue []int) []int {$/;"	f	struct:mcp.CallToolRequest	typeref:typename:[]int
GetLogLevel	server/inprocess_session.go	/^func (s *InProcessSession) GetLogLevel() mcp.LoggingLevel {$/;"	f	struct:server.InProcessSession	typeref:typename:mcp.LoggingLevel
GetLogLevel	server/session.go	/^	GetLogLevel() mcp.LoggingLevel$/;"	n	interface:server.SessionWithLogging	typeref:typename:mcp.LoggingLevel
GetLogLevel	server/session_test.go	/^func (f *sessionTestClientWithLogging) GetLogLevel() mcp.LoggingLevel {$/;"	f	struct:server.sessionTestClientWithLogging	typeref:typename:mcp.LoggingLevel
GetLogLevel	server/sse.go	/^func (s *sseSession) GetLogLevel() mcp.LoggingLevel {$/;"	f	struct:server.sseSession	typeref:typename:mcp.LoggingLevel
GetLogLevel	server/stdio.go	/^func (s *stdioSession) GetLogLevel() mcp.LoggingLevel {$/;"	f	struct:server.stdioSession	typeref:typename:mcp.LoggingLevel
GetLogLevel	server/streamable_http.go	/^func (s *streamableHttpSession) GetLogLevel() mcp.LoggingLevel {$/;"	f	struct:server.streamableHttpSession	typeref:typename:mcp.LoggingLevel
GetMessage	server/server.go	/^func (e *UnparsableMessageError) GetMessage() json.RawMessage {$/;"	f	struct:server.UnparsableMessageError	typeref:typename:json.RawMessage
GetMessageEndpointForClient	server/sse.go	/^func (s *SSEServer) GetMessageEndpointForClient(r *http.Request, sessionID string) string {$/;"	f	struct:server.SSEServer	typeref:typename:string
GetMethod	server/server.go	/^func (e *UnparsableMessageError) GetMethod() mcp.MCPMethod {$/;"	f	struct:server.UnparsableMessageError	typeref:typename:mcp.MCPMethod
GetName	mcp/prompts.go	/^func (p Prompt) GetName() string {$/;"	f	struct:mcp.Prompt	typeref:typename:string
GetName	mcp/tools.go	/^func (t Tool) GetName() string {$/;"	f	struct:mcp.Tool	typeref:typename:string
GetName	mcp/types.go	/^	GetName() string$/;"	n	interface:mcp.Named	typeref:typename:string
GetName	mcp/types.go	/^func (r Resource) GetName() string {$/;"	f	struct:mcp.Resource	typeref:typename:string
GetName	mcp/types.go	/^func (rt ResourceTemplate) GetName() string {$/;"	f	struct:mcp.ResourceTemplate	typeref:typename:string
GetOAuthHandler	client/oauth.go	/^func GetOAuthHandler(err error) *transport.OAuthHandler {$/;"	f	package:client	typeref:typename:*transport.OAuthHandler
GetOAuthHandler	client/transport/sse.go	/^func (c *SSE) GetOAuthHandler() *OAuthHandler {$/;"	f	struct:transport.SSE	typeref:typename:*OAuthHandler
GetOAuthHandler	client/transport/streamable_http.go	/^func (c *StreamableHTTP) GetOAuthHandler() *OAuthHandler {$/;"	f	struct:transport.StreamableHTTP	typeref:typename:*OAuthHandler
GetPrompt	client/client.go	/^func (c *Client) GetPrompt($/;"	f	struct:client.Client	typeref:typename:(*mcp.GetPromptResult, error)
GetPrompt	client/interface.go	/^	GetPrompt($/;"	n	interface:client.MCPClient	typeref:typename:(*mcp.GetPromptResult, error)
GetPromptParams	mcp/prompts.go	/^type GetPromptParams struct {$/;"	s	package:mcp
GetPromptRequest	mcp/prompts.go	/^type GetPromptRequest struct {$/;"	s	package:mcp
GetPromptResult	mcp/prompts.go	/^type GetPromptResult struct {$/;"	s	package:mcp
GetRawArguments	mcp/tools.go	/^func (r CallToolRequest) GetRawArguments() any {$/;"	f	struct:mcp.CallToolRequest	typeref:typename:any
GetServerCapabilities	client/client.go	/^func (c *Client) GetServerCapabilities() mcp.ServerCapabilities {$/;"	f	struct:client.Client	typeref:typename:mcp.ServerCapabilities
GetServerMetadata	client/transport/oauth.go	/^func (h *OAuthHandler) GetServerMetadata(ctx context.Context) (*AuthServerMetadata, error) {$/;"	f	struct:transport.OAuthHandler	typeref:typename:(*AuthServerMetadata, error)
GetSessionId	client/client.go	/^func (c *Client) GetSessionId() string {$/;"	f	struct:client.Client	typeref:typename:string
GetSessionId	client/protocol_negotiation_test.go	/^func (m *mockProtocolTransport) GetSessionId() string {$/;"	f	struct:client.mockProtocolTransport	typeref:typename:string
GetSessionId	client/sampling_test.go	/^func (m *mockTransport) GetSessionId() string {$/;"	f	struct:client.mockTransport	typeref:typename:string
GetSessionId	client/transport/inprocess.go	/^func (c *InProcessTransport) GetSessionId() string {$/;"	f	struct:transport.InProcessTransport	typeref:typename:string
GetSessionId	client/transport/interface.go	/^	GetSessionId() string$/;"	n	interface:transport.Interface	typeref:typename:string
GetSessionId	client/transport/sse.go	/^func (c *SSE) GetSessionId() string {$/;"	f	struct:transport.SSE	typeref:typename:string
GetSessionId	client/transport/stdio.go	/^func (c *Stdio) GetSessionId() string {$/;"	f	struct:transport.Stdio	typeref:typename:string
GetSessionId	client/transport/streamable_http.go	/^func (c *StreamableHTTP) GetSessionId() string {$/;"	f	struct:transport.StreamableHTTP	typeref:typename:string
GetSessionTools	server/session.go	/^	GetSessionTools() map[string]ServerTool$/;"	n	interface:server.SessionWithTools	typeref:typename:map[string]ServerTool
GetSessionTools	server/session_test.go	/^func (f *sessionTestClientWithTools) GetSessionTools() map[string]ServerTool {$/;"	f	struct:server.sessionTestClientWithTools	typeref:typename:map[string]ServerTool
GetSessionTools	server/sse.go	/^func (s *sseSession) GetSessionTools() map[string]ServerTool {$/;"	f	struct:server.sseSession	typeref:typename:map[string]ServerTool
GetSessionTools	server/streamable_http.go	/^func (s *streamableHttpSession) GetSessionTools() map[string]ServerTool {$/;"	f	struct:server.streamableHttpSession	typeref:typename:map[string]ServerTool
GetStderr	client/stdio.go	/^func GetStderr(c *Client) (io.Reader, bool) {$/;"	f	package:client	typeref:typename:(io.Reader, bool)
GetString	mcp/tools.go	/^func (r CallToolRequest) GetString(key string, defaultValue string) string {$/;"	f	struct:mcp.CallToolRequest	typeref:typename:string
GetStringSlice	mcp/tools.go	/^func (r CallToolRequest) GetStringSlice(key string, defaultValue []string) []string {$/;"	f	struct:mcp.CallToolRequest	typeref:typename:[]string
GetToken	client/transport/oauth.go	/^	GetToken() (*Token, error)$/;"	n	interface:transport.TokenStore	typeref:typename:(*Token, error)
GetToken	client/transport/oauth.go	/^func (s *MemoryTokenStore) GetToken() (*Token, error) {$/;"	f	struct:transport.MemoryTokenStore	typeref:typename:(*Token, error)
GetTransport	client/client.go	/^func (c *Client) GetTransport() transport.Interface {$/;"	f	struct:client.Client	typeref:typename:transport.Interface
GetUrlPath	server/sse.go	/^func (s *SSEServer) GetUrlPath(input string) (string, error) {$/;"	f	struct:server.SSEServer	typeref:typename:(string, error)
GrantTypesSupported	client/transport/oauth.go	/^	GrantTypesSupported               []string `json:"grant_types_supported,omitempty"`$/;"	m	struct:transport.AuthServerMetadata	typeref:typename:[]string
GreetingArgs	examples/typed_tools/main.go	/^type GreetingArgs struct {$/;"	s	package:main
Group	server/internal/gen/data.go	/^	Group          string$/;"	m	struct:main.MCPRequestType	typeref:typename:string
GroupHookName	server/internal/gen/data.go	/^	GroupHookName  string$/;"	m	struct:main.MCPRequestType	typeref:typename:string
GroupName	server/internal/gen/data.go	/^	GroupName      string$/;"	m	struct:main.MCPRequestType	typeref:typename:string
HTTPConnection	client/transport/interface.go	/^type HTTPConnection interface {$/;"	i	package:transport
HTTPContextFunc	server/http_transport_options.go	/^type HTTPContextFunc func(ctx context.Context, r *http.Request) context.Context$/;"	t	package:server	typeref:typename:func(ctx context.Context, r *http.Request) context.Context
HTTPHeaderFunc	client/transport/interface.go	/^type HTTPHeaderFunc func(context.Context) map[string]string$/;"	t	package:transport	typeref:typename:func(context.Context) map[string]string
HandleMessage	server/request_handler.go	/^func (s *MCPServer) HandleMessage($/;"	f	unknown:server.MCPServer	typeref:typename:mcp.JSONRPCMessage
Handler	client/transport/streamable_http.go	/^	Handler *OAuthHandler$/;"	m	struct:transport.OAuthAuthorizationRequiredError	typeref:typename:*OAuthHandler
Handler	server/server.go	/^	Handler  ResourceHandlerFunc$/;"	m	struct:server.ServerResource	typeref:typename:ResourceHandlerFunc
Handler	server/server.go	/^	Handler  ResourceTemplateHandlerFunc$/;"	m	struct:server.ServerResourceTemplate	typeref:typename:ResourceTemplateHandlerFunc
Handler	server/server.go	/^	Handler PromptHandlerFunc$/;"	m	struct:server.ServerPrompt	typeref:typename:PromptHandlerFunc
Handler	server/server.go	/^	Handler ToolHandlerFunc$/;"	m	struct:server.ServerTool	typeref:typename:ToolHandlerFunc
HandlerFunc	server/internal/gen/data.go	/^	HandlerFunc    string$/;"	m	struct:main.MCPRequestType	typeref:typename:string
Header	mcp/prompts.go	/^	Header http.Header     `json:"-"`$/;"	m	struct:mcp.GetPromptRequest	typeref:typename:http.Header
Header	mcp/prompts.go	/^	Header http.Header `json:"-"`$/;"	m	struct:mcp.ListPromptsRequest	typeref:typename:http.Header
Header	mcp/tools.go	/^	Header http.Header    `json:"-"` \/\/ HTTP headers from the original request$/;"	m	struct:mcp.CallToolRequest	typeref:typename:http.Header
Header	mcp/tools.go	/^	Header http.Header `json:"-"`$/;"	m	struct:mcp.ListToolsRequest	typeref:typename:http.Header
Header	mcp/types.go	/^	Header http.Header        `json:"-"`$/;"	m	struct:mcp.ReadResourceRequest	typeref:typename:http.Header
Header	mcp/types.go	/^	Header http.Header       `json:"-"`$/;"	m	struct:mcp.UnsubscribeRequest	typeref:typename:http.Header
Header	mcp/types.go	/^	Header http.Header      `json:"-"`$/;"	m	struct:mcp.InitializeRequest	typeref:typename:http.Header
Header	mcp/types.go	/^	Header http.Header     `json:"-"`$/;"	m	struct:mcp.SubscribeRequest	typeref:typename:http.Header
Header	mcp/types.go	/^	Header http.Header    `json:"-"`$/;"	m	struct:mcp.CompleteRequest	typeref:typename:http.Header
Header	mcp/types.go	/^	Header http.Header    `json:"-"`$/;"	m	struct:mcp.SetLevelRequest	typeref:typename:http.Header
Header	mcp/types.go	/^	Header http.Header `json:"-"`$/;"	m	struct:mcp.ListResourceTemplatesRequest	typeref:typename:http.Header
Header	mcp/types.go	/^	Header http.Header `json:"-"`$/;"	m	struct:mcp.ListResourcesRequest	typeref:typename:http.Header
Header	mcp/types.go	/^	Header http.Header `json:"-"`$/;"	m	struct:mcp.ListRootsRequest	typeref:typename:http.Header
Header	mcp/types.go	/^	Header http.Header `json:"-"`$/;"	m	struct:mcp.PingRequest	typeref:typename:http.Header
HeaderKeyProtocolVersion	client/transport/constants.go	/^	HeaderKeyProtocolVersion = "Mcp-Protocol-Version"$/;"	c	package:transport
HeaderKeyProtocolVersion	server/constants.go	/^	HeaderKeyProtocolVersion = "Mcp-Protocol-Version"$/;"	c	package:server
HeaderKeySessionID	client/transport/constants.go	/^	HeaderKeySessionID       = "Mcp-Session-Id"$/;"	c	package:transport
HeaderKeySessionID	server/constants.go	/^	HeaderKeySessionID       = "Mcp-Session-Id"$/;"	c	package:server
Headers	examples/custom_context/main.go	/^	Headers map[string]string `json:"headers"`$/;"	m	struct:main.response	typeref:typename:map[string]string
Hints	mcp/types.go	/^	Hints []ModelHint `json:"hints,omitempty"`$/;"	m	struct:mcp.ModelPreferences	typeref:typename:[]ModelHint
HookName	server/internal/gen/data.go	/^	HookName       string$/;"	m	struct:main.MCPRequestType	typeref:typename:string
Hooks	server/hooks.go	/^type Hooks struct {$/;"	s	package:server
How it Works	examples/oauth_client/README.md	/^## How it Works$/;"	s	chapter:OAuth Client Example
ID	client/transport/interface.go	/^	ID      mcp.RequestId   `json:"id"`$/;"	m	struct:transport.JSONRPCResponse	typeref:typename:mcp.RequestId
ID	client/transport/interface.go	/^	ID      mcp.RequestId `json:"id"`$/;"	m	struct:transport.JSONRPCRequest	typeref:typename:mcp.RequestId
ID	mcp/types.go	/^	ID      RequestId `json:"id"`$/;"	m	struct:mcp.JSONRPCError	typeref:typename:RequestId
ID	mcp/types.go	/^	ID      RequestId `json:"id"`$/;"	m	struct:mcp.JSONRPCRequest	typeref:typename:RequestId
ID	mcp/types.go	/^	ID      RequestId `json:"id"`$/;"	m	struct:mcp.JSONRPCResponse	typeref:typename:RequestId
ID	server/streamable_http_test.go	/^	ID     int               `json:"id"`$/;"	m	struct:server.jsonRPCResponse	typeref:typename:int
ID	testdata/mockstdio_server.go	/^	ID      *mcp.RequestId  `json:"id,omitempty"`$/;"	m	struct:main.JSONRPCRequest	typeref:typename:*mcp.RequestId
ID	testdata/mockstdio_server.go	/^	ID      *mcp.RequestId `json:"id,omitempty"`$/;"	m	struct:main.JSONRPCResponse	typeref:typename:*mcp.RequestId
INTERNAL_ERROR	mcp/types.go	/^	INTERNAL_ERROR   = -32603$/;"	c	package:mcp
INVALID_PARAMS	mcp/types.go	/^	INVALID_PARAMS   = -32602$/;"	c	package:mcp
INVALID_REQUEST	mcp/types.go	/^	INVALID_REQUEST  = -32600$/;"	c	package:mcp
IdempotentHint	mcp/tools.go	/^	IdempotentHint *bool `json:"idempotentHint,omitempty"`$/;"	m	struct:mcp.ToolAnnotation	typeref:typename:*bool
ImageContent	mcp/types.go	/^type ImageContent struct {$/;"	s	package:mcp
Implementation	mcp/types.go	/^type Implementation struct {$/;"	s	package:mcp
Implementation Details	examples/sampling_client/README.md	/^## Implementation Details$/;"	s	chapter:MCP Sampling Example Client
Implementation Details	examples/sampling_server/README.md	/^## Implementation Details$/;"	s	chapter:MCP Sampling Example Server
InProcess Sampling Example	examples/inprocess_sampling/README.md	/^# InProcess Sampling Example$/;"	c
InProcessOption	client/transport/inprocess.go	/^type InProcessOption func(*InProcessTransport)$/;"	t	package:transport	typeref:typename:func(*InProcessTransport)
InProcessSamplingHandlerFromContext	server/sampling.go	/^func InProcessSamplingHandlerFromContext(ctx context.Context) SamplingHandler {$/;"	f	package:server	typeref:typename:SamplingHandler
InProcessSession	server/inprocess_session.go	/^type InProcessSession struct {$/;"	s	package:server
InProcessTransport	client/transport/inprocess.go	/^type InProcessTransport struct {$/;"	s	package:transport
IncludeContext	mcp/types.go	/^	IncludeContext   string            `json:"includeContext,omitempty"`$/;"	m	struct:mcp.CreateMessageParams	typeref:typename:string
Increment	client/http_test.go	/^func (sm *SafeMap) Increment(key string) {$/;"	f	struct:client.SafeMap
Infof	client/transport/streamable_http_test.go	/^func (l *testLogger) Infof(format string, args ...any) {$/;"	f	struct:transport.testLogger
Infof	util/logger.go	/^	Infof(format string, v ...any)$/;"	n	interface:util.Logger
Infof	util/logger.go	/^func (l *stdLogger) Infof(format string, v ...any) {$/;"	f	struct:util.stdLogger
Initialize	client/client.go	/^func (c *Client) Initialize($/;"	f	struct:client.Client	typeref:typename:(*mcp.InitializeResult, error)
Initialize	client/interface.go	/^	Initialize($/;"	n	interface:client.MCPClient	typeref:typename:(*mcp.InitializeResult, error)
Initialize	server/inprocess_session.go	/^func (s *InProcessSession) Initialize() {$/;"	f	struct:server.InProcessSession
Initialize	server/sampling_test.go	/^func (m *mockSession) Initialize() {}$/;"	f	struct:server.mockSession
Initialize	server/server_test.go	/^func (f fakeSession) Initialize() {$/;"	f	struct:server.fakeSession
Initialize	server/session.go	/^	Initialize()$/;"	n	interface:server.ClientSession
Initialize	server/session_test.go	/^func (f *sessionTestClient) Initialize() {$/;"	f	struct:server.sessionTestClient
Initialize	server/session_test.go	/^func (f *sessionTestClientWithClientInfo) Initialize() {$/;"	f	struct:server.sessionTestClientWithClientInfo
Initialize	server/session_test.go	/^func (f *sessionTestClientWithLogging) Initialize() {$/;"	f	struct:server.sessionTestClientWithLogging
Initialize	server/session_test.go	/^func (f *sessionTestClientWithTools) Initialize() {$/;"	f	struct:server.sessionTestClientWithTools
Initialize	server/sse.go	/^func (s *sseSession) Initialize() {$/;"	f	struct:server.sseSession
Initialize	server/stdio.go	/^func (s *stdioSession) Initialize() {$/;"	f	struct:server.stdioSession
Initialize	server/streamable_http.go	/^func (s *streamableHttpSession) Initialize() {$/;"	f	struct:server.streamableHttpSession
InitializeParams	mcp/types.go	/^type InitializeParams struct {$/;"	s	package:mcp
InitializeRequest	mcp/types.go	/^type InitializeRequest struct {$/;"	s	package:mcp
InitializeResult	mcp/types.go	/^type InitializeResult struct {$/;"	s	package:mcp
Initialized	server/inprocess_session.go	/^func (s *InProcessSession) Initialized() bool {$/;"	f	struct:server.InProcessSession	typeref:typename:bool
Initialized	server/sampling_test.go	/^func (m *mockSession) Initialized() bool {$/;"	f	struct:server.mockSession	typeref:typename:bool
Initialized	server/server_test.go	/^func (f fakeSession) Initialized() bool {$/;"	f	struct:server.fakeSession	typeref:typename:bool
Initialized	server/session.go	/^	Initialized() bool$/;"	n	interface:server.ClientSession	typeref:typename:bool
Initialized	server/session_test.go	/^func (f *sessionTestClientWithClientInfo) Initialized() bool {$/;"	f	struct:server.sessionTestClientWithClientInfo	typeref:typename:bool
Initialized	server/session_test.go	/^func (f *sessionTestClientWithLogging) Initialized() bool {$/;"	f	struct:server.sessionTestClientWithLogging	typeref:typename:bool
Initialized	server/session_test.go	/^func (f *sessionTestClientWithTools) Initialized() bool {$/;"	f	struct:server.sessionTestClientWithTools	typeref:typename:bool
Initialized	server/session_test.go	/^func (f sessionTestClient) Initialized() bool {$/;"	f	struct:server.sessionTestClient	typeref:typename:bool
Initialized	server/sse.go	/^func (s *sseSession) Initialized() bool {$/;"	f	struct:server.sseSession	typeref:typename:bool
Initialized	server/stdio.go	/^func (s *stdioSession) Initialized() bool {$/;"	f	struct:server.stdioSession	typeref:typename:bool
Initialized	server/streamable_http.go	/^func (s *streamableHttpSession) Initialized() bool {$/;"	f	struct:server.streamableHttpSession	typeref:typename:bool
InitializedNotification	mcp/types.go	/^type InitializedNotification struct {$/;"	s	package:mcp
InputSchema	mcp/tools.go	/^	InputSchema ToolInputSchema `json:"inputSchema"`$/;"	m	struct:mcp.Tool	typeref:typename:ToolInputSchema
InsecureStatefulSessionIdManager	server/streamable_http.go	/^type InsecureStatefulSessionIdManager struct{}$/;"	s	package:server
Installation	README.md	/^## Installation$/;"	s
Instructions	mcp/types.go	/^	Instructions string `json:"instructions,omitempty"`$/;"	m	struct:mcp.InitializeResult	typeref:typename:string
IntelligencePriority	mcp/types.go	/^	IntelligencePriority float64 `json:"intelligencePriority,omitempty"`$/;"	m	struct:mcp.ModelPreferences	typeref:typename:float64
Interface	client/transport/interface.go	/^type Interface interface {$/;"	i	package:transport
Is	mcp/errors.go	/^func (e UnsupportedProtocolVersionError) Is(target error) bool {$/;"	f	struct:mcp.UnsupportedProtocolVersionError	typeref:typename:bool
IsError	mcp/tools.go	/^	IsError bool `json:"isError,omitempty"`$/;"	m	struct:mcp.CallToolResult	typeref:typename:bool
IsExpired	client/transport/oauth.go	/^func (t *Token) IsExpired() bool {$/;"	f	struct:transport.Token	typeref:typename:bool
IsInitialized	client/client.go	/^func (c *Client) IsInitialized() bool {$/;"	f	struct:client.Client	typeref:typename:bool
IsNil	mcp/types.go	/^func (r RequestId) IsNil() bool {$/;"	f	struct:mcp.RequestId	typeref:typename:bool
IsOAuthAuthorizationRequiredError	client/oauth.go	/^func IsOAuthAuthorizationRequiredError(err error) bool {$/;"	f	package:client	typeref:typename:bool
IsOAuthEnabled	client/transport/sse.go	/^func (c *SSE) IsOAuthEnabled() bool {$/;"	f	struct:transport.SSE	typeref:typename:bool
IsOAuthEnabled	client/transport/streamable_http.go	/^func (c *StreamableHTTP) IsOAuthEnabled() bool {$/;"	f	struct:transport.StreamableHTTP	typeref:typename:bool
IsUnsupportedProtocolVersion	mcp/errors.go	/^func IsUnsupportedProtocolVersion(err error) bool {$/;"	f	package:mcp	typeref:typename:bool
IsVIP	examples/typed_tools/main.go	/^	IsVIP     bool     `json:"is_vip"`$/;"	m	struct:main.GreetingArgs	typeref:typename:bool
Issuer	client/transport/oauth.go	/^	Issuer                            string   `json:"issuer"`$/;"	m	struct:transport.AuthServerMetadata	typeref:typename:string
Items	mcp/tools.go	/^func Items(schema any) PropertyOption {$/;"	f	package:mcp	typeref:typename:PropertyOption
JSONRPC	client/transport/interface.go	/^	JSONRPC string          `json:"jsonrpc"`$/;"	m	struct:transport.JSONRPCResponse	typeref:typename:string
JSONRPC	client/transport/interface.go	/^	JSONRPC string        `json:"jsonrpc"`$/;"	m	struct:transport.JSONRPCRequest	typeref:typename:string
JSONRPC	mcp/types.go	/^	JSONRPC string    `json:"jsonrpc"`$/;"	m	struct:mcp.JSONRPCError	typeref:typename:string
JSONRPC	mcp/types.go	/^	JSONRPC string    `json:"jsonrpc"`$/;"	m	struct:mcp.JSONRPCRequest	typeref:typename:string
JSONRPC	mcp/types.go	/^	JSONRPC string    `json:"jsonrpc"`$/;"	m	struct:mcp.JSONRPCResponse	typeref:typename:string
JSONRPC	mcp/types.go	/^	JSONRPC string `json:"jsonrpc"`$/;"	m	struct:mcp.JSONRPCNotification	typeref:typename:string
JSONRPC	testdata/mockstdio_server.go	/^	JSONRPC string          `json:"jsonrpc"`$/;"	m	struct:main.JSONRPCRequest	typeref:typename:string
JSONRPC	testdata/mockstdio_server.go	/^	JSONRPC string         `json:"jsonrpc"`$/;"	m	struct:main.JSONRPCResponse	typeref:typename:string
JSONRPCError	mcp/types.go	/^type JSONRPCError struct {$/;"	s	package:mcp
JSONRPCMessage	mcp/types.go	/^type JSONRPCMessage any$/;"	t	package:mcp	typeref:typename:any
JSONRPCNotification	mcp/types.go	/^type JSONRPCNotification struct {$/;"	s	package:mcp
JSONRPCRequest	client/transport/interface.go	/^type JSONRPCRequest struct {$/;"	s	package:transport
JSONRPCRequest	mcp/types.go	/^type JSONRPCRequest struct {$/;"	s	package:mcp
JSONRPCRequest	testdata/mockstdio_server.go	/^type JSONRPCRequest struct {$/;"	s	package:main
JSONRPCResponse	client/transport/interface.go	/^type JSONRPCResponse struct {$/;"	s	package:transport
JSONRPCResponse	mcp/types.go	/^type JSONRPCResponse struct {$/;"	s	package:mcp
JSONRPCResponse	testdata/mockstdio_server.go	/^type JSONRPCResponse struct {$/;"	s	package:main
JSONRPC_VERSION	mcp/types.go	/^const JSONRPC_VERSION = "2.0"$/;"	c	package:mcp
JwksURI	client/transport/oauth.go	/^	JwksURI                           string   `json:"jwks_uri,omitempty"`$/;"	m	struct:transport.AuthServerMetadata	typeref:typename:string
Key Components	examples/inprocess_sampling/README.md	/^## Key Components$/;"	s	chapter:InProcess Sampling Example
Key features:	README.md	/^### Key features:$/;"	S
LATEST_PROTOCOL_VERSION	mcp/types.go	/^const LATEST_PROTOCOL_VERSION = "2025-06-18"$/;"	c	package:mcp
LONG_RUNNING_OPERATION	examples/everything/main.go	/^	LONG_RUNNING_OPERATION ToolName = "longRunningOperation"$/;"	c	package:main	typeref:type:ToolName
Languages	examples/typed_tools/main.go	/^	Languages []string `json:"languages"`$/;"	m	struct:main.GreetingArgs	typeref:typename:[]string
Len	client/http_test.go	/^func (sm *SafeMap) Len() int {$/;"	f	struct:client.SafeMap	typeref:typename:int
Level	mcp/types.go	/^	Level LoggingLevel `json:"level"`$/;"	m	struct:mcp.LoggingMessageNotificationParams	typeref:typename:LoggingLevel
Level	mcp/types.go	/^	Level LoggingLevel `json:"level"`$/;"	m	struct:mcp.SetLevelParams	typeref:typename:LoggingLevel
ListPrompts	client/client.go	/^func (c *Client) ListPrompts($/;"	f	struct:client.Client	typeref:typename:(*mcp.ListPromptsResult, error)
ListPrompts	client/interface.go	/^	ListPrompts($/;"	n	interface:client.MCPClient	typeref:typename:(*mcp.ListPromptsResult, error)
ListPromptsByPage	client/client.go	/^func (c *Client) ListPromptsByPage($/;"	f	struct:client.Client	typeref:typename:(*mcp.ListPromptsResult, error)
ListPromptsByPage	client/interface.go	/^	ListPromptsByPage($/;"	n	interface:client.MCPClient	typeref:typename:(*mcp.ListPromptsResult, error)
ListPromptsRequest	mcp/prompts.go	/^type ListPromptsRequest struct {$/;"	s	package:mcp
ListPromptsResult	mcp/prompts.go	/^type ListPromptsResult struct {$/;"	s	package:mcp
ListResourceTemplates	client/client.go	/^func (c *Client) ListResourceTemplates($/;"	f	struct:client.Client	typeref:typename:(*mcp.ListResourceTemplatesResult, error)
ListResourceTemplates	client/interface.go	/^	ListResourceTemplates($/;"	n	interface:client.MCPClient	typeref:typename:(*mcp.ListResourceTemplatesResult, error)
ListResourceTemplatesByPage	client/client.go	/^func (c *Client) ListResourceTemplatesByPage($/;"	f	struct:client.Client	typeref:typename:(*mcp.ListResourceTemplatesResult, error)
ListResourceTemplatesByPage	client/interface.go	/^	ListResourceTemplatesByPage($/;"	n	interface:client.MCPClient	typeref:typename:(*mcp.ListResourceTemplatesResult, error)
ListResourceTemplatesRequest	mcp/types.go	/^type ListResourceTemplatesRequest struct {$/;"	s	package:mcp
ListResourceTemplatesResult	mcp/types.go	/^type ListResourceTemplatesResult struct {$/;"	s	package:mcp
ListResources	client/client.go	/^func (c *Client) ListResources($/;"	f	struct:client.Client	typeref:typename:(*mcp.ListResourcesResult, error)
ListResources	client/interface.go	/^	ListResources($/;"	n	interface:client.MCPClient	typeref:typename:(*mcp.ListResourcesResult, error)
ListResourcesByPage	client/client.go	/^func (c *Client) ListResourcesByPage($/;"	f	struct:client.Client	typeref:typename:(*mcp.ListResourcesResult, error)
ListResourcesByPage	client/interface.go	/^	ListResourcesByPage($/;"	n	interface:client.MCPClient	typeref:typename:(*mcp.ListResourcesResult, error)
ListResourcesRequest	mcp/types.go	/^type ListResourcesRequest struct {$/;"	s	package:mcp
ListResourcesResult	mcp/types.go	/^type ListResourcesResult struct {$/;"	s	package:mcp
ListRootsRequest	mcp/types.go	/^type ListRootsRequest struct {$/;"	s	package:mcp
ListRootsResult	mcp/types.go	/^type ListRootsResult struct {$/;"	s	package:mcp
ListTools	client/client.go	/^func (c *Client) ListTools($/;"	f	struct:client.Client	typeref:typename:(*mcp.ListToolsResult, error)
ListTools	client/interface.go	/^	ListTools($/;"	n	interface:client.MCPClient	typeref:typename:(*mcp.ListToolsResult, error)
ListToolsByPage	client/client.go	/^func (c *Client) ListToolsByPage($/;"	f	struct:client.Client	typeref:typename:(*mcp.ListToolsResult, error)
ListToolsByPage	client/interface.go	/^	ListToolsByPage($/;"	n	interface:client.MCPClient	typeref:typename:(*mcp.ListToolsResult, error)
ListToolsRequest	mcp/tools.go	/^type ListToolsRequest struct {$/;"	s	package:mcp
ListToolsResult	mcp/tools.go	/^type ListToolsResult struct {$/;"	s	package:mcp
Listen	server/stdio.go	/^func (s *StdioServer) Listen($/;"	f	struct:server.StdioServer	typeref:typename:error
Location	.github/ISSUE_TEMPLATE/documentation-improvement.md	/^## Location$/;"	s
Logger	mcp/types.go	/^	Logger string `json:"logger,omitempty"`$/;"	m	struct:mcp.LoggingMessageNotificationParams	typeref:typename:string
Logger	util/logger.go	/^type Logger interface {$/;"	i	package:util
Logging	mcp/types.go	/^	Logging *struct{} `json:"logging,omitempty"`$/;"	m	struct:mcp.ServerCapabilities	typeref:typename:*struct{}
LoggingLevel	mcp/types.go	/^type LoggingLevel string$/;"	t	package:mcp	typeref:typename:string
LoggingLevelAlert	mcp/types.go	/^	LoggingLevelAlert     LoggingLevel = "alert"$/;"	c	package:mcp	typeref:type:LoggingLevel
LoggingLevelCritical	mcp/types.go	/^	LoggingLevelCritical  LoggingLevel = "critical"$/;"	c	package:mcp	typeref:type:LoggingLevel
LoggingLevelDebug	mcp/types.go	/^	LoggingLevelDebug     LoggingLevel = "debug"$/;"	c	package:mcp	typeref:type:LoggingLevel
LoggingLevelEmergency	mcp/types.go	/^	LoggingLevelEmergency LoggingLevel = "emergency"$/;"	c	package:mcp	typeref:type:LoggingLevel
LoggingLevelError	mcp/types.go	/^	LoggingLevelError     LoggingLevel = "error"$/;"	c	package:mcp	typeref:type:LoggingLevel
LoggingLevelInfo	mcp/types.go	/^	LoggingLevelInfo      LoggingLevel = "info"$/;"	c	package:mcp	typeref:type:LoggingLevel
LoggingLevelNotice	mcp/types.go	/^	LoggingLevelNotice    LoggingLevel = "notice"$/;"	c	package:mcp	typeref:type:LoggingLevel
LoggingLevelWarning	mcp/types.go	/^	LoggingLevelWarning   LoggingLevel = "warning"$/;"	c	package:mcp	typeref:type:LoggingLevel
LoggingMessageNotification	mcp/types.go	/^type LoggingMessageNotification struct {$/;"	s	package:mcp
LoggingMessageNotificationParams	mcp/types.go	/^type LoggingMessageNotificationParams struct {$/;"	s	package:mcp
Logs or Error Messages	.github/ISSUE_TEMPLATE/bug_report.md	/^## Logs or Error Messages$/;"	s
MCP Sampling Example Client	examples/sampling_client/README.md	/^# MCP Sampling Example Client$/;"	c
MCP Sampling Example Server	examples/sampling_server/README.md	/^# MCP Sampling Example Server$/;"	c
MCP Spec Compliance	.github/pull_request_template.md	/^## MCP Spec Compliance$/;"	s
MCP Spec Reference	.github/ISSUE_TEMPLATE/feature-request.md	/^## MCP Spec Reference$/;"	s
MCPClient	client/interface.go	/^type MCPClient interface {$/;"	i	package:client
MCPClient	examples/in_process/main.go	/^type MCPClient struct {$/;"	s	package:main
MCPMethod	mcp/types.go	/^type MCPMethod string$/;"	t	package:mcp	typeref:typename:string
MCPRequestType	server/internal/gen/data.go	/^type MCPRequestType struct {$/;"	s	package:main
MCPRequestTypes	server/internal/gen/data.go	/^var MCPRequestTypes = []MCPRequestType{$/;"	v	package:main
MCPServer	examples/custom_context/main.go	/^type MCPServer struct {$/;"	s	package:main
MCPServer	server/server.go	/^type MCPServer struct {$/;"	s	package:server
MCP_TINY_IMAGE	examples/everything/main.go	/^const MCP_TINY_IMAGE = "iVBORw0KGgoAAAANSUhEUgAAARgAAAEYCAIAAAAI7H7bAAAZyUlEQVR4nOzce1RVZd4H8MM5/;"	c	package:main
METHOD_NOT_FOUND	mcp/types.go	/^	METHOD_NOT_FOUND = -32601$/;"	c	package:mcp
MIMEType	mcp/types.go	/^	MIMEType string `json:"mimeType"`$/;"	m	struct:mcp.AudioContent	typeref:typename:string
MIMEType	mcp/types.go	/^	MIMEType string `json:"mimeType"`$/;"	m	struct:mcp.ImageContent	typeref:typename:string
MIMEType	mcp/types.go	/^	MIMEType string `json:"mimeType"`$/;"	m	struct:mcp.ResourceLink	typeref:typename:string
MIMEType	mcp/types.go	/^	MIMEType string `json:"mimeType,omitempty"`$/;"	m	struct:mcp.BlobResourceContents	typeref:typename:string
MIMEType	mcp/types.go	/^	MIMEType string `json:"mimeType,omitempty"`$/;"	m	struct:mcp.Resource	typeref:typename:string
MIMEType	mcp/types.go	/^	MIMEType string `json:"mimeType,omitempty"`$/;"	m	struct:mcp.ResourceTemplate	typeref:typename:string
MIMEType	mcp/types.go	/^	MIMEType string `json:"mimeType,omitempty"`$/;"	m	struct:mcp.TextResourceContents	typeref:typename:string
MarshalContent	mcp/types.go	/^func MarshalContent(content Content) ([]byte, error) {$/;"	f	package:mcp	typeref:typename:([]byte, error)
MarshalJSON	mcp/tools.go	/^func (r CallToolResult) MarshalJSON() ([]byte, error) {$/;"	f	struct:mcp.CallToolResult	typeref:typename:([]byte, error)
MarshalJSON	mcp/tools.go	/^func (t Tool) MarshalJSON() ([]byte, error) {$/;"	f	struct:mcp.Tool	typeref:typename:([]byte, error)
MarshalJSON	mcp/tools.go	/^func (tis ToolInputSchema) MarshalJSON() ([]byte, error) {$/;"	f	struct:mcp.ToolInputSchema	typeref:typename:([]byte, error)
MarshalJSON	mcp/types.go	/^func (m *Meta) MarshalJSON() ([]byte, error) {$/;"	f	struct:mcp.Meta	typeref:typename:([]byte, error)
MarshalJSON	mcp/types.go	/^func (p NotificationParams) MarshalJSON() ([]byte, error) {$/;"	f	struct:mcp.NotificationParams	typeref:typename:([]byte, error)
MarshalJSON	mcp/types.go	/^func (r RequestId) MarshalJSON() ([]byte, error) {$/;"	f	struct:mcp.RequestId	typeref:typename:([]byte, error)
MarshalJSON	mcp/types.go	/^func (t *URITemplate) MarshalJSON() ([]byte, error) {$/;"	f	struct:mcp.URITemplate	typeref:typename:([]byte, error)
Max	mcp/tools.go	/^func Max(max float64) PropertyOption {$/;"	f	package:mcp	typeref:typename:PropertyOption
MaxItems	mcp/tools.go	/^func MaxItems(max int) PropertyOption {$/;"	f	package:mcp	typeref:typename:PropertyOption
MaxLength	mcp/tools.go	/^func MaxLength(max int) PropertyOption {$/;"	f	package:mcp	typeref:typename:PropertyOption
MaxProperties	mcp/tools.go	/^func MaxProperties(max int) PropertyOption {$/;"	f	package:mcp	typeref:typename:PropertyOption
MaxTokens	mcp/types.go	/^	MaxTokens        int               `json:"maxTokens"`$/;"	m	struct:mcp.CreateMessageParams	typeref:typename:int
MemoryTokenStore	client/oauth.go	/^type MemoryTokenStore = transport.MemoryTokenStore$/;"	a	package:client	typeref:typename:transport.MemoryTokenStore
MemoryTokenStore	client/transport/oauth.go	/^type MemoryTokenStore struct {$/;"	s	package:transport
Message	mcp/types.go	/^	Message string `json:"message,omitempty"`$/;"	m	struct:mcp.ProgressNotificationParams	typeref:typename:string
MessageHandler	server/sse.go	/^func (s *SSEServer) MessageHandler() http.Handler {$/;"	f	struct:server.SSEServer	typeref:typename:http.Handler
Messages	mcp/prompts.go	/^	Messages    []PromptMessage `json:"messages"`$/;"	m	struct:mcp.GetPromptResult	typeref:typename:[]PromptMessage
Messages	mcp/types.go	/^	Messages         []SamplingMessage `json:"messages"`$/;"	m	struct:mcp.CreateMessageParams	typeref:typename:[]SamplingMessage
Meta	mcp/tools.go	/^	Meta      *Meta  `json:"_meta,omitempty"`$/;"	m	struct:mcp.CallToolParams	typeref:typename:*Meta
Meta	mcp/types.go	/^	Meta *Meta `json:"_meta,omitempty"`$/;"	m	struct:mcp.RequestParams	typeref:typename:*Meta
Meta	mcp/types.go	/^	Meta map[string]any `json:"_meta,omitempty"`$/;"	m	struct:mcp.NotificationParams	typeref:typename:map[string]any
Meta	mcp/types.go	/^	Meta map[string]any `json:"_meta,omitempty"`$/;"	m	struct:mcp.Result	typeref:typename:map[string]any
Meta	mcp/types.go	/^type Meta struct {$/;"	s	package:mcp
Metadata	examples/typed_tools/main.go	/^	Metadata  struct {$/;"	m	struct:main.GreetingArgs	typeref:typename:struct { Location string `json:"location"`; Timezone string `json:"timezone"`; }
Metadata	mcp/types.go	/^	Metadata         any               `json:"metadata,omitempty"`$/;"	m	struct:mcp.CreateMessageParams	typeref:typename:any
Method	client/transport/interface.go	/^	Method  string        `json:"method"`$/;"	m	struct:transport.JSONRPCRequest	typeref:typename:string
Method	mcp/types.go	/^	Method string             `json:"method"`$/;"	m	struct:mcp.Notification	typeref:typename:string
Method	mcp/types.go	/^	Method string        `json:"method"`$/;"	m	struct:mcp.Request	typeref:typename:string
Method	server/errors.go	/^	Method string$/;"	m	struct:server.ErrDynamicPathConfig	typeref:typename:string
Method	testdata/mockstdio_server.go	/^	Method  string          `json:"method"`$/;"	m	struct:main.JSONRPCRequest	typeref:typename:string
MethodInitialize	mcp/types.go	/^	MethodInitialize MCPMethod = "initialize"$/;"	c	package:mcp	typeref:type:MCPMethod
MethodName	server/internal/gen/data.go	/^	MethodName     string$/;"	m	struct:main.MCPRequestType	typeref:typename:string
MethodNotificationPromptsListChanged	mcp/types.go	/^	MethodNotificationPromptsListChanged = "notifications\/prompts\/list_changed"$/;"	c	package:mcp
MethodNotificationResourceUpdated	mcp/types.go	/^	MethodNotificationResourceUpdated = "notifications\/resources\/updated"$/;"	c	package:mcp
MethodNotificationResourcesListChanged	mcp/types.go	/^	MethodNotificationResourcesListChanged = "notifications\/resources\/list_changed"$/;"	c	package:mcp
MethodNotificationToolsListChanged	mcp/types.go	/^	MethodNotificationToolsListChanged = "notifications\/tools\/list_changed"$/;"	c	package:mcp
MethodPing	mcp/types.go	/^	MethodPing MCPMethod = "ping"$/;"	c	package:mcp	typeref:type:MCPMethod
MethodPromptsGet	mcp/types.go	/^	MethodPromptsGet MCPMethod = "prompts\/get"$/;"	c	package:mcp	typeref:type:MCPMethod
MethodPromptsList	mcp/types.go	/^	MethodPromptsList MCPMethod = "prompts\/list"$/;"	c	package:mcp	typeref:type:MCPMethod
MethodResourcesList	mcp/types.go	/^	MethodResourcesList MCPMethod = "resources\/list"$/;"	c	package:mcp	typeref:type:MCPMethod
MethodResourcesRead	mcp/types.go	/^	MethodResourcesRead MCPMethod = "resources\/read"$/;"	c	package:mcp	typeref:type:MCPMethod
MethodResourcesTemplatesList	mcp/types.go	/^	MethodResourcesTemplatesList MCPMethod = "resources\/templates\/list"$/;"	c	package:mcp	typeref:type:MCPMethod
MethodSamplingCreateMessage	mcp/types.go	/^	MethodSamplingCreateMessage MCPMethod = "sampling\/createMessage"$/;"	c	package:mcp	typeref:type:MCPMethod
MethodSetLogLevel	mcp/types.go	/^	MethodSetLogLevel MCPMethod = "logging\/setLevel"$/;"	c	package:mcp	typeref:type:MCPMethod
MethodToolsCall	mcp/types.go	/^	MethodToolsCall MCPMethod = "tools\/call"$/;"	c	package:mcp	typeref:type:MCPMethod
MethodToolsList	mcp/types.go	/^	MethodToolsList MCPMethod = "tools\/list"$/;"	c	package:mcp	typeref:type:MCPMethod
Min	mcp/tools.go	/^func Min(min float64) PropertyOption {$/;"	f	package:mcp	typeref:typename:PropertyOption
MinItems	mcp/tools.go	/^func MinItems(min int) PropertyOption {$/;"	f	package:mcp	typeref:typename:PropertyOption
MinLength	mcp/tools.go	/^func MinLength(min int) PropertyOption {$/;"	f	package:mcp	typeref:typename:PropertyOption
MinProperties	mcp/tools.go	/^func MinProperties(min int) PropertyOption {$/;"	f	package:mcp	typeref:typename:PropertyOption
Mock LLM Handler	examples/sampling_client/README.md	/^## Mock LLM Handler$/;"	s	chapter:MCP Sampling Example Client
MockSamplingHandler	client/inprocess_sampling_test.go	/^type MockSamplingHandler struct{}$/;"	s	package:client
MockSamplingHandler	examples/inprocess_sampling/main.go	/^type MockSamplingHandler struct{}$/;"	s	package:main
MockSamplingHandler	examples/sampling_client/main.go	/^type MockSamplingHandler struct{}$/;"	s	package:main
Model	mcp/types.go	/^	Model string `json:"model"`$/;"	m	struct:mcp.CreateMessageResult	typeref:typename:string
ModelHint	mcp/types.go	/^type ModelHint struct {$/;"	s	package:mcp
ModelPreferences	mcp/types.go	/^	ModelPreferences *ModelPreferences `json:"modelPreferences,omitempty"`$/;"	m	struct:mcp.CreateMessageParams	typeref:typename:*ModelPreferences
ModelPreferences	mcp/types.go	/^type ModelPreferences struct {$/;"	s	package:mcp
MultipleOf	mcp/tools.go	/^func MultipleOf(value float64) PropertyOption {$/;"	f	package:mcp	typeref:typename:PropertyOption
Name	examples/typed_tools/main.go	/^	Name      string   `json:"name"`$/;"	m	struct:main.GreetingArgs	typeref:typename:string
Name	mcp/prompts.go	/^	Name string `json:"name"`$/;"	m	struct:mcp.GetPromptParams	typeref:typename:string
Name	mcp/prompts.go	/^	Name string `json:"name"`$/;"	m	struct:mcp.Prompt	typeref:typename:string
Name	mcp/prompts.go	/^	Name string `json:"name"`$/;"	m	struct:mcp.PromptArgument	typeref:typename:string
Name	mcp/tools.go	/^	Name      string `json:"name"`$/;"	m	struct:mcp.CallToolParams	typeref:typename:string
Name	mcp/tools.go	/^	Name string `json:"name"`$/;"	m	struct:mcp.Tool	typeref:typename:string
Name	mcp/types.go	/^	Name    string `json:"name"`$/;"	m	struct:mcp.Implementation	typeref:typename:string
Name	mcp/types.go	/^	Name string `json:"name"`$/;"	m	struct:mcp.PromptReference	typeref:typename:string
Name	mcp/types.go	/^	Name string `json:"name"`$/;"	m	struct:mcp.Resource	typeref:typename:string
Name	mcp/types.go	/^	Name string `json:"name"`$/;"	m	struct:mcp.ResourceLink	typeref:typename:string
Name	mcp/types.go	/^	Name string `json:"name"`$/;"	m	struct:mcp.ResourceTemplate	typeref:typename:string
Name	mcp/types.go	/^	Name string `json:"name,omitempty"`$/;"	m	struct:mcp.ModelHint	typeref:typename:string
Name	mcp/types.go	/^	Name string `json:"name,omitempty"`$/;"	m	struct:mcp.Root	typeref:typename:string
Named	mcp/types.go	/^type Named interface {$/;"	i	package:mcp
NewAudioContent	mcp/utils.go	/^func NewAudioContent(data, mimeType string) AudioContent {$/;"	f	package:mcp	typeref:typename:AudioContent
NewClient	client/client.go	/^func NewClient(transport transport.Interface, options ...ClientOption) *Client {$/;"	f	package:client	typeref:typename:*Client
NewEmbeddedResource	mcp/utils.go	/^func NewEmbeddedResource(resource ResourceContents) EmbeddedResource {$/;"	f	package:mcp	typeref:typename:EmbeddedResource
NewError	client/transport/error.go	/^func NewError(err error) *Error {$/;"	f	package:transport	typeref:typename:*Error
NewGetPromptResult	mcp/utils.go	/^func NewGetPromptResult($/;"	f	package:mcp	typeref:typename:*GetPromptResult
NewIO	client/transport/stdio.go	/^func NewIO(input io.Reader, output io.WriteCloser, logging io.ReadCloser) *Stdio {$/;"	f	package:transport	typeref:typename:*Stdio
NewImageContent	mcp/utils.go	/^func NewImageContent(data, mimeType string) ImageContent {$/;"	f	package:mcp	typeref:typename:ImageContent
NewInProcessClient	client/inprocess.go	/^func NewInProcessClient(server *server.MCPServer) (*Client, error) {$/;"	f	package:client	typeref:typename:(*Client, error)
NewInProcessClientWithSamplingHandler	client/inprocess.go	/^func NewInProcessClientWithSamplingHandler(server *server.MCPServer, handler SamplingHandler) (*/;"	f	package:client	typeref:typename:(*Client, error)
NewInProcessSession	server/inprocess_session.go	/^func NewInProcessSession(sessionID string, samplingHandler SamplingHandler) *InProcessSession {$/;"	f	package:server	typeref:typename:*InProcessSession
NewInProcessTransport	client/transport/inprocess.go	/^func NewInProcessTransport(server *server.MCPServer) *InProcessTransport {$/;"	f	package:transport	typeref:typename:*InProcessTransport
NewInProcessTransportWithOptions	client/transport/inprocess.go	/^func NewInProcessTransportWithOptions(server *server.MCPServer, opts ...InProcessOption) *InProc/;"	f	package:transport	typeref:typename:*InProcessTransport
NewInitializeResult	mcp/utils.go	/^func NewInitializeResult($/;"	f	package:mcp	typeref:typename:*InitializeResult
NewJSONRPCError	mcp/utils.go	/^func NewJSONRPCError($/;"	f	package:mcp	typeref:typename:JSONRPCError
NewJSONRPCResponse	mcp/utils.go	/^func NewJSONRPCResponse(id RequestId, result Result) JSONRPCResponse {$/;"	f	package:mcp	typeref:typename:JSONRPCResponse
NewListPromptsResult	mcp/utils.go	/^func NewListPromptsResult($/;"	f	package:mcp	typeref:typename:*ListPromptsResult
NewListResourceTemplatesResult	mcp/utils.go	/^func NewListResourceTemplatesResult($/;"	f	package:mcp	typeref:typename:*ListResourceTemplatesResult
NewListResourcesResult	mcp/utils.go	/^func NewListResourcesResult($/;"	f	package:mcp	typeref:typename:*ListResourcesResult
NewListToolsResult	mcp/utils.go	/^func NewListToolsResult(tools []Tool, nextCursor Cursor) *ListToolsResult {$/;"	f	package:mcp	typeref:typename:*ListToolsResult
NewLoggingMessageNotification	mcp/utils.go	/^func NewLoggingMessageNotification($/;"	f	package:mcp	typeref:typename:LoggingMessageNotification
NewMCPClient	examples/in_process/main.go	/^func NewMCPClient(ctx context.Context) (*MCPClient, error) {$/;"	f	package:main	typeref:typename:(*MCPClient, error)
NewMCPServer	examples/custom_context/main.go	/^func NewMCPServer() *MCPServer {$/;"	f	package:main	typeref:typename:*MCPServer
NewMCPServer	examples/everything/main.go	/^func NewMCPServer() *server.MCPServer {$/;"	f	package:main	typeref:typename:*server.MCPServer
NewMCPServer	examples/in_process/main.go	/^func NewMCPServer() *server.MCPServer {$/;"	f	package:main	typeref:typename:*server.MCPServer
NewMCPServer	server/server.go	/^func NewMCPServer($/;"	f	package:server	typeref:typename:*MCPServer
NewMemoryTokenStore	client/oauth.go	/^var NewMemoryTokenStore = transport.NewMemoryTokenStore$/;"	v	package:client
NewMemoryTokenStore	client/transport/oauth.go	/^func NewMemoryTokenStore() *MemoryTokenStore {$/;"	f	package:transport	typeref:typename:*MemoryTokenStore
NewOAuthHandler	client/transport/oauth.go	/^func NewOAuthHandler(config OAuthConfig) *OAuthHandler {$/;"	f	package:transport	typeref:typename:*OAuthHandler
NewOAuthSSEClient	client/oauth.go	/^func NewOAuthSSEClient(baseURL string, oauthConfig OAuthConfig, options ...transport.ClientOptio/;"	f	package:client	typeref:typename:(*Client, error)
NewOAuthStreamableHttpClient	client/oauth.go	/^func NewOAuthStreamableHttpClient(baseURL string, oauthConfig OAuthConfig, options ...transport./;"	f	package:client	typeref:typename:(*Client, error)
NewProgressNotification	mcp/utils.go	/^func NewProgressNotification($/;"	f	package:mcp	typeref:typename:ProgressNotification
NewPrompt	mcp/prompts.go	/^func NewPrompt(name string, opts ...PromptOption) Prompt {$/;"	f	package:mcp	typeref:typename:Prompt
NewPromptMessage	mcp/utils.go	/^func NewPromptMessage(role Role, content Content) PromptMessage {$/;"	f	package:mcp	typeref:typename:PromptMessage
NewReadResourceResult	mcp/utils.go	/^func NewReadResourceResult(text string) *ReadResourceResult {$/;"	f	package:mcp	typeref:typename:*ReadResourceResult
NewRequestId	mcp/types.go	/^func NewRequestId(value any) RequestId {$/;"	f	package:mcp	typeref:typename:RequestId
NewResource	mcp/resources.go	/^func NewResource(uri string, name string, opts ...ResourceOption) Resource {$/;"	f	package:mcp	typeref:typename:Resource
NewResourceLink	mcp/utils.go	/^func NewResourceLink(uri, name, description, mimeType string) ResourceLink {$/;"	f	package:mcp	typeref:typename:ResourceLink
NewResourceTemplate	mcp/resources.go	/^func NewResourceTemplate(uriTemplate string, name string, opts ...ResourceTemplateOption) Resour/;"	f	package:mcp	typeref:typename:ResourceTemplate
NewSSE	client/transport/sse.go	/^func NewSSE(baseURL string, options ...ClientOption) (*SSE, error) {$/;"	f	package:transport	typeref:typename:(*SSE, error)
NewSSEMCPClient	client/sse.go	/^func NewSSEMCPClient(baseURL string, options ...transport.ClientOption) (*Client, error) {$/;"	f	package:client	typeref:typename:(*Client, error)
NewSSEServer	server/sse.go	/^func NewSSEServer(server *MCPServer, opts ...SSEOption) *SSEServer {$/;"	f	package:server	typeref:typename:*SSEServer
NewSafeMap	client/http_test.go	/^func NewSafeMap() *SafeMap {$/;"	f	package:client	typeref:typename:*SafeMap
NewServer	mcptest/mcptest.go	/^func NewServer(t *testing.T, tools ...server.ServerTool) (*Server, error) {$/;"	f	package:mcptest	typeref:typename:(*Server, error)
NewStdio	client/transport/stdio.go	/^func NewStdio($/;"	f	package:transport	typeref:typename:*Stdio
NewStdioMCPClient	client/stdio.go	/^func NewStdioMCPClient($/;"	f	package:client	typeref:typename:(*Client, error)
NewStdioMCPClientWithOptions	client/stdio.go	/^func NewStdioMCPClientWithOptions($/;"	f	package:client	typeref:typename:(*Client, error)
NewStdioServer	server/stdio.go	/^func NewStdioServer(server *MCPServer) *StdioServer {$/;"	f	package:server	typeref:typename:*StdioServer
NewStdioWithOptions	client/transport/stdio.go	/^func NewStdioWithOptions($/;"	f	package:transport	typeref:typename:*Stdio
NewStreamableHTTP	client/transport/streamable_http.go	/^func NewStreamableHTTP(serverURL string, options ...StreamableHTTPCOption) (*StreamableHTTP, err/;"	f	package:transport	typeref:typename:(*StreamableHTTP, error)
NewStreamableHTTPServer	server/streamable_http.go	/^func NewStreamableHTTPServer(server *MCPServer, opts ...StreamableHTTPOption) *StreamableHTTPSer/;"	f	package:server	typeref:typename:*StreamableHTTPServer
NewStreamableHttpClient	client/http.go	/^func NewStreamableHttpClient(baseURL string, options ...transport.StreamableHTTPCOption) (*Clien/;"	f	package:client	typeref:typename:(*Client, error)
NewTestServer	server/sse.go	/^func NewTestServer(server *MCPServer, opts ...SSEOption) *httptest.Server {$/;"	f	package:server	typeref:typename:*httptest.Server
NewTestStreamableHTTPServer	server/streamable_http.go	/^func NewTestStreamableHTTPServer(server *MCPServer, opts ...StreamableHTTPOption) *httptest.Serv/;"	f	package:server	typeref:typename:*httptest.Server
NewTextContent	mcp/utils.go	/^func NewTextContent(text string) TextContent {$/;"	f	package:mcp	typeref:typename:TextContent
NewTool	mcp/tools.go	/^func NewTool(name string, opts ...ToolOption) Tool {$/;"	f	package:mcp	typeref:typename:Tool
NewToolResultAudio	mcp/utils.go	/^func NewToolResultAudio(text, imageData, mimeType string) *CallToolResult {$/;"	f	package:mcp	typeref:typename:*CallToolResult
NewToolResultError	mcp/utils.go	/^func NewToolResultError(text string) *CallToolResult {$/;"	f	package:mcp	typeref:typename:*CallToolResult
NewToolResultErrorFromErr	mcp/utils.go	/^func NewToolResultErrorFromErr(text string, err error) *CallToolResult {$/;"	f	package:mcp	typeref:typename:*CallToolResult
NewToolResultErrorf	mcp/utils.go	/^func NewToolResultErrorf(format string, a ...any) *CallToolResult {$/;"	f	package:mcp	typeref:typename:*CallToolResult
NewToolResultImage	mcp/utils.go	/^func NewToolResultImage(text, imageData, mimeType string) *CallToolResult {$/;"	f	package:mcp	typeref:typename:*CallToolResult
NewToolResultResource	mcp/utils.go	/^func NewToolResultResource($/;"	f	package:mcp	typeref:typename:*CallToolResult
NewToolResultText	mcp/utils.go	/^func NewToolResultText(text string) *CallToolResult {$/;"	f	package:mcp	typeref:typename:*CallToolResult
NewToolWithRawSchema	mcp/tools.go	/^func NewToolWithRawSchema(name, description string, schema json.RawMessage) Tool {$/;"	f	package:mcp	typeref:typename:Tool
NewTypedToolHandler	mcp/typed_tools.go	/^func NewTypedToolHandler[T any](handler TypedToolHandlerFunc[T]) func(ctx context.Context, reque/;"	f	package:mcp	typeref:typename:(handler TypedToolHandlerFunc[T]) func
NewUnstartedServer	mcptest/mcptest.go	/^func NewUnstartedServer(t *testing.T) *Server {$/;"	f	package:mcptest	typeref:typename:*Server
NextCursor	mcp/types.go	/^	NextCursor Cursor `json:"nextCursor,omitempty"`$/;"	m	struct:mcp.PaginatedResult	typeref:typename:Cursor
Notification	mcp/prompts.go	/^	Notification$/;"	M	struct:mcp.PromptListChangedNotification	typeref:typename:Notification
Notification	mcp/tools.go	/^	Notification$/;"	M	struct:mcp.ToolListChangedNotification	typeref:typename:Notification
Notification	mcp/types.go	/^	Notification$/;"	M	struct:mcp.CancelledNotification	typeref:typename:Notification
Notification	mcp/types.go	/^	Notification$/;"	M	struct:mcp.InitializedNotification	typeref:typename:Notification
Notification	mcp/types.go	/^	Notification$/;"	M	struct:mcp.JSONRPCNotification	typeref:typename:Notification
Notification	mcp/types.go	/^	Notification$/;"	M	struct:mcp.LoggingMessageNotification	typeref:typename:Notification
Notification	mcp/types.go	/^	Notification$/;"	M	struct:mcp.ProgressNotification	typeref:typename:Notification
Notification	mcp/types.go	/^	Notification$/;"	M	struct:mcp.ResourceListChangedNotification	typeref:typename:Notification
Notification	mcp/types.go	/^	Notification$/;"	M	struct:mcp.ResourceUpdatedNotification	typeref:typename:Notification
Notification	mcp/types.go	/^	Notification$/;"	M	struct:mcp.RootsListChangedNotification	typeref:typename:Notification
Notification	mcp/types.go	/^type Notification struct {$/;"	s	package:mcp
NotificationChannel	server/inprocess_session.go	/^func (s *InProcessSession) NotificationChannel() chan<- mcp.JSONRPCNotification {$/;"	f	struct:server.InProcessSession	typeref:typename:chan<- mcp.JSONRPCNotification
NotificationChannel	server/sampling_test.go	/^func (m *mockSession) NotificationChannel() chan<- mcp.JSONRPCNotification {$/;"	f	struct:server.mockSession	typeref:typename:chan<- mcp.JSONRPCNotification
NotificationChannel	server/server_test.go	/^func (f fakeSession) NotificationChannel() chan<- mcp.JSONRPCNotification {$/;"	f	struct:server.fakeSession	typeref:typename:chan<- mcp.JSONRPCNotification
NotificationChannel	server/session.go	/^	NotificationChannel() chan<- mcp.JSONRPCNotification$/;"	n	interface:server.ClientSession	typeref:typename:chan<- mcp.JSONRPCNotification
NotificationChannel	server/session_test.go	/^func (f *sessionTestClientWithClientInfo) NotificationChannel() chan<- mcp.JSONRPCNotification {$/;"	f	struct:server.sessionTestClientWithClientInfo	typeref:typename:chan<- mcp.JSONRPCNotification
NotificationChannel	server/session_test.go	/^func (f *sessionTestClientWithLogging) NotificationChannel() chan<- mcp.JSONRPCNotification {$/;"	f	struct:server.sessionTestClientWithLogging	typeref:typename:chan<- mcp.JSONRPCNotification
NotificationChannel	server/session_test.go	/^func (f *sessionTestClientWithTools) NotificationChannel() chan<- mcp.JSONRPCNotification {$/;"	f	struct:server.sessionTestClientWithTools	typeref:typename:chan<- mcp.JSONRPCNotification
NotificationChannel	server/session_test.go	/^func (f sessionTestClient) NotificationChannel() chan<- mcp.JSONRPCNotification {$/;"	f	struct:server.sessionTestClient	typeref:typename:chan<- mcp.JSONRPCNotification
NotificationChannel	server/sse.go	/^func (s *sseSession) NotificationChannel() chan<- mcp.JSONRPCNotification {$/;"	f	struct:server.sseSession	typeref:typename:chan<- mcp.JSONRPCNotification
NotificationChannel	server/stdio.go	/^func (s *stdioSession) NotificationChannel() chan<- mcp.JSONRPCNotification {$/;"	f	struct:server.stdioSession	typeref:typename:chan<- mcp.JSONRPCNotification
NotificationChannel	server/streamable_http.go	/^func (s *streamableHttpSession) NotificationChannel() chan<- mcp.JSONRPCNotification {$/;"	f	struct:server.streamableHttpSession	typeref:typename:chan<- mcp.JSONRPCNotification
NotificationHandlerFunc	server/server.go	/^type NotificationHandlerFunc func(ctx context.Context, notification mcp.JSONRPCNotification)$/;"	t	package:server	typeref:typename:func(ctx context.Context, notification mcp.JSONRPCNotification)
NotificationParams	mcp/types.go	/^type NotificationParams struct {$/;"	s	package:mcp
OAuth Client Example	examples/oauth_client/README.md	/^# OAuth Client Example$/;"	c
OAuth Scopes	examples/oauth_client/README.md	/^## OAuth Scopes$/;"	s	chapter:OAuth Client Example
OAuthAuthorizationRequiredError	client/oauth.go	/^type OAuthAuthorizationRequiredError = transport.OAuthAuthorizationRequiredError$/;"	a	package:client	typeref:typename:transport.OAuthAuthorizationRequiredError
OAuthAuthorizationRequiredError	client/transport/streamable_http.go	/^type OAuthAuthorizationRequiredError struct {$/;"	s	package:transport
OAuthConfig	client/oauth.go	/^type OAuthConfig = transport.OAuthConfig$/;"	a	package:client	typeref:typename:transport.OAuthConfig
OAuthConfig	client/transport/oauth.go	/^type OAuthConfig struct {$/;"	s	package:transport
OAuthError	client/transport/oauth.go	/^type OAuthError struct {$/;"	s	package:transport
OAuthHandler	client/transport/oauth.go	/^type OAuthHandler struct {$/;"	s	package:transport
OAuthProtectedResource	client/transport/oauth.go	/^type OAuthProtectedResource struct {$/;"	s	package:transport
OnAfterCallTool	server/hooks.go	/^	OnAfterCallTool               []OnAfterCallToolFunc$/;"	m	struct:server.Hooks	typeref:typename:[]OnAfterCallToolFunc
OnAfterCallToolFunc	server/hooks.go	/^type OnAfterCallToolFunc func(ctx context.Context, id any, message *mcp.CallToolRequest, result /;"	t	package:server	typeref:typename:func(ctx context.Context, id any, message *mcp.CallToolRequest, result *mcp.CallToolResult)
OnAfterGetPrompt	server/hooks.go	/^	OnAfterGetPrompt              []OnAfterGetPromptFunc$/;"	m	struct:server.Hooks	typeref:typename:[]OnAfterGetPromptFunc
OnAfterGetPromptFunc	server/hooks.go	/^type OnAfterGetPromptFunc func(ctx context.Context, id any, message *mcp.GetPromptRequest, resul/;"	t	package:server	typeref:typename:func(ctx context.Context, id any, message *mcp.GetPromptRequest, result *mcp.GetPromptResult)
OnAfterInitialize	server/hooks.go	/^	OnAfterInitialize             []OnAfterInitializeFunc$/;"	m	struct:server.Hooks	typeref:typename:[]OnAfterInitializeFunc
OnAfterInitializeFunc	server/hooks.go	/^type OnAfterInitializeFunc func(ctx context.Context, id any, message *mcp.InitializeRequest, res/;"	t	package:server	typeref:typename:func(ctx context.Context, id any, message *mcp.InitializeRequest, result *mcp.InitializeResult)
OnAfterListPrompts	server/hooks.go	/^	OnAfterListPrompts            []OnAfterListPromptsFunc$/;"	m	struct:server.Hooks	typeref:typename:[]OnAfterListPromptsFunc
OnAfterListPromptsFunc	server/hooks.go	/^type OnAfterListPromptsFunc func(ctx context.Context, id any, message *mcp.ListPromptsRequest, r/;"	t	package:server	typeref:typename:func(ctx context.Context, id any, message *mcp.ListPromptsRequest, result *mcp.ListPromptsResult)
OnAfterListResourceTemplates	server/hooks.go	/^	OnAfterListResourceTemplates  []OnAfterListResourceTemplatesFunc$/;"	m	struct:server.Hooks	typeref:typename:[]OnAfterListResourceTemplatesFunc
OnAfterListResourceTemplatesFunc	server/hooks.go	/^type OnAfterListResourceTemplatesFunc func(ctx context.Context, id any, message *mcp.ListResourc/;"	t	package:server	typeref:typename:func(ctx context.Context, id any, message *mcp.ListResourceTemplatesRequest, result *mcp.ListResourceTemplatesResult)
OnAfterListResources	server/hooks.go	/^	OnAfterListResources          []OnAfterListResourcesFunc$/;"	m	struct:server.Hooks	typeref:typename:[]OnAfterListResourcesFunc
OnAfterListResourcesFunc	server/hooks.go	/^type OnAfterListResourcesFunc func(ctx context.Context, id any, message *mcp.ListResourcesReques/;"	t	package:server	typeref:typename:func(ctx context.Context, id any, message *mcp.ListResourcesRequest, result *mcp.ListResourcesResult)
OnAfterListTools	server/hooks.go	/^	OnAfterListTools              []OnAfterListToolsFunc$/;"	m	struct:server.Hooks	typeref:typename:[]OnAfterListToolsFunc
OnAfterListToolsFunc	server/hooks.go	/^type OnAfterListToolsFunc func(ctx context.Context, id any, message *mcp.ListToolsRequest, resul/;"	t	package:server	typeref:typename:func(ctx context.Context, id any, message *mcp.ListToolsRequest, result *mcp.ListToolsResult)
OnAfterPing	server/hooks.go	/^	OnAfterPing                   []OnAfterPingFunc$/;"	m	struct:server.Hooks	typeref:typename:[]OnAfterPingFunc
OnAfterPingFunc	server/hooks.go	/^type OnAfterPingFunc func(ctx context.Context, id any, message *mcp.PingRequest, result *mcp.Emp/;"	t	package:server	typeref:typename:func(ctx context.Context, id any, message *mcp.PingRequest, result *mcp.EmptyResult)
OnAfterReadResource	server/hooks.go	/^	OnAfterReadResource           []OnAfterReadResourceFunc$/;"	m	struct:server.Hooks	typeref:typename:[]OnAfterReadResourceFunc
OnAfterReadResourceFunc	server/hooks.go	/^type OnAfterReadResourceFunc func(ctx context.Context, id any, message *mcp.ReadResourceRequest,/;"	t	package:server	typeref:typename:func(ctx context.Context, id any, message *mcp.ReadResourceRequest, result *mcp.ReadResourceResult)
OnAfterSetLevel	server/hooks.go	/^	OnAfterSetLevel               []OnAfterSetLevelFunc$/;"	m	struct:server.Hooks	typeref:typename:[]OnAfterSetLevelFunc
OnAfterSetLevelFunc	server/hooks.go	/^type OnAfterSetLevelFunc func(ctx context.Context, id any, message *mcp.SetLevelRequest, result /;"	t	package:server	typeref:typename:func(ctx context.Context, id any, message *mcp.SetLevelRequest, result *mcp.EmptyResult)
OnBeforeAny	server/hooks.go	/^	OnBeforeAny                   []BeforeAnyHookFunc$/;"	m	struct:server.Hooks	typeref:typename:[]BeforeAnyHookFunc
OnBeforeCallTool	server/hooks.go	/^	OnBeforeCallTool              []OnBeforeCallToolFunc$/;"	m	struct:server.Hooks	typeref:typename:[]OnBeforeCallToolFunc
OnBeforeCallToolFunc	server/hooks.go	/^type OnBeforeCallToolFunc func(ctx context.Context, id any, message *mcp.CallToolRequest)$/;"	t	package:server	typeref:typename:func(ctx context.Context, id any, message *mcp.CallToolRequest)
OnBeforeGetPrompt	server/hooks.go	/^	OnBeforeGetPrompt             []OnBeforeGetPromptFunc$/;"	m	struct:server.Hooks	typeref:typename:[]OnBeforeGetPromptFunc
OnBeforeGetPromptFunc	server/hooks.go	/^type OnBeforeGetPromptFunc func(ctx context.Context, id any, message *mcp.GetPromptRequest)$/;"	t	package:server	typeref:typename:func(ctx context.Context, id any, message *mcp.GetPromptRequest)
OnBeforeInitialize	server/hooks.go	/^	OnBeforeInitialize            []OnBeforeInitializeFunc$/;"	m	struct:server.Hooks	typeref:typename:[]OnBeforeInitializeFunc
OnBeforeInitializeFunc	server/hooks.go	/^type OnBeforeInitializeFunc func(ctx context.Context, id any, message *mcp.InitializeRequest)$/;"	t	package:server	typeref:typename:func(ctx context.Context, id any, message *mcp.InitializeRequest)
OnBeforeListPrompts	server/hooks.go	/^	OnBeforeListPrompts           []OnBeforeListPromptsFunc$/;"	m	struct:server.Hooks	typeref:typename:[]OnBeforeListPromptsFunc
OnBeforeListPromptsFunc	server/hooks.go	/^type OnBeforeListPromptsFunc func(ctx context.Context, id any, message *mcp.ListPromptsRequest)$/;"	t	package:server	typeref:typename:func(ctx context.Context, id any, message *mcp.ListPromptsRequest)
OnBeforeListResourceTemplates	server/hooks.go	/^	OnBeforeListResourceTemplates []OnBeforeListResourceTemplatesFunc$/;"	m	struct:server.Hooks	typeref:typename:[]OnBeforeListResourceTemplatesFunc
OnBeforeListResourceTemplatesFunc	server/hooks.go	/^type OnBeforeListResourceTemplatesFunc func(ctx context.Context, id any, message *mcp.ListResour/;"	t	package:server	typeref:typename:func(ctx context.Context, id any, message *mcp.ListResourceTemplatesRequest)
OnBeforeListResources	server/hooks.go	/^	OnBeforeListResources         []OnBeforeListResourcesFunc$/;"	m	struct:server.Hooks	typeref:typename:[]OnBeforeListResourcesFunc
OnBeforeListResourcesFunc	server/hooks.go	/^type OnBeforeListResourcesFunc func(ctx context.Context, id any, message *mcp.ListResourcesReque/;"	t	package:server	typeref:typename:func(ctx context.Context, id any, message *mcp.ListResourcesRequest)
OnBeforeListTools	server/hooks.go	/^	OnBeforeListTools             []OnBeforeListToolsFunc$/;"	m	struct:server.Hooks	typeref:typename:[]OnBeforeListToolsFunc
OnBeforeListToolsFunc	server/hooks.go	/^type OnBeforeListToolsFunc func(ctx context.Context, id any, message *mcp.ListToolsRequest)$/;"	t	package:server	typeref:typename:func(ctx context.Context, id any, message *mcp.ListToolsRequest)
OnBeforePing	server/hooks.go	/^	OnBeforePing                  []OnBeforePingFunc$/;"	m	struct:server.Hooks	typeref:typename:[]OnBeforePingFunc
OnBeforePingFunc	server/hooks.go	/^type OnBeforePingFunc func(ctx context.Context, id any, message *mcp.PingRequest)$/;"	t	package:server	typeref:typename:func(ctx context.Context, id any, message *mcp.PingRequest)
OnBeforeReadResource	server/hooks.go	/^	OnBeforeReadResource          []OnBeforeReadResourceFunc$/;"	m	struct:server.Hooks	typeref:typename:[]OnBeforeReadResourceFunc
OnBeforeReadResourceFunc	server/hooks.go	/^type OnBeforeReadResourceFunc func(ctx context.Context, id any, message *mcp.ReadResourceRequest/;"	t	package:server	typeref:typename:func(ctx context.Context, id any, message *mcp.ReadResourceRequest)
OnBeforeSetLevel	server/hooks.go	/^	OnBeforeSetLevel              []OnBeforeSetLevelFunc$/;"	m	struct:server.Hooks	typeref:typename:[]OnBeforeSetLevelFunc
OnBeforeSetLevelFunc	server/hooks.go	/^type OnBeforeSetLevelFunc func(ctx context.Context, id any, message *mcp.SetLevelRequest)$/;"	t	package:server	typeref:typename:func(ctx context.Context, id any, message *mcp.SetLevelRequest)
OnError	server/hooks.go	/^	OnError                       []OnErrorHookFunc$/;"	m	struct:server.Hooks	typeref:typename:[]OnErrorHookFunc
OnErrorHookFunc	server/hooks.go	/^type OnErrorHookFunc func(ctx context.Context, id any, method mcp.MCPMethod, message any, err er/;"	t	package:server	typeref:typename:func(ctx context.Context, id any, method mcp.MCPMethod, message any, err error)
OnNotification	client/client.go	/^func (c *Client) OnNotification($/;"	f	struct:client.Client
OnNotification	client/interface.go	/^	OnNotification(handler func(notification mcp.JSONRPCNotification))$/;"	n	interface:client.MCPClient
OnRegisterSession	server/hooks.go	/^	OnRegisterSession             []OnRegisterSessionHookFunc$/;"	m	struct:server.Hooks	typeref:typename:[]OnRegisterSessionHookFunc
OnRegisterSessionHookFunc	server/hooks.go	/^type OnRegisterSessionHookFunc func(ctx context.Context, session ClientSession)$/;"	t	package:server	typeref:typename:func(ctx context.Context, session ClientSession)
OnRequestInitialization	server/hooks.go	/^	OnRequestInitialization       []OnRequestInitializationFunc$/;"	m	struct:server.Hooks	typeref:typename:[]OnRequestInitializationFunc
OnRequestInitializationFunc	server/hooks.go	/^type OnRequestInitializationFunc func(ctx context.Context, id any, message any) error$/;"	t	package:server	typeref:typename:func(ctx context.Context, id any, message any) error
OnSuccess	server/hooks.go	/^	OnSuccess                     []OnSuccessHookFunc$/;"	m	struct:server.Hooks	typeref:typename:[]OnSuccessHookFunc
OnSuccessHookFunc	server/hooks.go	/^type OnSuccessHookFunc func(ctx context.Context, id any, method mcp.MCPMethod, message any, resu/;"	t	package:server	typeref:typename:func(ctx context.Context, id any, method mcp.MCPMethod, message any, result any)
OnUnregisterSession	server/hooks.go	/^	OnUnregisterSession           []OnUnregisterSessionHookFunc$/;"	m	struct:server.Hooks	typeref:typename:[]OnUnregisterSessionHookFunc
OnUnregisterSessionHookFunc	server/hooks.go	/^type OnUnregisterSessionHookFunc func(ctx context.Context, session ClientSession)$/;"	t	package:server	typeref:typename:func(ctx context.Context, session ClientSession)
OpenWorldHint	mcp/tools.go	/^	OpenWorldHint *bool `json:"openWorldHint,omitempty"`$/;"	m	struct:mcp.ToolAnnotation	typeref:typename:*bool
Our Pledge	CODE_OF_CONDUCT.md	/^## Our Pledge$/;"	s	chapter:Contributor Covenant Code of Conduct
Our Standards	CODE_OF_CONDUCT.md	/^## Our Standards$/;"	s	chapter:Contributor Covenant Code of Conduct
Overview	examples/inprocess_sampling/README.md	/^## Overview$/;"	s	chapter:InProcess Sampling Example
PARSE_ERROR	mcp/types.go	/^	PARSE_ERROR      = -32700$/;"	c	package:mcp
PKCEEnabled	client/transport/oauth.go	/^	PKCEEnabled bool$/;"	m	struct:transport.OAuthConfig	typeref:typename:bool
PaginatedParams	mcp/types.go	/^type PaginatedParams struct {$/;"	s	package:mcp
PaginatedRequest	mcp/prompts.go	/^	PaginatedRequest$/;"	M	struct:mcp.ListPromptsRequest	typeref:typename:PaginatedRequest
PaginatedRequest	mcp/tools.go	/^	PaginatedRequest$/;"	M	struct:mcp.ListToolsRequest	typeref:typename:PaginatedRequest
PaginatedRequest	mcp/types.go	/^	PaginatedRequest$/;"	M	struct:mcp.ListResourceTemplatesRequest	typeref:typename:PaginatedRequest
PaginatedRequest	mcp/types.go	/^	PaginatedRequest$/;"	M	struct:mcp.ListResourcesRequest	typeref:typename:PaginatedRequest
PaginatedRequest	mcp/types.go	/^type PaginatedRequest struct {$/;"	s	package:mcp
PaginatedResult	mcp/prompts.go	/^	PaginatedResult$/;"	M	struct:mcp.ListPromptsResult	typeref:typename:PaginatedResult
PaginatedResult	mcp/tools.go	/^	PaginatedResult$/;"	M	struct:mcp.ListToolsResult	typeref:typename:PaginatedResult
PaginatedResult	mcp/types.go	/^	PaginatedResult$/;"	M	struct:mcp.ListResourceTemplatesResult	typeref:typename:PaginatedResult
PaginatedResult	mcp/types.go	/^	PaginatedResult$/;"	M	struct:mcp.ListResourcesResult	typeref:typename:PaginatedResult
PaginatedResult	mcp/types.go	/^type PaginatedResult struct {$/;"	s	package:mcp
ParamType	server/internal/gen/data.go	/^	ParamType      string$/;"	m	struct:main.MCPRequestType	typeref:typename:string
Params	client/transport/interface.go	/^	Params  any           `json:"params,omitempty"`$/;"	m	struct:transport.JSONRPCRequest	typeref:typename:any
Params	mcp/prompts.go	/^	Params GetPromptParams `json:"params"`$/;"	m	struct:mcp.GetPromptRequest	typeref:typename:GetPromptParams
Params	mcp/tools.go	/^	Params CallToolParams `json:"params"`$/;"	m	struct:mcp.CallToolRequest	typeref:typename:CallToolParams
Params	mcp/types.go	/^	Params  any       `json:"params,omitempty"`$/;"	m	struct:mcp.JSONRPCRequest	typeref:typename:any
Params	mcp/types.go	/^	Params CancelledNotificationParams `json:"params"`$/;"	m	struct:mcp.CancelledNotification	typeref:typename:CancelledNotificationParams
Params	mcp/types.go	/^	Params CompleteParams `json:"params"`$/;"	m	struct:mcp.CompleteRequest	typeref:typename:CompleteParams
Params	mcp/types.go	/^	Params InitializeParams `json:"params"`$/;"	m	struct:mcp.InitializeRequest	typeref:typename:InitializeParams
Params	mcp/types.go	/^	Params LoggingMessageNotificationParams `json:"params"`$/;"	m	struct:mcp.LoggingMessageNotification	typeref:typename:LoggingMessageNotificationParams
Params	mcp/types.go	/^	Params NotificationParams `json:"params,omitempty"`$/;"	m	struct:mcp.Notification	typeref:typename:NotificationParams
Params	mcp/types.go	/^	Params PaginatedParams `json:"params,omitempty"`$/;"	m	struct:mcp.PaginatedRequest	typeref:typename:PaginatedParams
Params	mcp/types.go	/^	Params ProgressNotificationParams `json:"params"`$/;"	m	struct:mcp.ProgressNotification	typeref:typename:ProgressNotificationParams
Params	mcp/types.go	/^	Params ReadResourceParams `json:"params"`$/;"	m	struct:mcp.ReadResourceRequest	typeref:typename:ReadResourceParams
Params	mcp/types.go	/^	Params RequestParams `json:"params,omitempty"`$/;"	m	struct:mcp.Request	typeref:typename:RequestParams
Params	mcp/types.go	/^	Params ResourceUpdatedNotificationParams `json:"params"`$/;"	m	struct:mcp.ResourceUpdatedNotification	typeref:typename:ResourceUpdatedNotificationParams
Params	mcp/types.go	/^	Params SetLevelParams `json:"params"`$/;"	m	struct:mcp.SetLevelRequest	typeref:typename:SetLevelParams
Params	mcp/types.go	/^	Params SubscribeParams `json:"params"`$/;"	m	struct:mcp.SubscribeRequest	typeref:typename:SubscribeParams
Params	mcp/types.go	/^	Params UnsubscribeParams `json:"params"`$/;"	m	struct:mcp.UnsubscribeRequest	typeref:typename:UnsubscribeParams
Params	mcp/types.go	/^type Params map[string]any$/;"	t	package:mcp	typeref:typename:map[string]any
Params	testdata/mockstdio_server.go	/^	Params  json.RawMessage `json:"params"`$/;"	m	struct:main.JSONRPCRequest	typeref:typename:json.RawMessage
ParseArgument	mcp/utils.go	/^func ParseArgument(request CallToolRequest, key string, defaultVal any) any {$/;"	f	package:mcp	typeref:typename:any
ParseBoolean	mcp/utils.go	/^func ParseBoolean(request CallToolRequest, key string, defaultValue bool) bool {$/;"	f	package:mcp	typeref:typename:bool
ParseCallToolResult	mcp/utils.go	/^func ParseCallToolResult(rawMessage *json.RawMessage) (*CallToolResult, error) {$/;"	f	package:mcp	typeref:typename:(*CallToolResult, error)
ParseContent	mcp/utils.go	/^func ParseContent(contentMap map[string]any) (Content, error) {$/;"	f	package:mcp	typeref:typename:(Content, error)
ParseFloat32	mcp/utils.go	/^func ParseFloat32(request CallToolRequest, key string, defaultValue float32) float32 {$/;"	f	package:mcp	typeref:typename:float32
ParseFloat64	mcp/utils.go	/^func ParseFloat64(request CallToolRequest, key string, defaultValue float64) float64 {$/;"	f	package:mcp	typeref:typename:float64
ParseGetPromptResult	mcp/utils.go	/^func ParseGetPromptResult(rawMessage *json.RawMessage) (*GetPromptResult, error) {$/;"	f	package:mcp	typeref:typename:(*GetPromptResult, error)
ParseInt	mcp/utils.go	/^func ParseInt(request CallToolRequest, key string, defaultValue int) int {$/;"	f	package:mcp	typeref:typename:int
ParseInt16	mcp/utils.go	/^func ParseInt16(request CallToolRequest, key string, defaultValue int16) int16 {$/;"	f	package:mcp	typeref:typename:int16
ParseInt32	mcp/utils.go	/^func ParseInt32(request CallToolRequest, key string, defaultValue int32) int32 {$/;"	f	package:mcp	typeref:typename:int32
ParseInt64	mcp/utils.go	/^func ParseInt64(request CallToolRequest, key string, defaultValue int64) int64 {$/;"	f	package:mcp	typeref:typename:int64
ParseInt8	mcp/utils.go	/^func ParseInt8(request CallToolRequest, key string, defaultValue int8) int8 {$/;"	f	package:mcp	typeref:typename:int8
ParseReadResourceResult	mcp/utils.go	/^func ParseReadResourceResult(rawMessage *json.RawMessage) (*ReadResourceResult, error) {$/;"	f	package:mcp	typeref:typename:(*ReadResourceResult, error)
ParseResourceContents	mcp/utils.go	/^func ParseResourceContents(contentMap map[string]any) (ResourceContents, error) {$/;"	f	package:mcp	typeref:typename:(ResourceContents, error)
ParseString	mcp/utils.go	/^func ParseString(request CallToolRequest, key string, defaultValue string) string {$/;"	f	package:mcp	typeref:typename:string
ParseStringMap	mcp/utils.go	/^func ParseStringMap(request CallToolRequest, key string, defaultValue map[string]any) map[string/;"	f	package:mcp	typeref:typename:map[string]any
ParseUInt	mcp/utils.go	/^func ParseUInt(request CallToolRequest, key string, defaultValue uint) uint {$/;"	f	package:mcp	typeref:typename:uint
ParseUInt16	mcp/utils.go	/^func ParseUInt16(request CallToolRequest, key string, defaultValue uint16) uint16 {$/;"	f	package:mcp	typeref:typename:uint16
ParseUInt32	mcp/utils.go	/^func ParseUInt32(request CallToolRequest, key string, defaultValue uint32) uint32 {$/;"	f	package:mcp	typeref:typename:uint32
ParseUInt64	mcp/utils.go	/^func ParseUInt64(request CallToolRequest, key string, defaultValue uint64) uint64 {$/;"	f	package:mcp	typeref:typename:uint64
ParseUInt8	mcp/utils.go	/^func ParseUInt8(request CallToolRequest, key string, defaultValue uint8) uint8 {$/;"	f	package:mcp	typeref:typename:uint8
Pattern	mcp/tools.go	/^func Pattern(pattern string) PropertyOption {$/;"	f	package:mcp	typeref:typename:PropertyOption
Per-Session Tools	README.md	/^#### Per-Session Tools$/;"	t	subsection:Extras""Session Management
Ping	client/client.go	/^func (c *Client) Ping(ctx context.Context) error {$/;"	f	struct:client.Client	typeref:typename:error
Ping	client/interface.go	/^	Ping(ctx context.Context) error$/;"	n	interface:client.MCPClient	typeref:typename:error
PingRequest	mcp/types.go	/^type PingRequest struct {$/;"	s	package:mcp
Possible Solution	.github/ISSUE_TEMPLATE/bug_report.md	/^## Possible Solution$/;"	s
Prerequisites	CONTRIBUTING.md	/^### Prerequisites$/;"	S	section:Contributing""Development Guidelines
Priority	mcp/types.go	/^	Priority float64 `json:"priority,omitempty"`$/;"	m	struct:mcp.Annotations	typeref:typename:float64
Problem Statement	.github/ISSUE_TEMPLATE/feature-request.md	/^## Problem Statement$/;"	s
ProcessAuthorizationResponse	client/transport/oauth.go	/^func (h *OAuthHandler) ProcessAuthorizationResponse(ctx context.Context, code, state, codeVerifi/;"	f	struct:transport.OAuthHandler	typeref:typename:error
Progress	mcp/types.go	/^	Progress float64 `json:"progress"`$/;"	m	struct:mcp.ProgressNotificationParams	typeref:typename:float64
ProgressNotification	mcp/types.go	/^type ProgressNotification struct {$/;"	s	package:mcp
ProgressNotificationParams	mcp/types.go	/^type ProgressNotificationParams struct {$/;"	s	package:mcp
ProgressToken	mcp/types.go	/^	ProgressToken ProgressToken `json:"progressToken"`$/;"	m	struct:mcp.ProgressNotificationParams	typeref:typename:ProgressToken
ProgressToken	mcp/types.go	/^	ProgressToken ProgressToken$/;"	m	struct:mcp.Meta	typeref:typename:ProgressToken
ProgressToken	mcp/types.go	/^type ProgressToken any$/;"	t	package:mcp	typeref:typename:any
Prompt	mcp/prompts.go	/^type Prompt struct {$/;"	s	package:mcp
Prompt	server/server.go	/^	Prompt  mcp.Prompt$/;"	m	struct:server.ServerPrompt	typeref:typename:mcp.Prompt
PromptArgument	mcp/prompts.go	/^type PromptArgument struct {$/;"	s	package:mcp
PromptHandlerFunc	server/server.go	/^type PromptHandlerFunc func(ctx context.Context, request mcp.GetPromptRequest) (*mcp.GetPromptRe/;"	t	package:server	typeref:typename:func(ctx context.Context, request mcp.GetPromptRequest) (*mcp.GetPromptResult, error)
PromptListChangedNotification	mcp/prompts.go	/^type PromptListChangedNotification struct {$/;"	s	package:mcp
PromptMessage	mcp/prompts.go	/^type PromptMessage struct {$/;"	s	package:mcp
PromptName	examples/everything/main.go	/^type PromptName string$/;"	t	package:main	typeref:typename:string
PromptOption	mcp/prompts.go	/^type PromptOption func(*Prompt)$/;"	t	package:mcp	typeref:typename:func(*Prompt)
PromptReference	mcp/types.go	/^type PromptReference struct {$/;"	s	package:mcp
Prompts	README.md	/^### Prompts$/;"	S	section:Core Concepts
Prompts	mcp/prompts.go	/^	Prompts []Prompt `json:"prompts"`$/;"	m	struct:mcp.ListPromptsResult	typeref:typename:[]Prompt
Prompts	mcp/types.go	/^	Prompts *struct {$/;"	m	struct:mcp.ServerCapabilities	typeref:typename:*struct { ListChanged bool `json:"listChanged,omitempty"`; }
Properties	mcp/tools.go	/^	Properties map[string]any `json:"properties,omitempty"`$/;"	m	struct:mcp.ToolInputSchema	typeref:typename:map[string]any
Properties	mcp/tools.go	/^func Properties(props map[string]any) PropertyOption {$/;"	f	package:mcp	typeref:typename:PropertyOption
PropertyNames	mcp/tools.go	/^func PropertyNames(schema map[string]any) PropertyOption {$/;"	f	package:mcp	typeref:typename:PropertyOption
PropertyOption	mcp/tools.go	/^type PropertyOption func(map[string]any)$/;"	t	package:mcp	typeref:typename:func(map[string]any)
Proposed Solution	.github/ISSUE_TEMPLATE/feature-request.md	/^## Proposed Solution$/;"	s
ProtocolVersion	mcp/types.go	/^	ProtocolVersion string             `json:"protocolVersion"`$/;"	m	struct:mcp.InitializeParams	typeref:typename:string
ProtocolVersion	mcp/types.go	/^	ProtocolVersion string             `json:"protocolVersion"`$/;"	m	struct:mcp.InitializeResult	typeref:typename:string
Quickstart	README.md	/^## Quickstart$/;"	s
RESOURCE_NOT_FOUND	mcp/types.go	/^	RESOURCE_NOT_FOUND = -32002$/;"	c	package:mcp
RawInputSchema	mcp/tools.go	/^	RawInputSchema json.RawMessage `json:"-"` \/\/ Hide this from JSON marshaling$/;"	m	struct:mcp.Tool	typeref:typename:json.RawMessage
ReadOnlyHint	mcp/tools.go	/^	ReadOnlyHint *bool `json:"readOnlyHint,omitempty"`$/;"	m	struct:mcp.ToolAnnotation	typeref:typename:*bool
ReadResource	client/client.go	/^func (c *Client) ReadResource($/;"	f	struct:client.Client	typeref:typename:(*mcp.ReadResourceResult, error)
ReadResource	client/interface.go	/^	ReadResource($/;"	n	interface:client.MCPClient	typeref:typename:(*mcp.ReadResourceResult, error)
ReadResourceParams	mcp/types.go	/^type ReadResourceParams struct {$/;"	s	package:mcp
ReadResourceRequest	mcp/types.go	/^type ReadResourceRequest struct {$/;"	s	package:mcp
ReadResourceResult	mcp/types.go	/^type ReadResourceResult struct {$/;"	s	package:mcp
Readme for Codegen	server/internal/gen/README.md	/^# Readme for Codegen$/;"	c
Real LLM Integration	examples/inprocess_sampling/README.md	/^## Real LLM Integration$/;"	s	chapter:InProcess Sampling Example
Real LLM Integration	examples/sampling_client/README.md	/^## Real LLM Integration$/;"	s	chapter:MCP Sampling Example Client
Reason	mcp/types.go	/^	Reason string `json:"reason,omitempty"`$/;"	m	struct:mcp.CancelledNotificationParams	typeref:typename:string
RedirectURI	client/transport/oauth.go	/^	RedirectURI string$/;"	m	struct:transport.OAuthConfig	typeref:typename:string
Ref	mcp/types.go	/^	Ref      any `json:"ref"` \/\/ Can be PromptReference or ResourceReference$/;"	m	struct:mcp.CompleteParams	typeref:typename:any
RefreshToken	client/transport/oauth.go	/^	RefreshToken string `json:"refresh_token,omitempty"`$/;"	m	struct:transport.Token	typeref:typename:string
RefreshToken	client/transport/oauth.go	/^func (h *OAuthHandler) RefreshToken(ctx context.Context, refreshToken string) (*Token, error) {$/;"	f	struct:transport.OAuthHandler	typeref:typename:(*Token, error)
Regenerating Server Code	README.md	/^### Regenerating Server Code$/;"	S	section:Extras
RegisterClient	client/transport/oauth.go	/^func (h *OAuthHandler) RegisterClient(ctx context.Context, clientName string) error {$/;"	f	struct:transport.OAuthHandler	typeref:typename:error
RegisterSession	server/hooks.go	/^func (c *Hooks) RegisterSession(ctx context.Context, session ClientSession) {$/;"	f	struct:server.Hooks
RegisterSession	server/session.go	/^func (s *MCPServer) RegisterSession($/;"	f	unknown:server.MCPServer	typeref:typename:error
RegistrationEndpoint	client/transport/oauth.go	/^	RegistrationEndpoint              string   `json:"registration_endpoint,omitempty"`$/;"	m	struct:transport.AuthServerMetadata	typeref:typename:string
RemoveResource	server/server.go	/^func (s *MCPServer) RemoveResource(uri string) {$/;"	f	struct:server.MCPServer
RenderTemplateToFile	server/internal/gen/main.go	/^func RenderTemplateToFile(templateContent, destPath, fileName string, data any) error {$/;"	f	package:main	typeref:typename:error
Reporting a Vulnerability	SECURITY.md	/^## Reporting a Vulnerability$/;"	s	chapter:Security Policy
Request	mcp/prompts.go	/^	Request$/;"	M	struct:mcp.GetPromptRequest	typeref:typename:Request
Request	mcp/tools.go	/^	Request$/;"	M	struct:mcp.CallToolRequest	typeref:typename:Request
Request	mcp/types.go	/^	Request$/;"	M	struct:mcp.CompleteRequest	typeref:typename:Request
Request	mcp/types.go	/^	Request$/;"	M	struct:mcp.CreateMessageRequest	typeref:typename:Request
Request	mcp/types.go	/^	Request$/;"	M	struct:mcp.InitializeRequest	typeref:typename:Request
Request	mcp/types.go	/^	Request$/;"	M	struct:mcp.JSONRPCRequest	typeref:typename:Request
Request	mcp/types.go	/^	Request$/;"	M	struct:mcp.ListRootsRequest	typeref:typename:Request
Request	mcp/types.go	/^	Request$/;"	M	struct:mcp.PaginatedRequest	typeref:typename:Request
Request	mcp/types.go	/^	Request$/;"	M	struct:mcp.PingRequest	typeref:typename:Request
Request	mcp/types.go	/^	Request$/;"	M	struct:mcp.ReadResourceRequest	typeref:typename:Request
Request	mcp/types.go	/^	Request$/;"	M	struct:mcp.SetLevelRequest	typeref:typename:Request
Request	mcp/types.go	/^	Request$/;"	M	struct:mcp.SubscribeRequest	typeref:typename:Request
Request	mcp/types.go	/^	Request$/;"	M	struct:mcp.UnsubscribeRequest	typeref:typename:Request
Request	mcp/types.go	/^type Request struct {$/;"	s	package:mcp
Request Hooks	README.md	/^### Request Hooks$/;"	S	section:Extras
RequestHandler	client/transport/interface.go	/^type RequestHandler func(ctx context.Context, request JSONRPCRequest) (*JSONRPCResponse, error)$/;"	t	package:transport	typeref:typename:func(ctx context.Context, request JSONRPCRequest) (*JSONRPCResponse, error)
RequestId	mcp/types.go	/^	RequestId RequestId `json:"requestId"`$/;"	m	struct:mcp.CancelledNotificationParams	typeref:typename:RequestId
RequestId	mcp/types.go	/^type RequestId struct {$/;"	s	package:mcp
RequestParams	mcp/types.go	/^type RequestParams struct {$/;"	s	package:mcp
RequestSampling	server/inprocess_session.go	/^func (s *InProcessSession) RequestSampling(ctx context.Context, request mcp.CreateMessageRequest/;"	f	struct:server.InProcessSession	typeref:typename:(*mcp.CreateMessageResult, error)
RequestSampling	server/sampling.go	/^	RequestSampling(ctx context.Context, request mcp.CreateMessageRequest) (*mcp.CreateMessageResul/;"	n	interface:server.SessionWithSampling	typeref:typename:(*mcp.CreateMessageResult, error)
RequestSampling	server/sampling.go	/^func (s *MCPServer) RequestSampling(ctx context.Context, request mcp.CreateMessageRequest) (*mcp/;"	f	unknown:server.MCPServer	typeref:typename:(*mcp.CreateMessageResult, error)
RequestSampling	server/sampling_test.go	/^func (m *mockSamplingSession) RequestSampling(ctx context.Context, request mcp.CreateMessageRequ/;"	f	struct:server.mockSamplingSession	typeref:typename:(*mcp.CreateMessageResult, error)
RequestSampling	server/stdio.go	/^func (s *stdioSession) RequestSampling(ctx context.Context, request mcp.CreateMessageRequest) (*/;"	f	struct:server.stdioSession	typeref:typename:(*mcp.CreateMessageResult, error)
RequireBool	mcp/tools.go	/^func (r CallToolRequest) RequireBool(key string) (bool, error) {$/;"	f	struct:mcp.CallToolRequest	typeref:typename:(bool, error)
RequireBoolSlice	mcp/tools.go	/^func (r CallToolRequest) RequireBoolSlice(key string) ([]bool, error) {$/;"	f	struct:mcp.CallToolRequest	typeref:typename:([]bool, error)
RequireFloat	mcp/tools.go	/^func (r CallToolRequest) RequireFloat(key string) (float64, error) {$/;"	f	struct:mcp.CallToolRequest	typeref:typename:(float64, error)
RequireFloatSlice	mcp/tools.go	/^func (r CallToolRequest) RequireFloatSlice(key string) ([]float64, error) {$/;"	f	struct:mcp.CallToolRequest	typeref:typename:([]float64, error)
RequireInt	mcp/tools.go	/^func (r CallToolRequest) RequireInt(key string) (int, error) {$/;"	f	struct:mcp.CallToolRequest	typeref:typename:(int, error)
RequireIntSlice	mcp/tools.go	/^func (r CallToolRequest) RequireIntSlice(key string) ([]int, error) {$/;"	f	struct:mcp.CallToolRequest	typeref:typename:([]int, error)
RequireString	mcp/tools.go	/^func (r CallToolRequest) RequireString(key string) (string, error) {$/;"	f	struct:mcp.CallToolRequest	typeref:typename:(string, error)
RequireStringSlice	mcp/tools.go	/^func (r CallToolRequest) RequireStringSlice(key string) ([]string, error) {$/;"	f	struct:mcp.CallToolRequest	typeref:typename:([]string, error)
Required	mcp/prompts.go	/^	Required bool `json:"required,omitempty"`$/;"	m	struct:mcp.PromptArgument	typeref:typename:bool
Required	mcp/tools.go	/^	Required   []string       `json:"required,omitempty"`$/;"	m	struct:mcp.ToolInputSchema	typeref:typename:[]string
Required	mcp/tools.go	/^func Required() PropertyOption {$/;"	f	package:mcp	typeref:typename:PropertyOption
RequiredArgument	mcp/prompts.go	/^func RequiredArgument() ArgumentOption {$/;"	f	package:mcp	typeref:typename:ArgumentOption
Resource	client/transport/oauth.go	/^	Resource             string   `json:"resource"`$/;"	m	struct:transport.OAuthProtectedResource	typeref:typename:string
Resource	mcp/types.go	/^	Resource ResourceContents `json:"resource"`$/;"	m	struct:mcp.EmbeddedResource	typeref:typename:ResourceContents
Resource	mcp/types.go	/^type Resource struct {$/;"	s	package:mcp
Resource	server/server.go	/^	Resource mcp.Resource$/;"	m	struct:server.ServerResource	typeref:typename:mcp.Resource
ResourceContents	mcp/types.go	/^type ResourceContents interface {$/;"	i	package:mcp
ResourceHandlerFunc	server/server.go	/^type ResourceHandlerFunc func(ctx context.Context, request mcp.ReadResourceRequest) ([]mcp.Resou/;"	t	package:server	typeref:typename:func(ctx context.Context, request mcp.ReadResourceRequest) ([]mcp.ResourceContents, error)
ResourceLink	mcp/types.go	/^type ResourceLink struct {$/;"	s	package:mcp
ResourceListChangedNotification	mcp/types.go	/^type ResourceListChangedNotification struct {$/;"	s	package:mcp
ResourceName	client/transport/oauth.go	/^	ResourceName         string   `json:"resource_name,omitempty"`$/;"	m	struct:transport.OAuthProtectedResource	typeref:typename:string
ResourceOption	mcp/resources.go	/^type ResourceOption func(*Resource)$/;"	t	package:mcp	typeref:typename:func(*Resource)
ResourceReference	mcp/types.go	/^type ResourceReference struct {$/;"	s	package:mcp
ResourceTemplate	mcp/types.go	/^type ResourceTemplate struct {$/;"	s	package:mcp
ResourceTemplateHandlerFunc	server/server.go	/^type ResourceTemplateHandlerFunc func(ctx context.Context, request mcp.ReadResourceRequest) ([]m/;"	t	package:server	typeref:typename:func(ctx context.Context, request mcp.ReadResourceRequest) ([]mcp.ResourceContents, error)
ResourceTemplateOption	mcp/resources.go	/^type ResourceTemplateOption func(*ResourceTemplate)$/;"	t	package:mcp	typeref:typename:func(*ResourceTemplate)
ResourceTemplates	mcp/types.go	/^	ResourceTemplates []ResourceTemplate `json:"resourceTemplates"`$/;"	m	struct:mcp.ListResourceTemplatesResult	typeref:typename:[]ResourceTemplate
ResourceUpdatedNotification	mcp/types.go	/^type ResourceUpdatedNotification struct {$/;"	s	package:mcp
ResourceUpdatedNotificationParams	mcp/types.go	/^type ResourceUpdatedNotificationParams struct {$/;"	s	package:mcp
Resources	README.md	/^### Resources$/;"	S	section:Core Concepts
Resources	mcp/types.go	/^	Resources *struct {$/;"	m	struct:mcp.ServerCapabilities	typeref:typename:*struct { Subscribe bool `json:"subscribe,omitempty"`; ListChanged bool `json:"listChanged,omitempty"`; }
Resources	mcp/types.go	/^	Resources []Resource `json:"resources"`$/;"	m	struct:mcp.ListResourcesResult	typeref:typename:[]Resource
ResponseTypesSupported	client/transport/oauth.go	/^	ResponseTypesSupported            []string `json:"response_types_supported"`$/;"	m	struct:transport.AuthServerMetadata	typeref:typename:[]string
Result	client/transport/interface.go	/^	Result  json.RawMessage `json:"result,omitempty"`$/;"	m	struct:transport.JSONRPCResponse	typeref:typename:json.RawMessage
Result	mcp/prompts.go	/^	Result$/;"	M	struct:mcp.GetPromptResult	typeref:typename:Result
Result	mcp/tools.go	/^	Result$/;"	M	struct:mcp.CallToolResult	typeref:typename:Result
Result	mcp/types.go	/^	Result  any       `json:"result"`$/;"	m	struct:mcp.JSONRPCResponse	typeref:typename:any
Result	mcp/types.go	/^	Result$/;"	M	struct:mcp.CompleteResult	typeref:typename:Result
Result	mcp/types.go	/^	Result$/;"	M	struct:mcp.CreateMessageResult	typeref:typename:Result
Result	mcp/types.go	/^	Result$/;"	M	struct:mcp.InitializeResult	typeref:typename:Result
Result	mcp/types.go	/^	Result$/;"	M	struct:mcp.ListRootsResult	typeref:typename:Result
Result	mcp/types.go	/^	Result$/;"	M	struct:mcp.PaginatedResult	typeref:typename:Result
Result	mcp/types.go	/^	Result$/;"	M	struct:mcp.ReadResourceResult	typeref:typename:Result
Result	mcp/types.go	/^type Result struct {$/;"	s	package:mcp
Result	server/streamable_http_test.go	/^	Result map[string]any    `json:"result"`$/;"	m	struct:server.jsonRPCResponse	typeref:typename:map[string]any
Result	testdata/mockstdio_server.go	/^	Result  any            `json:"result,omitempty"`$/;"	m	struct:main.JSONRPCResponse	typeref:typename:any
ResultType	server/internal/gen/data.go	/^	ResultType     string$/;"	m	struct:main.MCPRequestType	typeref:typename:string
Role	mcp/prompts.go	/^	Role    Role    `json:"role"`$/;"	m	struct:mcp.PromptMessage	typeref:typename:Role
Role	mcp/prompts.go	/^type Role string$/;"	t	package:mcp	typeref:typename:string
Role	mcp/types.go	/^	Role    Role `json:"role"`$/;"	m	struct:mcp.SamplingMessage	typeref:typename:Role
RoleAssistant	mcp/prompts.go	/^	RoleAssistant Role = "assistant"$/;"	c	package:mcp	typeref:type:Role
RoleUser	mcp/prompts.go	/^	RoleUser      Role = "user"$/;"	c	package:mcp	typeref:type:Role
Root	mcp/types.go	/^type Root struct {$/;"	s	package:mcp
Roots	mcp/types.go	/^	Roots *struct {$/;"	m	struct:mcp.ClientCapabilities	typeref:typename:*struct { ListChanged bool `json:"listChanged,omitempty"`; }
Roots	mcp/types.go	/^	Roots []Root `json:"roots"`$/;"	m	struct:mcp.ListRootsResult	typeref:typename:[]Root
RootsListChangedNotification	mcp/types.go	/^type RootsListChangedNotification struct {$/;"	s	package:mcp
Running the Example	examples/inprocess_sampling/README.md	/^## Running the Example$/;"	s	chapter:InProcess Sampling Example
SAMPLE_LLM	examples/everything/main.go	/^	SAMPLE_LLM             ToolName = "sampleLLM"$/;"	c	package:main	typeref:type:ToolName
SIMPLE	examples/everything/main.go	/^	SIMPLE  PromptName = "simple_prompt"$/;"	c	package:main	typeref:type:PromptName
SSE	client/transport/sse.go	/^type SSE struct {$/;"	s	package:transport
SSEContextFunc	server/sse.go	/^type SSEContextFunc func(ctx context.Context, r *http.Request) context.Context$/;"	t	package:server	typeref:typename:func(ctx context.Context, r *http.Request) context.Context
SSEHandler	server/sse.go	/^func (s *SSEServer) SSEHandler() http.Handler {$/;"	f	struct:server.SSEServer	typeref:typename:http.Handler
SSEOption	server/sse.go	/^type SSEOption func(*SSEServer)$/;"	t	package:server	typeref:typename:func(*SSEServer)
SSEServer	server/sse.go	/^type SSEServer struct {$/;"	s	package:server
SafeMap	client/http_test.go	/^type SafeMap struct {$/;"	s	package:client
Sample Output	examples/sampling_client/README.md	/^## Sample Output$/;"	s	chapter:MCP Sampling Example Client
Sampling	mcp/types.go	/^	Sampling *struct{} `json:"sampling,omitempty"`$/;"	m	struct:mcp.ClientCapabilities	typeref:typename:*struct{}
SamplingHandler	client/sampling.go	/^type SamplingHandler interface {$/;"	i	package:client
SamplingHandler	server/inprocess_session.go	/^type SamplingHandler interface {$/;"	i	package:server
SamplingMessage	mcp/types.go	/^	SamplingMessage$/;"	M	struct:mcp.CreateMessageResult	typeref:typename:SamplingMessage
SamplingMessage	mcp/types.go	/^type SamplingMessage struct {$/;"	s	package:mcp
SaveToken	client/transport/oauth.go	/^	SaveToken(token *Token) error$/;"	n	interface:transport.TokenStore	typeref:typename:error
SaveToken	client/transport/oauth.go	/^func (s *MemoryTokenStore) SaveToken(token *Token) error {$/;"	f	struct:transport.MemoryTokenStore	typeref:typename:error
Scope	CODE_OF_CONDUCT.md	/^## Scope$/;"	s	chapter:Contributor Covenant Code of Conduct
Scope	client/transport/oauth.go	/^	Scope string `json:"scope,omitempty"`$/;"	m	struct:transport.Token	typeref:typename:string
Scopes	client/transport/oauth.go	/^	Scopes []string$/;"	m	struct:transport.OAuthConfig	typeref:typename:[]string
ScopesSupported	client/transport/oauth.go	/^	ScopesSupported                   []string `json:"scopes_supported,omitempty"`$/;"	m	struct:transport.AuthServerMetadata	typeref:typename:[]string
Security Policy	SECURITY.md	/^# Security Policy$/;"	c
SendEventToSession	server/sse.go	/^func (s *SSEServer) SendEventToSession($/;"	f	struct:server.SSEServer	typeref:typename:error
SendLogMessageToClient	server/session.go	/^func (s *MCPServer) SendLogMessageToClient(ctx context.Context, notification mcp.LoggingMessageN/;"	f	unknown:server.MCPServer	typeref:typename:error
SendLogMessageToSpecificClient	server/session.go	/^func (s *MCPServer) SendLogMessageToSpecificClient(sessionID string, notification mcp.LoggingMes/;"	f	unknown:server.MCPServer	typeref:typename:error
SendNotification	client/protocol_negotiation_test.go	/^func (m *mockProtocolTransport) SendNotification(ctx context.Context, notification mcp.JSONRPCNo/;"	f	struct:client.mockProtocolTransport	typeref:typename:error
SendNotification	client/sampling_test.go	/^func (m *mockTransport) SendNotification(ctx context.Context, notification mcp.JSONRPCNotificati/;"	f	struct:client.mockTransport	typeref:typename:error
SendNotification	client/transport/inprocess.go	/^func (c *InProcessTransport) SendNotification(ctx context.Context, notification mcp.JSONRPCNotif/;"	f	struct:transport.InProcessTransport	typeref:typename:error
SendNotification	client/transport/interface.go	/^	SendNotification(ctx context.Context, notification mcp.JSONRPCNotification) error$/;"	n	interface:transport.Interface	typeref:typename:error
SendNotification	client/transport/sse.go	/^func (c *SSE) SendNotification(ctx context.Context, notification mcp.JSONRPCNotification) error /;"	f	struct:transport.SSE	typeref:typename:error
SendNotification	client/transport/stdio.go	/^func (c *Stdio) SendNotification($/;"	f	struct:transport.Stdio	typeref:typename:error
SendNotification	client/transport/streamable_http.go	/^func (c *StreamableHTTP) SendNotification(ctx context.Context, notification mcp.JSONRPCNotificat/;"	f	struct:transport.StreamableHTTP	typeref:typename:error
SendNotificationToAllClients	server/session.go	/^func (s *MCPServer) SendNotificationToAllClients($/;"	f	unknown:server.MCPServer
SendNotificationToClient	server/session.go	/^func (s *MCPServer) SendNotificationToClient($/;"	f	unknown:server.MCPServer	typeref:typename:error
SendNotificationToSpecificClient	server/session.go	/^func (s *MCPServer) SendNotificationToSpecificClient($/;"	f	unknown:server.MCPServer	typeref:typename:error
SendRequest	client/protocol_negotiation_test.go	/^func (m *mockProtocolTransport) SendRequest(ctx context.Context, request transport.JSONRPCReques/;"	f	struct:client.mockProtocolTransport	typeref:typename:(*transport.JSONRPCResponse, error)
SendRequest	client/sampling_test.go	/^func (m *mockTransport) SendRequest(ctx context.Context, request transport.JSONRPCRequest) (*tra/;"	f	struct:client.mockTransport	typeref:typename:(*transport.JSONRPCResponse, error)
SendRequest	client/transport/inprocess.go	/^func (c *InProcessTransport) SendRequest(ctx context.Context, request JSONRPCRequest) (*JSONRPCR/;"	f	struct:transport.InProcessTransport	typeref:typename:(*JSONRPCResponse, error)
SendRequest	client/transport/interface.go	/^	SendRequest(ctx context.Context, request JSONRPCRequest) (*JSONRPCResponse, error)$/;"	n	interface:transport.Interface	typeref:typename:(*JSONRPCResponse, error)
SendRequest	client/transport/sse.go	/^func (c *SSE) SendRequest($/;"	f	struct:transport.SSE	typeref:typename:(*JSONRPCResponse, error)
SendRequest	client/transport/stdio.go	/^func (c *Stdio) SendRequest($/;"	f	struct:transport.Stdio	typeref:typename:(*JSONRPCResponse, error)
SendRequest	client/transport/streamable_http.go	/^func (c *StreamableHTTP) SendRequest($/;"	f	struct:transport.StreamableHTTP	typeref:typename:(*JSONRPCResponse, error)
ServeHTTP	examples/custom_context/main.go	/^func (s *MCPServer) ServeHTTP() *server.StreamableHTTPServer {$/;"	f	struct:main.MCPServer	typeref:typename:*server.StreamableHTTPServer
ServeHTTP	server/sse.go	/^func (s *SSEServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {$/;"	f	struct:server.SSEServer
ServeHTTP	server/streamable_http.go	/^func (s *StreamableHTTPServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {$/;"	f	struct:server.StreamableHTTPServer
ServeStdio	examples/custom_context/main.go	/^func (s *MCPServer) ServeStdio() error {$/;"	f	struct:main.MCPServer	typeref:typename:error
ServeStdio	server/stdio.go	/^func ServeStdio(server *MCPServer, opts ...StdioOption) error {$/;"	f	package:server	typeref:typename:error
Server	README.md	/^### Server$/;"	S	section:Core Concepts
Server	mcptest/mcptest.go	/^type Server struct {$/;"	s	package:mcptest
Server Side	examples/inprocess_sampling/README.md	/^### Server Side$/;"	S	section:InProcess Sampling Example""Key Components
ServerCapabilities	mcp/types.go	/^type ServerCapabilities struct {$/;"	s	package:mcp
ServerFromContext	server/server.go	/^func ServerFromContext(ctx context.Context) *MCPServer {$/;"	f	package:server	typeref:typename:*MCPServer
ServerInfo	mcp/types.go	/^	ServerInfo      Implementation     `json:"serverInfo"`$/;"	m	struct:mcp.InitializeResult	typeref:typename:Implementation
ServerNotification	mcp/types.go	/^type ServerNotification any$/;"	t	package:mcp	typeref:typename:any
ServerOption	server/server.go	/^type ServerOption func(*MCPServer)$/;"	t	package:server	typeref:typename:func(*MCPServer)
ServerPrompt	server/server.go	/^type ServerPrompt struct {$/;"	s	package:server
ServerRequest	mcp/types.go	/^type ServerRequest any$/;"	t	package:mcp	typeref:typename:any
ServerResource	server/server.go	/^type ServerResource struct {$/;"	s	package:server
ServerResourceTemplate	server/server.go	/^type ServerResourceTemplate struct {$/;"	s	package:server
ServerResult	mcp/types.go	/^type ServerResult any$/;"	t	package:mcp	typeref:typename:any
ServerTool	server/server.go	/^type ServerTool struct {$/;"	s	package:server
Session Management	README.md	/^### Session Management$/;"	S	section:Extras
SessionID	server/inprocess_session.go	/^func (s *InProcessSession) SessionID() string {$/;"	f	struct:server.InProcessSession	typeref:typename:string
SessionID	server/sampling_test.go	/^func (m *mockSession) SessionID() string {$/;"	f	struct:server.mockSession	typeref:typename:string
SessionID	server/server_test.go	/^func (f fakeSession) SessionID() string {$/;"	f	struct:server.fakeSession	typeref:typename:string
SessionID	server/session.go	/^	SessionID() string$/;"	n	interface:server.ClientSession	typeref:typename:string
SessionID	server/session_test.go	/^func (f *sessionTestClientWithClientInfo) SessionID() string {$/;"	f	struct:server.sessionTestClientWithClientInfo	typeref:typename:string
SessionID	server/session_test.go	/^func (f *sessionTestClientWithLogging) SessionID() string {$/;"	f	struct:server.sessionTestClientWithLogging	typeref:typename:string
SessionID	server/session_test.go	/^func (f *sessionTestClientWithTools) SessionID() string {$/;"	f	struct:server.sessionTestClientWithTools	typeref:typename:string
SessionID	server/session_test.go	/^func (f sessionTestClient) SessionID() string {$/;"	f	struct:server.sessionTestClient	typeref:typename:string
SessionID	server/sse.go	/^func (s *sseSession) SessionID() string {$/;"	f	struct:server.sseSession	typeref:typename:string
SessionID	server/stdio.go	/^func (s *stdioSession) SessionID() string {$/;"	f	struct:server.stdioSession	typeref:typename:string
SessionID	server/streamable_http.go	/^func (s *streamableHttpSession) SessionID() string {$/;"	f	struct:server.streamableHttpSession	typeref:typename:string
SessionIdManager	server/streamable_http.go	/^type SessionIdManager interface {$/;"	i	package:server
SessionWithClientInfo	server/session.go	/^type SessionWithClientInfo interface {$/;"	i	package:server
SessionWithLogging	server/session.go	/^type SessionWithLogging interface {$/;"	i	package:server
SessionWithSampling	server/sampling.go	/^type SessionWithSampling interface {$/;"	i	package:server
SessionWithStreamableHTTPConfig	server/session.go	/^type SessionWithStreamableHTTPConfig interface {$/;"	i	package:server
SessionWithTools	server/session.go	/^type SessionWithTools interface {$/;"	i	package:server
SetBaseURL	client/transport/oauth.go	/^func (h *OAuthHandler) SetBaseURL(baseURL string) {$/;"	f	struct:transport.OAuthHandler
SetClientCapabilities	server/inprocess_session.go	/^func (s *InProcessSession) SetClientCapabilities(clientCapabilities mcp.ClientCapabilities) {$/;"	f	struct:server.InProcessSession
SetClientCapabilities	server/session.go	/^	SetClientCapabilities(clientCapabilities mcp.ClientCapabilities)$/;"	n	interface:server.SessionWithClientInfo
SetClientCapabilities	server/session_test.go	/^func (f *sessionTestClientWithClientInfo) SetClientCapabilities(clientCapabilities mcp.ClientCap/;"	f	struct:server.sessionTestClientWithClientInfo
SetClientCapabilities	server/sse.go	/^func (s *sseSession) SetClientCapabilities(clientCapabilities mcp.ClientCapabilities) {$/;"	f	struct:server.sseSession
SetClientCapabilities	server/stdio.go	/^func (s *stdioSession) SetClientCapabilities(clientCapabilities mcp.ClientCapabilities) {$/;"	f	struct:server.stdioSession
SetClientInfo	server/inprocess_session.go	/^func (s *InProcessSession) SetClientInfo(clientInfo mcp.Implementation) {$/;"	f	struct:server.InProcessSession
SetClientInfo	server/session.go	/^	SetClientInfo(clientInfo mcp.Implementation)$/;"	n	interface:server.SessionWithClientInfo
SetClientInfo	server/session_test.go	/^func (f *sessionTestClientWithClientInfo) SetClientInfo(clientInfo mcp.Implementation) {$/;"	f	struct:server.sessionTestClientWithClientInfo
SetClientInfo	server/sse.go	/^func (s *sseSession) SetClientInfo(clientInfo mcp.Implementation) {$/;"	f	struct:server.sseSession
SetClientInfo	server/stdio.go	/^func (s *stdioSession) SetClientInfo(clientInfo mcp.Implementation) {$/;"	f	struct:server.stdioSession
SetContextFunc	server/stdio.go	/^func (s *StdioServer) SetContextFunc(fn StdioContextFunc) {$/;"	f	struct:server.StdioServer
SetErrorLogger	server/stdio.go	/^func (s *StdioServer) SetErrorLogger(logger *log.Logger) {$/;"	f	struct:server.StdioServer
SetLevel	client/client.go	/^func (c *Client) SetLevel($/;"	f	struct:client.Client	typeref:typename:error
SetLevel	client/interface.go	/^	SetLevel(ctx context.Context, request mcp.SetLevelRequest) error$/;"	n	interface:client.MCPClient	typeref:typename:error
SetLevelParams	mcp/types.go	/^type SetLevelParams struct {$/;"	s	package:mcp
SetLevelRequest	mcp/types.go	/^type SetLevelRequest struct {$/;"	s	package:mcp
SetLogLevel	server/inprocess_session.go	/^func (s *InProcessSession) SetLogLevel(level mcp.LoggingLevel) {$/;"	f	struct:server.InProcessSession
SetLogLevel	server/session.go	/^	SetLogLevel(level mcp.LoggingLevel)$/;"	n	interface:server.SessionWithLogging
SetLogLevel	server/session_test.go	/^func (f *sessionTestClientWithLogging) SetLogLevel(level mcp.LoggingLevel) {$/;"	f	struct:server.sessionTestClientWithLogging
SetLogLevel	server/sse.go	/^func (s *sseSession) SetLogLevel(level mcp.LoggingLevel) {$/;"	f	struct:server.sseSession
SetLogLevel	server/stdio.go	/^func (s *stdioSession) SetLogLevel(level mcp.LoggingLevel) {$/;"	f	struct:server.stdioSession
SetLogLevel	server/streamable_http.go	/^func (s *streamableHttpSession) SetLogLevel(level mcp.LoggingLevel) {$/;"	f	struct:server.streamableHttpSession
SetNotificationHandler	client/protocol_negotiation_test.go	/^func (m *mockProtocolTransport) SetNotificationHandler(handler func(notification mcp.JSONRPCNoti/;"	f	struct:client.mockProtocolTransport
SetNotificationHandler	client/sampling_test.go	/^func (m *mockTransport) SetNotificationHandler(handler func(notification mcp.JSONRPCNotification/;"	f	struct:client.mockTransport
SetNotificationHandler	client/transport/inprocess.go	/^func (c *InProcessTransport) SetNotificationHandler(handler func(notification mcp.JSONRPCNotific/;"	f	struct:transport.InProcessTransport
SetNotificationHandler	client/transport/interface.go	/^	SetNotificationHandler(handler func(notification mcp.JSONRPCNotification))$/;"	n	interface:transport.Interface
SetNotificationHandler	client/transport/sse.go	/^func (c *SSE) SetNotificationHandler(handler func(notification mcp.JSONRPCNotification)) {$/;"	f	struct:transport.SSE
SetNotificationHandler	client/transport/stdio.go	/^func (c *Stdio) SetNotificationHandler($/;"	f	struct:transport.Stdio
SetNotificationHandler	client/transport/streamable_http.go	/^func (c *StreamableHTTP) SetNotificationHandler(handler func(mcp.JSONRPCNotification)) {$/;"	f	struct:transport.StreamableHTTP
SetProtocolVersion	client/protocol_negotiation_test.go	/^func (m *mockHTTPTransport) SetProtocolVersion(version string) {$/;"	f	struct:client.mockHTTPTransport
SetProtocolVersion	client/transport/interface.go	/^	SetProtocolVersion(version string)$/;"	n	interface:transport.HTTPConnection
SetProtocolVersion	client/transport/sse.go	/^func (c *SSE) SetProtocolVersion(version string) {$/;"	f	struct:transport.SSE
SetProtocolVersion	client/transport/streamable_http.go	/^func (c *StreamableHTTP) SetProtocolVersion(version string) {$/;"	f	struct:transport.StreamableHTTP
SetRequestHandler	client/transport/interface.go	/^	SetRequestHandler(handler RequestHandler)$/;"	n	interface:transport.BidirectionalInterface
SetRequestHandler	client/transport/stdio.go	/^func (c *Stdio) SetRequestHandler(handler RequestHandler) {$/;"	f	struct:transport.Stdio
SetSessionTools	server/session.go	/^	SetSessionTools(tools map[string]ServerTool)$/;"	n	interface:server.SessionWithTools
SetSessionTools	server/session_test.go	/^func (f *sessionTestClientWithTools) SetSessionTools(tools map[string]ServerTool) {$/;"	f	struct:server.sessionTestClientWithTools
SetSessionTools	server/sse.go	/^func (s *sseSession) SetSessionTools(tools map[string]ServerTool) {$/;"	f	struct:server.sseSession
SetSessionTools	server/streamable_http.go	/^func (s *streamableHttpSession) SetSessionTools(tools map[string]ServerTool) {$/;"	f	struct:server.streamableHttpSession
SetTools	server/server.go	/^func (s *MCPServer) SetTools(tools ...ServerTool) {$/;"	f	struct:server.MCPServer
SetWriter	server/stdio.go	/^func (s *stdioSession) SetWriter(writer io.Writer) {$/;"	f	struct:server.stdioSession
Setup	CONTRIBUTING.md	/^### Setup$/;"	S	section:Contributing""Development Guidelines
ShouldSendTo	mcp/types.go	/^func (l LoggingLevel) ShouldSendTo(minLevel LoggingLevel) bool {$/;"	f	type:mcp.LoggingLevel	typeref:typename:bool
Shutdown	server/sse.go	/^func (s *SSEServer) Shutdown(ctx context.Context) error {$/;"	f	struct:server.SSEServer	typeref:typename:error
Shutdown	server/streamable_http.go	/^func (s *StreamableHTTPServer) Shutdown(ctx context.Context) error {$/;"	f	struct:server.StreamableHTTPServer	typeref:typename:error
SpeedPriority	mcp/types.go	/^	SpeedPriority float64 `json:"speedPriority,omitempty"`$/;"	m	struct:mcp.ModelPreferences	typeref:typename:float64
Start	client/client.go	/^func (c *Client) Start(ctx context.Context) error {$/;"	f	struct:client.Client	typeref:typename:error
Start	client/protocol_negotiation_test.go	/^func (m *mockProtocolTransport) Start(ctx context.Context) error {$/;"	f	struct:client.mockProtocolTransport	typeref:typename:error
Start	client/sampling_test.go	/^func (m *mockTransport) Start(ctx context.Context) error {$/;"	f	struct:client.mockTransport	typeref:typename:error
Start	client/transport/inprocess.go	/^func (c *InProcessTransport) Start(ctx context.Context) error {$/;"	f	struct:transport.InProcessTransport	typeref:typename:error
Start	client/transport/interface.go	/^	Start(ctx context.Context) error$/;"	n	interface:transport.Interface	typeref:typename:error
Start	client/transport/sse.go	/^func (c *SSE) Start(ctx context.Context) error {$/;"	f	struct:transport.SSE	typeref:typename:error
Start	client/transport/stdio.go	/^func (c *Stdio) Start(ctx context.Context) error {$/;"	f	struct:transport.Stdio	typeref:typename:error
Start	client/transport/streamable_http.go	/^func (c *StreamableHTTP) Start(ctx context.Context) error {$/;"	f	struct:transport.StreamableHTTP	typeref:typename:error
Start	mcptest/mcptest.go	/^func (s *Server) Start(ctx context.Context) error {$/;"	f	struct:mcptest.Server	typeref:typename:error
Start	server/sse.go	/^func (s *SSEServer) Start(addr string) error {$/;"	f	struct:server.SSEServer	typeref:typename:error
Start	server/streamable_http.go	/^func (s *StreamableHTTPServer) Start(addr string) error {$/;"	f	struct:server.StreamableHTTPServer	typeref:typename:error
StatelessSessionIdManager	server/streamable_http.go	/^type StatelessSessionIdManager struct{}$/;"	s	package:server
Stderr	client/transport/stdio.go	/^func (c *Stdio) Stderr() io.Reader {$/;"	f	struct:transport.Stdio	typeref:typename:io.Reader
Stdio	client/transport/stdio.go	/^type Stdio struct {$/;"	s	package:transport
StdioContextFunc	server/stdio.go	/^type StdioContextFunc func(ctx context.Context) context.Context$/;"	t	package:server	typeref:typename:func(ctx context.Context) context.Context
StdioOption	client/transport/stdio.go	/^type StdioOption func(*Stdio)$/;"	t	package:transport	typeref:typename:func(*Stdio)
StdioOption	server/stdio.go	/^type StdioOption func(*StdioServer)$/;"	t	package:server	typeref:typename:func(*StdioServer)
StdioServer	server/stdio.go	/^type StdioServer struct {$/;"	s	package:server
StopReason	mcp/types.go	/^	StopReason string `json:"stopReason,omitempty"`$/;"	m	struct:mcp.CreateMessageResult	typeref:typename:string
StopSequences	mcp/types.go	/^	StopSequences    []string          `json:"stopSequences,omitempty"`$/;"	m	struct:mcp.CreateMessageParams	typeref:typename:[]string
StreamableHTTP	client/transport/streamable_http.go	/^type StreamableHTTP struct {$/;"	s	package:transport
StreamableHTTPCOption	client/transport/streamable_http.go	/^type StreamableHTTPCOption func(*StreamableHTTP)$/;"	t	package:transport	typeref:typename:func(*StreamableHTTP)
StreamableHTTPOption	server/streamable_http.go	/^type StreamableHTTPOption func(*StreamableHTTPServer)$/;"	t	package:server	typeref:typename:func(*StreamableHTTPServer)
StreamableHTTPServer	server/streamable_http.go	/^type StreamableHTTPServer struct {$/;"	s	package:server
String	mcp/types.go	/^func (r RequestId) String() string {$/;"	f	struct:mcp.RequestId	typeref:typename:string
Subscribe	client/client.go	/^func (c *Client) Subscribe($/;"	f	struct:client.Client	typeref:typename:error
Subscribe	client/interface.go	/^	Subscribe(ctx context.Context, request mcp.SubscribeRequest) error$/;"	n	interface:client.MCPClient	typeref:typename:error
SubscribeParams	mcp/types.go	/^type SubscribeParams struct {$/;"	s	package:mcp
SubscribeRequest	mcp/types.go	/^type SubscribeRequest struct {$/;"	s	package:mcp
SystemPrompt	mcp/types.go	/^	SystemPrompt     string            `json:"systemPrompt,omitempty"`$/;"	m	struct:mcp.CreateMessageParams	typeref:typename:string
Table of Contents	README.md	/^## Table of Contents$/;"	s
Temperature	mcp/types.go	/^	Temperature      float64           `json:"temperature,omitempty"`$/;"	m	struct:mcp.CreateMessageParams	typeref:typename:float64
Template	mcp/types.go	/^	*uritemplate.Template$/;"	M	struct:mcp.URITemplate	typeref:typename:*uritemplate.Template
Template	server/server.go	/^	Template mcp.ResourceTemplate$/;"	m	struct:server.ServerResourceTemplate	typeref:typename:mcp.ResourceTemplate
Terminate	server/streamable_http.go	/^	Terminate(sessionID string) (isNotAllowed bool, err error)$/;"	n	interface:server.SessionIdManager	typeref:typename:(isNotAllowed bool, err error)
Terminate	server/streamable_http.go	/^func (s *InsecureStatefulSessionIdManager) Terminate(sessionID string) (isNotAllowed bool, err e/;"	f	struct:server.InsecureStatefulSessionIdManager	typeref:typename:(isNotAllowed bool, err error)
Terminate	server/streamable_http.go	/^func (s *StatelessSessionIdManager) Terminate(sessionID string) (isNotAllowed bool, err error) {$/;"	f	struct:server.StatelessSessionIdManager	typeref:typename:(isNotAllowed bool, err error)
TestCallToolRequestBindArguments	mcp/tools_test.go	/^func TestCallToolRequestBindArguments(t *testing.T) {$/;"	f	package:mcp
TestCallToolRequestHelperFunctions	mcp/tools_test.go	/^func TestCallToolRequestHelperFunctions(t *testing.T) {$/;"	f	package:mcp
TestCallToolResultWithResourceLink	mcp/types_test.go	/^func TestCallToolResultWithResourceLink(t *testing.T) {$/;"	f	package:mcp
TestClient_HandleSamplingRequest	client/sampling_test.go	/^func TestClient_HandleSamplingRequest(t *testing.T) {$/;"	f	package:client
TestClient_Initialize_WithSampling	client/sampling_test.go	/^func TestClient_Initialize_WithSampling(t *testing.T) {$/;"	f	package:client
TestConcurrentPromptAdd	server/server_race_test.go	/^func TestConcurrentPromptAdd(t *testing.T) {$/;"	f	package:server
TestContinuousListening	client/transport/streamable_http_test.go	/^func TestContinuousListening(t *testing.T) {$/;"	f	package:transport
TestContinuousListeningMethodNotAllowed	client/transport/streamable_http_test.go	/^func TestContinuousListeningMethodNotAllowed(t *testing.T) {$/;"	f	package:transport
TestFlexibleArgumentsJSONMarshalUnmarshal	mcp/tools_test.go	/^func TestFlexibleArgumentsJSONMarshalUnmarshal(t *testing.T) {$/;"	f	package:mcp
TestFlexibleArgumentsWithMap	mcp/tools_test.go	/^func TestFlexibleArgumentsWithMap(t *testing.T) {$/;"	f	package:mcp
TestFlexibleArgumentsWithString	mcp/tools_test.go	/^func TestFlexibleArgumentsWithString(t *testing.T) {$/;"	f	package:mcp
TestFlexibleArgumentsWithStruct	mcp/tools_test.go	/^func TestFlexibleArgumentsWithStruct(t *testing.T) {$/;"	f	package:mcp
TestGenerateCodeVerifierAndChallenge	client/transport/oauth_utils_test.go	/^func TestGenerateCodeVerifierAndChallenge(t *testing.T) {$/;"	f	package:transport
TestGenerateRandomString	client/transport/oauth_utils_test.go	/^func TestGenerateRandomString(t *testing.T) {$/;"	f	package:transport
TestGenerateState	client/transport/oauth_utils_test.go	/^func TestGenerateState(t *testing.T) {$/;"	f	package:transport
TestHTTPClient	client/http_test.go	/^func TestHTTPClient(t *testing.T) {$/;"	f	package:client
TestInProcessMCPClient	client/inprocess_test.go	/^func TestInProcessMCPClient(t *testing.T) {$/;"	f	package:client
TestInProcessSampling	client/inprocess_sampling_test.go	/^func TestInProcessSampling(t *testing.T) {$/;"	f	package:client
TestIsOAuthAuthorizationRequiredError	client/oauth_test.go	/^func TestIsOAuthAuthorizationRequiredError(t *testing.T) {$/;"	f	package:client
TestMCPServer_AddSessionTool	server/session_test.go	/^func TestMCPServer_AddSessionTool(t *testing.T) {$/;"	f	package:server
TestMCPServer_AddSessionTools	server/session_test.go	/^func TestMCPServer_AddSessionTools(t *testing.T) {$/;"	f	package:server
TestMCPServer_AddSessionToolsUninitialized	server/session_test.go	/^func TestMCPServer_AddSessionToolsUninitialized(t *testing.T) {$/;"	f	package:server
TestMCPServer_CallSessionTool	server/session_test.go	/^func TestMCPServer_CallSessionTool(t *testing.T) {$/;"	f	package:server
TestMCPServer_Capabilities	server/server_test.go	/^func TestMCPServer_Capabilities(t *testing.T) {$/;"	f	package:server
TestMCPServer_DeleteSessionTools	server/session_test.go	/^func TestMCPServer_DeleteSessionTools(t *testing.T) {$/;"	f	package:server
TestMCPServer_DeleteSessionToolsUninitialized	server/session_test.go	/^func TestMCPServer_DeleteSessionToolsUninitialized(t *testing.T) {$/;"	f	package:server
TestMCPServer_HandleInvalidMessages	server/server_test.go	/^func TestMCPServer_HandleInvalidMessages(t *testing.T) {$/;"	f	package:server
TestMCPServer_HandleMethodsWithoutCapabilities	server/server_test.go	/^func TestMCPServer_HandleMethodsWithoutCapabilities(t *testing.T) {$/;"	f	package:server
TestMCPServer_HandleNotifications	server/server_test.go	/^func TestMCPServer_HandleNotifications(t *testing.T) {$/;"	f	package:server
TestMCPServer_HandlePagination	server/server_test.go	/^func TestMCPServer_HandlePagination(t *testing.T) {$/;"	f	package:server
TestMCPServer_HandleUndefinedHandlers	server/server_test.go	/^func TestMCPServer_HandleUndefinedHandlers(t *testing.T) {$/;"	f	package:server
TestMCPServer_HandleValidMessages	server/server_test.go	/^func TestMCPServer_HandleValidMessages(t *testing.T) {$/;"	f	package:server
TestMCPServer_Instructions	server/server_test.go	/^func TestMCPServer_Instructions(t *testing.T) {$/;"	f	package:server
TestMCPServer_LoggingNotificationFormat	server/session_test.go	/^func TestMCPServer_LoggingNotificationFormat(t *testing.T) {$/;"	f	package:server
TestMCPServer_LoggingWithUnsupportedSessions	server/session_test.go	/^func TestMCPServer_LoggingWithUnsupportedSessions(t *testing.T) {$/;"	f	package:server
TestMCPServer_NewMCPServer	server/server_test.go	/^func TestMCPServer_NewMCPServer(t *testing.T) {$/;"	f	package:server
TestMCPServer_NotificationChannelBlocked	server/session_test.go	/^func TestMCPServer_NotificationChannelBlocked(t *testing.T) {$/;"	f	package:server
TestMCPServer_PromptHandling	server/server_test.go	/^func TestMCPServer_PromptHandling(t *testing.T) {$/;"	f	package:server
TestMCPServer_Prompts	server/server_test.go	/^func TestMCPServer_Prompts(t *testing.T) {$/;"	f	package:server
TestMCPServer_ProtocolNegotiation	server/server_test.go	/^func TestMCPServer_ProtocolNegotiation(t *testing.T) {$/;"	f	package:server
TestMCPServer_RemoveResource	server/resource_test.go	/^func TestMCPServer_RemoveResource(t *testing.T) {$/;"	f	package:server
TestMCPServer_RequestSampling_NoSession	server/sampling_test.go	/^func TestMCPServer_RequestSampling_NoSession(t *testing.T) {$/;"	f	package:server
TestMCPServer_RequestSampling_Success	server/sampling_test.go	/^func TestMCPServer_RequestSampling_Success(t *testing.T) {$/;"	f	package:server
TestMCPServer_ResourceTemplates	server/server_test.go	/^func TestMCPServer_ResourceTemplates(t *testing.T) {$/;"	f	package:server
TestMCPServer_SendLogMessageToClient	server/session_test.go	/^func TestMCPServer_SendLogMessageToClient(t *testing.T) {$/;"	f	package:server
TestMCPServer_SendLogMessageToSpecificClient	server/session_test.go	/^func TestMCPServer_SendLogMessageToSpecificClient(t *testing.T) {$/;"	f	package:server
TestMCPServer_SendNotificationToAllClients	server/server_test.go	/^func TestMCPServer_SendNotificationToAllClients(t *testing.T) {$/;"	f	package:server
TestMCPServer_SendNotificationToClient	server/server_test.go	/^func TestMCPServer_SendNotificationToClient(t *testing.T) {$/;"	f	package:server
TestMCPServer_SendNotificationToSpecificClient	server/session_test.go	/^func TestMCPServer_SendNotificationToSpecificClient(t *testing.T) {$/;"	f	package:server
TestMCPServer_SessionHooks	server/server_test.go	/^func TestMCPServer_SessionHooks(t *testing.T) {$/;"	f	package:server
TestMCPServer_SessionHooks_NilHooks	server/server_test.go	/^func TestMCPServer_SessionHooks_NilHooks(t *testing.T) {$/;"	f	package:server
TestMCPServer_SessionToolCapabilitiesBehavior	server/session_test.go	/^func TestMCPServer_SessionToolCapabilitiesBehavior(t *testing.T) {$/;"	f	package:server
TestMCPServer_SetLevel	server/session_test.go	/^func TestMCPServer_SetLevel(t *testing.T) {$/;"	f	package:server
TestMCPServer_SetLevelNotEnabled	server/session_test.go	/^func TestMCPServer_SetLevelNotEnabled(t *testing.T) {$/;"	f	package:server
TestMCPServer_ToolCapabilitiesBehavior	server/server_test.go	/^func TestMCPServer_ToolCapabilitiesBehavior(t *testing.T) {$/;"	f	package:server
TestMCPServer_ToolFiltering	server/session_test.go	/^func TestMCPServer_ToolFiltering(t *testing.T) {$/;"	f	package:server
TestMCPServer_ToolNotificationsDisabled	server/session_test.go	/^func TestMCPServer_ToolNotificationsDisabled(t *testing.T) {$/;"	f	package:server
TestMCPServer_Tools	server/server_test.go	/^func TestMCPServer_Tools(t *testing.T) {$/;"	f	package:server
TestMCPServer_ToolsWithSessionTools	server/session_test.go	/^func TestMCPServer_ToolsWithSessionTools(t *testing.T) {$/;"	f	package:server
TestMCPServer_WithHooks	server/server_test.go	/^func TestMCPServer_WithHooks(t *testing.T) {$/;"	f	package:server
TestMCPServer_WithRecover	server/server_test.go	/^func TestMCPServer_WithRecover(t *testing.T) {$/;"	f	package:server
TestMemoryTokenStore	client/transport/oauth_test.go	/^func TestMemoryTokenStore(t *testing.T) {$/;"	f	package:transport
TestMetaMarshalling	mcp/types_test.go	/^func TestMetaMarshalling(t *testing.T) {$/;"	f	package:mcp
TestNewItemsAPICompatibility	mcp/tools_test.go	/^func TestNewItemsAPICompatibility(t *testing.T) {$/;"	f	package:mcp
TestNewOAuthStreamableHttpClient	client/oauth_test.go	/^func TestNewOAuthStreamableHttpClient(t *testing.T) {$/;"	f	package:client
TestOAuthError	client/transport/oauth_test.go	/^func TestOAuthError(t *testing.T) {$/;"	f	package:transport
TestOAuthHandler_GetAuthorizationHeader_EmptyAccessToken	client/transport/oauth_test.go	/^func TestOAuthHandler_GetAuthorizationHeader_EmptyAccessToken(t *testing.T) {$/;"	f	package:transport
TestOAuthHandler_GetServerMetadata_EmptyURL	client/transport/oauth_test.go	/^func TestOAuthHandler_GetServerMetadata_EmptyURL(t *testing.T) {$/;"	f	package:transport
TestOAuthHandler_ProcessAuthorizationResponse_StateValidation	client/transport/oauth_test.go	/^func TestOAuthHandler_ProcessAuthorizationResponse_StateValidation(t *testing.T) {$/;"	f	package:transport
TestParseToolCallToolRequest	mcp/tools_test.go	/^func TestParseToolCallToolRequest(t *testing.T) {$/;"	f	package:mcp
TestProtocolVersionHeaderSetting	client/protocol_negotiation_test.go	/^func TestProtocolVersionHeaderSetting(t *testing.T) {$/;"	f	package:client
TestProtocolVersionNegotiation	client/protocol_negotiation_test.go	/^func TestProtocolVersionNegotiation(t *testing.T) {$/;"	f	package:client
TestRaceConditions	server/server_race_test.go	/^func TestRaceConditions(t *testing.T) {$/;"	f	package:server
TestResourceLinkSerialization	mcp/types_test.go	/^func TestResourceLinkSerialization(t *testing.T) {$/;"	f	package:mcp
TestSSE	client/transport/sse_test.go	/^func TestSSE(t *testing.T) {$/;"	f	package:transport
TestSSEErrors	client/transport/sse_test.go	/^func TestSSEErrors(t *testing.T) {$/;"	f	package:transport
TestSSEMCPClient	client/sse_test.go	/^func TestSSEMCPClient(t *testing.T) {$/;"	f	package:client
TestSSEServer	server/sse_test.go	/^func TestSSEServer(t *testing.T) {$/;"	f	package:server
TestSSE_IsOAuthEnabled	client/transport/sse_oauth_test.go	/^func TestSSE_IsOAuthEnabled(t *testing.T) {$/;"	f	package:transport
TestSSE_WithOAuth	client/transport/sse_oauth_test.go	/^func TestSSE_WithOAuth(t *testing.T) {$/;"	f	package:transport
TestSSE_WithOAuth_Unauthorized	client/transport/sse_oauth_test.go	/^func TestSSE_WithOAuth_Unauthorized(t *testing.T) {$/;"	f	package:transport
TestServerWithPrompt	mcptest/mcptest_test.go	/^func TestServerWithPrompt(t *testing.T) {$/;"	f	package:mcptest_test
TestServerWithResource	mcptest/mcptest_test.go	/^func TestServerWithResource(t *testing.T) {$/;"	f	package:mcptest_test
TestServerWithResourceTemplate	mcptest/mcptest_test.go	/^func TestServerWithResourceTemplate(t *testing.T) {$/;"	f	package:mcptest_test
TestServerWithTool	mcptest/mcptest_test.go	/^func TestServerWithTool(t *testing.T) {$/;"	f	package:mcptest_test
TestSessionWithClientInfo_Integration	server/session_test.go	/^func TestSessionWithClientInfo_Integration(t *testing.T) {$/;"	f	package:server
TestSessionWithTools_Integration	server/session_test.go	/^func TestSessionWithTools_Integration(t *testing.T) {$/;"	f	package:server
TestStdio	client/transport/stdio_test.go	/^func TestStdio(t *testing.T) {$/;"	f	package:transport
TestStdioErrors	client/transport/stdio_test.go	/^func TestStdioErrors(t *testing.T) {$/;"	f	package:transport
TestStdioMCPClient	client/stdio_test.go	/^func TestStdioMCPClient(t *testing.T) {$/;"	f	package:client
TestStdioServer	server/stdio_test.go	/^func TestStdioServer(t *testing.T) {$/;"	f	package:server
TestStdio_NewStdioMCPClientWithOptions_CreatesAndStartsClient	client/stdio_test.go	/^func TestStdio_NewStdioMCPClientWithOptions_CreatesAndStartsClient(t *testing.T) {$/;"	f	package:client
TestStdio_NewStdioMCPClientWithOptions_FailsToStart	client/stdio_test.go	/^func TestStdio_NewStdioMCPClientWithOptions_FailsToStart(t *testing.T) {$/;"	f	package:client
TestStdio_NewStdioWithOptions_AppliesOptions	client/transport/stdio_test.go	/^func TestStdio_NewStdioWithOptions_AppliesOptions(t *testing.T) {$/;"	f	package:transport
TestStdio_SpawnCommand	client/transport/stdio_test.go	/^func TestStdio_SpawnCommand(t *testing.T) {$/;"	f	package:transport
TestStdio_SpawnCommand_UsesCommandFunc	client/transport/stdio_test.go	/^func TestStdio_SpawnCommand_UsesCommandFunc(t *testing.T) {$/;"	f	package:transport
TestStdio_SpawnCommand_UsesCommandFunc_Error	client/transport/stdio_test.go	/^func TestStdio_SpawnCommand_UsesCommandFunc_Error(t *testing.T) {$/;"	f	package:transport
TestStdio_WithCommandFunc	client/transport/stdio_test.go	/^func TestStdio_WithCommandFunc(t *testing.T) {$/;"	f	package:transport
TestStreamableHTTP	client/transport/streamable_http_test.go	/^func TestStreamableHTTP(t *testing.T) {$/;"	f	package:transport
TestStreamableHTTPErrors	client/transport/streamable_http_test.go	/^func TestStreamableHTTPErrors(t *testing.T) {$/;"	f	package:transport
TestStreamableHTTPServerBasic	server/streamable_http_test.go	/^func TestStreamableHTTPServerBasic(t *testing.T) {$/;"	f	package:server
TestStreamableHTTPServer_WithOptions	server/streamable_http_test.go	/^func TestStreamableHTTPServer_WithOptions(t *testing.T) {$/;"	f	package:server
TestStreamableHTTP_GET	server/streamable_http_test.go	/^func TestStreamableHTTP_GET(t *testing.T) {$/;"	f	package:server
TestStreamableHTTP_HeaderPassthrough	server/streamable_http_test.go	/^func TestStreamableHTTP_HeaderPassthrough(t *testing.T) {$/;"	f	package:server
TestStreamableHTTP_HttpHandler	server/streamable_http_test.go	/^func TestStreamableHTTP_HttpHandler(t *testing.T) {$/;"	f	package:server
TestStreamableHTTP_IsOAuthEnabled	client/transport/streamable_http_oauth_test.go	/^func TestStreamableHTTP_IsOAuthEnabled(t *testing.T) {$/;"	f	package:transport
TestStreamableHTTP_POST_InvalidContent	server/streamable_http_test.go	/^func TestStreamableHTTP_POST_InvalidContent(t *testing.T) {$/;"	f	package:server
TestStreamableHTTP_POST_SendAndReceive	server/streamable_http_test.go	/^func TestStreamableHTTP_POST_SendAndReceive(t *testing.T) {$/;"	f	package:server
TestStreamableHTTP_POST_SendAndReceive_stateless	server/streamable_http_test.go	/^func TestStreamableHTTP_POST_SendAndReceive_stateless(t *testing.T) {$/;"	f	package:server
TestStreamableHTTP_SessionWithLogging	server/streamable_http_test.go	/^func TestStreamableHTTP_SessionWithLogging(t *testing.T) {$/;"	f	package:server
TestStreamableHTTP_SessionWithTools	server/streamable_http_test.go	/^func TestStreamableHTTP_SessionWithTools(t *testing.T) {$/;"	f	package:server
TestStreamableHTTP_WithOAuth	client/transport/streamable_http_oauth_test.go	/^func TestStreamableHTTP_WithOAuth(t *testing.T) {$/;"	f	package:transport
TestStreamableHTTP_WithOAuth_Unauthorized	client/transport/streamable_http_oauth_test.go	/^func TestStreamableHTTP_WithOAuth_Unauthorized(t *testing.T) {$/;"	f	package:transport
TestToken_IsExpired	client/transport/oauth_test.go	/^func TestToken_IsExpired(t *testing.T) {$/;"	f	package:transport
TestToolWithBothSchemasError	mcp/tools_test.go	/^func TestToolWithBothSchemasError(t *testing.T) {$/;"	f	package:mcp
TestToolWithObjectAndArray	mcp/tools_test.go	/^func TestToolWithObjectAndArray(t *testing.T) {$/;"	f	package:mcp
TestToolWithRawSchema	mcp/tools_test.go	/^func TestToolWithRawSchema(t *testing.T) {$/;"	f	package:mcp
TestTypedToolHandler	mcp/typed_tools_test.go	/^func TestTypedToolHandler(t *testing.T) {$/;"	f	package:mcp
TestTypedToolHandlerWithComplexObjects	mcp/typed_tools_test.go	/^func TestTypedToolHandlerWithComplexObjects(t *testing.T) {$/;"	f	package:mcp
TestTypedToolHandlerWithValidation	mcp/typed_tools_test.go	/^func TestTypedToolHandlerWithValidation(t *testing.T) {$/;"	f	package:mcp
TestUnmarshalToolWithRawSchema	mcp/tools_test.go	/^func TestUnmarshalToolWithRawSchema(t *testing.T) {$/;"	f	package:mcp
TestUnmarshalToolWithoutRawSchema	mcp/tools_test.go	/^func TestUnmarshalToolWithoutRawSchema(t *testing.T) {$/;"	f	package:mcp
TestUnsupportedProtocolVersionError_Is	client/protocol_negotiation_test.go	/^func TestUnsupportedProtocolVersionError_Is(t *testing.T) {$/;"	f	package:client
TestValidateRedirectURI	client/transport/oauth_test.go	/^func TestValidateRedirectURI(t *testing.T) {$/;"	f	package:transport
TestWithSamplingHandler	client/sampling_test.go	/^func TestWithSamplingHandler(t *testing.T) {$/;"	f	package:client
Testing	examples/sampling_server/README.md	/^## Testing$/;"	s	chapter:MCP Sampling Example Server
Text	mcp/types.go	/^	Text string `json:"text"`$/;"	m	struct:mcp.TextContent	typeref:typename:string
Text	mcp/types.go	/^	Text string `json:"text"`$/;"	m	struct:mcp.TextResourceContents	typeref:typename:string
TextContent	mcp/types.go	/^type TextContent struct {$/;"	s	package:mcp
TextResourceContents	mcp/types.go	/^type TextResourceContents struct {$/;"	s	package:mcp
Title	mcp/tools.go	/^	Title string `json:"title,omitempty"`$/;"	m	struct:mcp.ToolAnnotation	typeref:typename:string
Title	mcp/tools.go	/^func Title(title string) PropertyOption {$/;"	f	package:mcp	typeref:typename:PropertyOption
ToBoolPtr	mcp/utils.go	/^func ToBoolPtr(b bool) *bool {$/;"	f	package:mcp	typeref:typename:*bool
ToJSONRPCError	server/server.go	/^func (e *requestError) ToJSONRPCError() mcp.JSONRPCError {$/;"	f	struct:server.requestError	typeref:typename:mcp.JSONRPCError
Token	client/oauth.go	/^type Token = transport.Token$/;"	a	package:client	typeref:typename:transport.Token
Token	client/transport/oauth.go	/^type Token struct {$/;"	s	package:transport
TokenEndpoint	client/transport/oauth.go	/^	TokenEndpoint                     string   `json:"token_endpoint"`$/;"	m	struct:transport.AuthServerMetadata	typeref:typename:string
TokenEndpointAuthMethodsSupported	client/transport/oauth.go	/^	TokenEndpointAuthMethodsSupported []string `json:"token_endpoint_auth_methods_supported,omitemp/;"	m	struct:transport.AuthServerMetadata	typeref:typename:[]string
TokenStore	client/oauth.go	/^type TokenStore = transport.TokenStore$/;"	a	package:client	typeref:typename:transport.TokenStore
TokenStore	client/transport/oauth.go	/^	TokenStore TokenStore$/;"	m	struct:transport.OAuthConfig	typeref:typename:TokenStore
TokenStore	client/transport/oauth.go	/^type TokenStore interface {$/;"	i	package:transport
TokenType	client/transport/oauth.go	/^	TokenType string `json:"token_type"`$/;"	m	struct:transport.Token	typeref:typename:string
Tool	mcp/tools.go	/^type Tool struct {$/;"	s	package:mcp
Tool	server/server.go	/^	Tool    mcp.Tool$/;"	m	struct:server.ServerTool	typeref:typename:mcp.Tool
Tool Filtering	README.md	/^#### Tool Filtering$/;"	t	subsection:Extras""Session Management
Tool Handler Middleware	README.md	/^### Tool Handler Middleware$/;"	S	section:Extras
ToolAnnotation	mcp/tools.go	/^type ToolAnnotation struct {$/;"	s	package:mcp
ToolFilterFunc	server/server.go	/^type ToolFilterFunc func(ctx context.Context, tools []mcp.Tool) []mcp.Tool$/;"	t	package:server	typeref:typename:func(ctx context.Context, tools []mcp.Tool) []mcp.Tool
ToolHandlerFunc	server/server.go	/^type ToolHandlerFunc func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult/;"	t	package:server	typeref:typename:func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error)
ToolHandlerMiddleware	server/server.go	/^type ToolHandlerMiddleware func(ToolHandlerFunc) ToolHandlerFunc$/;"	t	package:server	typeref:typename:func(ToolHandlerFunc) ToolHandlerFunc
ToolInputSchema	mcp/tools.go	/^type ToolInputSchema struct {$/;"	s	package:mcp
ToolListChangedNotification	mcp/tools.go	/^type ToolListChangedNotification struct {$/;"	s	package:mcp
ToolName	examples/everything/main.go	/^type ToolName string$/;"	t	package:main	typeref:typename:string
ToolOption	mcp/tools.go	/^type ToolOption func(*Tool)$/;"	t	package:mcp	typeref:typename:func(*Tool)
Tools	README.md	/^### Tools$/;"	S	section:Core Concepts
Tools	examples/sampling_server/README.md	/^## Tools$/;"	s	chapter:MCP Sampling Example Server
Tools	mcp/tools.go	/^	Tools []Tool `json:"tools"`$/;"	m	struct:mcp.ListToolsResult	typeref:typename:[]Tool
Tools	mcp/types.go	/^	Tools *struct {$/;"	m	struct:mcp.ServerCapabilities	typeref:typename:*struct { ListChanged bool `json:"listChanged,omitempty"`; }
Total	mcp/types.go	/^	Total float64 `json:"total,omitempty"`$/;"	m	struct:mcp.ProgressNotificationParams	typeref:typename:float64
Transports	README.md	/^### Transports$/;"	S	section:Extras
Type	mcp/tools.go	/^	Type       string         `json:"type"`$/;"	m	struct:mcp.ToolInputSchema	typeref:typename:string
Type	mcp/types.go	/^	Type     string           `json:"type"`$/;"	m	struct:mcp.EmbeddedResource	typeref:typename:string
Type	mcp/types.go	/^	Type string `json:"type"` \/\/ Must be "audio"$/;"	m	struct:mcp.AudioContent	typeref:typename:string
Type	mcp/types.go	/^	Type string `json:"type"` \/\/ Must be "image"$/;"	m	struct:mcp.ImageContent	typeref:typename:string
Type	mcp/types.go	/^	Type string `json:"type"` \/\/ Must be "resource_link"$/;"	m	struct:mcp.ResourceLink	typeref:typename:string
Type	mcp/types.go	/^	Type string `json:"type"` \/\/ Must be "text"$/;"	m	struct:mcp.TextContent	typeref:typename:string
Type	mcp/types.go	/^	Type string `json:"type"`$/;"	m	struct:mcp.PromptReference	typeref:typename:string
Type	mcp/types.go	/^	Type string `json:"type"`$/;"	m	struct:mcp.ResourceReference	typeref:typename:string
Type of Change	.github/pull_request_template.md	/^## Type of Change$/;"	s
TypedToolHandlerFunc	mcp/typed_tools.go	/^type TypedToolHandlerFunc[T any] func(ctx context.Context, request CallToolRequest, args T) (*Ca/;"	t	package:mcp	typeref:typename:[T any] func(ctx context.Context, request CallToolRequest, args T) (*CallToolResult, error)
URI	mcp/types.go	/^	URI string `json:"uri"`$/;"	m	struct:mcp.BlobResourceContents	typeref:typename:string
URI	mcp/types.go	/^	URI string `json:"uri"`$/;"	m	struct:mcp.ReadResourceParams	typeref:typename:string
URI	mcp/types.go	/^	URI string `json:"uri"`$/;"	m	struct:mcp.Resource	typeref:typename:string
URI	mcp/types.go	/^	URI string `json:"uri"`$/;"	m	struct:mcp.ResourceLink	typeref:typename:string
URI	mcp/types.go	/^	URI string `json:"uri"`$/;"	m	struct:mcp.ResourceReference	typeref:typename:string
URI	mcp/types.go	/^	URI string `json:"uri"`$/;"	m	struct:mcp.ResourceUpdatedNotificationParams	typeref:typename:string
URI	mcp/types.go	/^	URI string `json:"uri"`$/;"	m	struct:mcp.Root	typeref:typename:string
URI	mcp/types.go	/^	URI string `json:"uri"`$/;"	m	struct:mcp.SubscribeParams	typeref:typename:string
URI	mcp/types.go	/^	URI string `json:"uri"`$/;"	m	struct:mcp.TextResourceContents	typeref:typename:string
URI	mcp/types.go	/^	URI string `json:"uri"`$/;"	m	struct:mcp.UnsubscribeParams	typeref:typename:string
URITemplate	mcp/types.go	/^	URITemplate *URITemplate `json:"uriTemplate"`$/;"	m	struct:mcp.ResourceTemplate	typeref:typename:*URITemplate
URITemplate	mcp/types.go	/^type URITemplate struct {$/;"	s	package:mcp
UniqueItems	mcp/tools.go	/^func UniqueItems(unique bool) PropertyOption {$/;"	f	package:mcp	typeref:typename:PropertyOption
UnmarshalContent	mcp/types.go	/^func UnmarshalContent(data []byte) (Content, error) {$/;"	f	package:mcp	typeref:typename:(Content, error)
UnmarshalError	server/internal/gen/data.go	/^	UnmarshalError string$/;"	m	struct:main.MCPRequestType	typeref:typename:string
UnmarshalJSON	mcp/tools.go	/^func (r *CallToolResult) UnmarshalJSON(data []byte) error {$/;"	f	struct:mcp.CallToolResult	typeref:typename:error
UnmarshalJSON	mcp/types.go	/^func (m *Meta) UnmarshalJSON(data []byte) error {$/;"	f	struct:mcp.Meta	typeref:typename:error
UnmarshalJSON	mcp/types.go	/^func (p *NotificationParams) UnmarshalJSON(data []byte) error {$/;"	f	struct:mcp.NotificationParams	typeref:typename:error
UnmarshalJSON	mcp/types.go	/^func (r *RequestId) UnmarshalJSON(data []byte) error {$/;"	f	struct:mcp.RequestId	typeref:typename:error
UnmarshalJSON	mcp/types.go	/^func (t *URITemplate) UnmarshalJSON(data []byte) error {$/;"	f	struct:mcp.URITemplate	typeref:typename:error
UnparsableMessageError	server/server.go	/^type UnparsableMessageError struct {$/;"	s	package:server
UnregisterSession	server/hooks.go	/^func (c *Hooks) UnregisterSession(ctx context.Context, session ClientSession) {$/;"	f	struct:server.Hooks
UnregisterSession	server/session.go	/^func (s *MCPServer) UnregisterSession($/;"	f	unknown:server.MCPServer
Unsubscribe	client/client.go	/^func (c *Client) Unsubscribe($/;"	f	struct:client.Client	typeref:typename:error
Unsubscribe	client/interface.go	/^	Unsubscribe(ctx context.Context, request mcp.UnsubscribeRequest) error$/;"	n	interface:client.MCPClient	typeref:typename:error
UnsubscribeParams	mcp/types.go	/^type UnsubscribeParams struct {$/;"	s	package:mcp
UnsubscribeRequest	mcp/types.go	/^type UnsubscribeRequest struct {$/;"	s	package:mcp
UnsupportedProtocolVersionError	mcp/errors.go	/^type UnsupportedProtocolVersionError struct {$/;"	s	package:mcp
Unwrap	client/transport/error.go	/^func (e *Error) Unwrap() error {$/;"	f	struct:transport.Error	typeref:typename:error
Unwrap	client/transport/streamable_http.go	/^func (e *OAuthAuthorizationRequiredError) Unwrap() error {$/;"	f	struct:transport.OAuthAuthorizationRequiredError	typeref:typename:error
Unwrap	server/server.go	/^func (e *UnparsableMessageError) Unwrap() error {$/;"	f	struct:server.UnparsableMessageError	typeref:typename:error
Unwrap	server/server.go	/^func (e *requestError) Unwrap() error {$/;"	f	struct:server.requestError	typeref:typename:error
UpgradeToSSEWhenReceiveNotification	server/session.go	/^	UpgradeToSSEWhenReceiveNotification()$/;"	n	interface:server.SessionWithStreamableHTTPConfig
UpgradeToSSEWhenReceiveNotification	server/streamable_http.go	/^func (s *streamableHttpSession) UpgradeToSSEWhenReceiveNotification() {$/;"	f	struct:server.streamableHttpSession
Usage	examples/oauth_client/README.md	/^## Usage$/;"	s	chapter:OAuth Client Example
Usage	examples/sampling_client/README.md	/^## Usage$/;"	s	chapter:MCP Sampling Example Client
Usage	examples/sampling_server/README.md	/^## Usage$/;"	s	chapter:MCP Sampling Example Server
ValidProtocolVersions	mcp/types.go	/^var ValidProtocolVersions = []string{$/;"	v	package:mcp
Validate	server/streamable_http.go	/^	Validate(sessionID string) (isTerminated bool, err error)$/;"	n	interface:server.SessionIdManager	typeref:typename:(isTerminated bool, err error)
Validate	server/streamable_http.go	/^func (s *InsecureStatefulSessionIdManager) Validate(sessionID string) (isTerminated bool, err er/;"	f	struct:server.InsecureStatefulSessionIdManager	typeref:typename:(isTerminated bool, err error)
Validate	server/streamable_http.go	/^func (s *StatelessSessionIdManager) Validate(sessionID string) (isTerminated bool, err error) {$/;"	f	struct:server.StatelessSessionIdManager	typeref:typename:(isTerminated bool, err error)
ValidateRedirectURI	client/transport/oauth_utils.go	/^func ValidateRedirectURI(redirectURI string) error {$/;"	f	package:transport	typeref:typename:error
Value	mcp/types.go	/^func (r RequestId) Value() any {$/;"	f	struct:mcp.RequestId	typeref:typename:any
Version	mcp/errors.go	/^	Version string$/;"	m	struct:mcp.UnsupportedProtocolVersionError	typeref:typename:string
Version	mcp/types.go	/^	Version string `json:"version"`$/;"	m	struct:mcp.Implementation	typeref:typename:string
What is MCP?	README.md	/^## What is MCP?$/;"	s
WithAnnotations	mcp/resources.go	/^func WithAnnotations(audience []Role, priority float64) ResourceOption {$/;"	f	package:mcp	typeref:typename:ResourceOption
WithAppendQueryToMessageEndpoint	server/sse.go	/^func WithAppendQueryToMessageEndpoint() SSEOption {$/;"	f	package:server	typeref:typename:SSEOption
WithArgument	mcp/prompts.go	/^func WithArgument(name string, opts ...ArgumentOption) PromptOption {$/;"	f	package:mcp	typeref:typename:PromptOption
WithArray	mcp/tools.go	/^func WithArray(name string, opts ...PropertyOption) ToolOption {$/;"	f	package:mcp	typeref:typename:ToolOption
WithBasePath	server/sse.go	/^func WithBasePath(basePath string) SSEOption {$/;"	f	package:server	typeref:typename:SSEOption
WithBaseURL	server/sse.go	/^func WithBaseURL(baseURL string) SSEOption {$/;"	f	package:server	typeref:typename:SSEOption
WithBoolean	mcp/tools.go	/^func WithBoolean(name string, opts ...PropertyOption) ToolOption {$/;"	f	package:mcp	typeref:typename:ToolOption
WithBooleanItems	mcp/tools.go	/^func WithBooleanItems(opts ...PropertyOption) PropertyOption {$/;"	f	package:mcp	typeref:typename:PropertyOption
WithClientCapabilities	client/client.go	/^func WithClientCapabilities(capabilities mcp.ClientCapabilities) ClientOption {$/;"	f	package:client	typeref:typename:ClientOption
WithCommandFunc	client/transport/stdio.go	/^func WithCommandFunc(f CommandFunc) StdioOption {$/;"	f	package:transport	typeref:typename:StdioOption
WithContext	server/session.go	/^func (s *MCPServer) WithContext($/;"	f	unknown:server.MCPServer	typeref:typename:context.Context
WithContinuousListening	client/transport/streamable_http.go	/^func WithContinuousListening() StreamableHTTPCOption {$/;"	f	package:transport	typeref:typename:StreamableHTTPCOption
WithDescription	mcp/tools.go	/^func WithDescription(description string) ToolOption {$/;"	f	package:mcp	typeref:typename:ToolOption
WithDestructiveHintAnnotation	mcp/tools.go	/^func WithDestructiveHintAnnotation(value bool) ToolOption {$/;"	f	package:mcp	typeref:typename:ToolOption
WithDynamicBasePath	server/sse.go	/^func WithDynamicBasePath(fn DynamicBasePathFunc) SSEOption {$/;"	f	package:server	typeref:typename:SSEOption
WithEndpointPath	server/streamable_http.go	/^func WithEndpointPath(endpointPath string) StreamableHTTPOption {$/;"	f	package:server	typeref:typename:StreamableHTTPOption
WithErrorLogger	server/stdio.go	/^func WithErrorLogger(logger *log.Logger) StdioOption {$/;"	f	package:server	typeref:typename:StdioOption
WithHTTPBasicClient	client/transport/streamable_http.go	/^func WithHTTPBasicClient(client *http.Client) StreamableHTTPCOption {$/;"	f	package:transport	typeref:typename:StreamableHTTPCOption
WithHTTPClient	client/sse.go	/^func WithHTTPClient(httpClient *http.Client) transport.ClientOption {$/;"	f	package:client	typeref:typename:transport.ClientOption
WithHTTPClient	client/transport/sse.go	/^func WithHTTPClient(httpClient *http.Client) ClientOption {$/;"	f	package:transport	typeref:typename:ClientOption
WithHTTPContextFunc	server/streamable_http.go	/^func WithHTTPContextFunc(fn HTTPContextFunc) StreamableHTTPOption {$/;"	f	package:server	typeref:typename:StreamableHTTPOption
WithHTTPHeaderFunc	client/transport/streamable_http.go	/^func WithHTTPHeaderFunc(headerFunc HTTPHeaderFunc) StreamableHTTPCOption {$/;"	f	package:transport	typeref:typename:StreamableHTTPCOption
WithHTTPHeaders	client/transport/streamable_http.go	/^func WithHTTPHeaders(headers map[string]string) StreamableHTTPCOption {$/;"	f	package:transport	typeref:typename:StreamableHTTPCOption
WithHTTPOAuth	client/transport/streamable_http.go	/^func WithHTTPOAuth(config OAuthConfig) StreamableHTTPCOption {$/;"	f	package:transport	typeref:typename:StreamableHTTPCOption
WithHTTPServer	server/sse.go	/^func WithHTTPServer(srv *http.Server) SSEOption {$/;"	f	package:server	typeref:typename:SSEOption
WithHTTPTimeout	client/transport/streamable_http.go	/^func WithHTTPTimeout(timeout time.Duration) StreamableHTTPCOption {$/;"	f	package:transport	typeref:typename:StreamableHTTPCOption
WithHeaderFunc	client/sse.go	/^func WithHeaderFunc(headerFunc transport.HTTPHeaderFunc) transport.ClientOption {$/;"	f	package:client	typeref:typename:transport.ClientOption
WithHeaderFunc	client/transport/sse.go	/^func WithHeaderFunc(headerFunc HTTPHeaderFunc) ClientOption {$/;"	f	package:transport	typeref:typename:ClientOption
WithHeaders	client/sse.go	/^func WithHeaders(headers map[string]string) transport.ClientOption {$/;"	f	package:client	typeref:typename:transport.ClientOption
WithHeaders	client/transport/sse.go	/^func WithHeaders(headers map[string]string) ClientOption {$/;"	f	package:transport	typeref:typename:ClientOption
WithHeartbeatInterval	server/streamable_http.go	/^func WithHeartbeatInterval(interval time.Duration) StreamableHTTPOption {$/;"	f	package:server	typeref:typename:StreamableHTTPOption
WithHooks	server/server.go	/^func WithHooks(hooks *Hooks) ServerOption {$/;"	f	package:server	typeref:typename:ServerOption
WithIdempotentHintAnnotation	mcp/tools.go	/^func WithIdempotentHintAnnotation(value bool) ToolOption {$/;"	f	package:mcp	typeref:typename:ToolOption
WithInProcessSamplingHandler	server/sampling.go	/^func WithInProcessSamplingHandler(ctx context.Context, handler SamplingHandler) context.Context /;"	f	package:server	typeref:typename:context.Context
WithInstructions	server/server.go	/^func WithInstructions(instructions string) ServerOption {$/;"	f	package:server	typeref:typename:ServerOption
WithKeepAlive	server/sse.go	/^func WithKeepAlive(keepAlive bool) SSEOption {$/;"	f	package:server	typeref:typename:SSEOption
WithKeepAliveInterval	server/sse.go	/^func WithKeepAliveInterval(keepAliveInterval time.Duration) SSEOption {$/;"	f	package:server	typeref:typename:SSEOption
WithLogger	client/transport/streamable_http.go	/^func WithLogger(logger util.Logger) StreamableHTTPCOption {$/;"	f	package:transport	typeref:typename:StreamableHTTPCOption
WithLogger	server/streamable_http.go	/^func WithLogger(logger util.Logger) StreamableHTTPOption {$/;"	f	package:server	typeref:typename:StreamableHTTPOption
WithLogging	server/server.go	/^func WithLogging() ServerOption {$/;"	f	package:server	typeref:typename:ServerOption
WithMIMEType	mcp/resources.go	/^func WithMIMEType(mimeType string) ResourceOption {$/;"	f	package:mcp	typeref:typename:ResourceOption
WithMessageEndpoint	server/sse.go	/^func WithMessageEndpoint(endpoint string) SSEOption {$/;"	f	package:server	typeref:typename:SSEOption
WithNumber	mcp/tools.go	/^func WithNumber(name string, opts ...PropertyOption) ToolOption {$/;"	f	package:mcp	typeref:typename:ToolOption
WithNumberItems	mcp/tools.go	/^func WithNumberItems(opts ...PropertyOption) PropertyOption {$/;"	f	package:mcp	typeref:typename:PropertyOption
WithOAuth	client/transport/sse.go	/^func WithOAuth(config OAuthConfig) ClientOption {$/;"	f	package:transport	typeref:typename:ClientOption
WithObject	mcp/tools.go	/^func WithObject(name string, opts ...PropertyOption) ToolOption {$/;"	f	package:mcp	typeref:typename:ToolOption
WithOpenWorldHintAnnotation	mcp/tools.go	/^func WithOpenWorldHintAnnotation(value bool) ToolOption {$/;"	f	package:mcp	typeref:typename:ToolOption
WithPaginationLimit	server/server.go	/^func WithPaginationLimit(limit int) ServerOption {$/;"	f	package:server	typeref:typename:ServerOption
WithPromptCapabilities	server/server.go	/^func WithPromptCapabilities(listChanged bool) ServerOption {$/;"	f	package:server	typeref:typename:ServerOption
WithPromptDescription	mcp/prompts.go	/^func WithPromptDescription(description string) PromptOption {$/;"	f	package:mcp	typeref:typename:PromptOption
WithReadOnlyHintAnnotation	mcp/tools.go	/^func WithReadOnlyHintAnnotation(value bool) ToolOption {$/;"	f	package:mcp	typeref:typename:ToolOption
WithRecovery	server/server.go	/^func WithRecovery() ServerOption {$/;"	f	package:server	typeref:typename:ServerOption
WithResourceCapabilities	server/server.go	/^func WithResourceCapabilities(subscribe, listChanged bool) ServerOption {$/;"	f	package:server	typeref:typename:ServerOption
WithResourceDescription	mcp/resources.go	/^func WithResourceDescription(description string) ResourceOption {$/;"	f	package:mcp	typeref:typename:ResourceOption
WithSSEContextFunc	server/sse.go	/^func WithSSEContextFunc(fn SSEContextFunc) SSEOption {$/;"	f	package:server	typeref:typename:SSEOption
WithSSEEndpoint	server/sse.go	/^func WithSSEEndpoint(endpoint string) SSEOption {$/;"	f	package:server	typeref:typename:SSEOption
WithSamplingHandler	client/client.go	/^func WithSamplingHandler(handler SamplingHandler) ClientOption {$/;"	f	package:client	typeref:typename:ClientOption
WithSamplingHandler	client/transport/inprocess.go	/^func WithSamplingHandler(handler server.SamplingHandler) InProcessOption {$/;"	f	package:transport	typeref:typename:InProcessOption
WithSession	client/client.go	/^func WithSession() ClientOption {$/;"	f	package:client	typeref:typename:ClientOption
WithSession	client/transport/streamable_http.go	/^func WithSession(sessionID string) StreamableHTTPCOption {$/;"	f	package:transport	typeref:typename:StreamableHTTPCOption
WithSessionIdManager	server/streamable_http.go	/^func WithSessionIdManager(manager SessionIdManager) StreamableHTTPOption {$/;"	f	package:server	typeref:typename:StreamableHTTPOption
WithStateLess	server/streamable_http.go	/^func WithStateLess(stateLess bool) StreamableHTTPOption {$/;"	f	package:server	typeref:typename:StreamableHTTPOption
WithStaticBasePath	server/sse.go	/^func WithStaticBasePath(basePath string) SSEOption {$/;"	f	package:server	typeref:typename:SSEOption
WithStdioContextFunc	server/stdio.go	/^func WithStdioContextFunc(fn StdioContextFunc) StdioOption {$/;"	f	package:server	typeref:typename:StdioOption
WithStreamableHTTPServer	server/streamable_http.go	/^func WithStreamableHTTPServer(srv *http.Server) StreamableHTTPOption {$/;"	f	package:server	typeref:typename:StreamableHTTPOption
WithString	mcp/tools.go	/^func WithString(name string, opts ...PropertyOption) ToolOption {$/;"	f	package:mcp	typeref:typename:ToolOption
WithStringEnumItems	mcp/tools.go	/^func WithStringEnumItems(values []string) PropertyOption {$/;"	f	package:mcp	typeref:typename:PropertyOption
WithStringItems	mcp/tools.go	/^func WithStringItems(opts ...PropertyOption) PropertyOption {$/;"	f	package:mcp	typeref:typename:PropertyOption
WithTemplateAnnotations	mcp/resources.go	/^func WithTemplateAnnotations(audience []Role, priority float64) ResourceTemplateOption {$/;"	f	package:mcp	typeref:typename:ResourceTemplateOption
WithTemplateDescription	mcp/resources.go	/^func WithTemplateDescription(description string) ResourceTemplateOption {$/;"	f	package:mcp	typeref:typename:ResourceTemplateOption
WithTemplateMIMEType	mcp/resources.go	/^func WithTemplateMIMEType(mimeType string) ResourceTemplateOption {$/;"	f	package:mcp	typeref:typename:ResourceTemplateOption
WithTitleAnnotation	mcp/tools.go	/^func WithTitleAnnotation(title string) ToolOption {$/;"	f	package:mcp	typeref:typename:ToolOption
WithToolAnnotation	mcp/tools.go	/^func WithToolAnnotation(annotation ToolAnnotation) ToolOption {$/;"	f	package:mcp	typeref:typename:ToolOption
WithToolCapabilities	server/server.go	/^func WithToolCapabilities(listChanged bool) ServerOption {$/;"	f	package:server	typeref:typename:ServerOption
WithToolFilter	server/server.go	/^func WithToolFilter($/;"	f	package:server	typeref:typename:ServerOption
WithToolHandlerMiddleware	server/server.go	/^func WithToolHandlerMiddleware($/;"	f	package:server	typeref:typename:ServerOption
WithUseFullURLForMessageEndpoint	server/sse.go	/^func WithUseFullURLForMessageEndpoint(useFullURLForMessageEndpoint bool) SSEOption {$/;"	f	package:server	typeref:typename:SSEOption
Workflow	CONTRIBUTING.md	/^### Workflow$/;"	S	section:Contributing""Development Guidelines
Working with Context	README.md	/^#### Working with Context$/;"	t	subsection:Extras""Session Management
`ask_llm`	examples/sampling_server/README.md	/^### `ask_llm`$/;"	S	section:MCP Sampling Example Server""Tools
`greet`	examples/sampling_server/README.md	/^### `greet`$/;"	S	section:MCP Sampling Example Server""Tools
addHeaderVerificationTool	server/sse_test.go	/^func addHeaderVerificationTool(mcpServer *MCPServer) {$/;"	f	package:server
addSSETool	server/streamable_http_test.go	/^func addSSETool(mcpServer *MCPServer) {$/;"	f	package:server
afterCallTool	server/hooks.go	/^func (c *Hooks) afterCallTool(ctx context.Context, id any, message *mcp.CallToolRequest, result /;"	f	struct:server.Hooks
afterGetPrompt	server/hooks.go	/^func (c *Hooks) afterGetPrompt(ctx context.Context, id any, message *mcp.GetPromptRequest, resul/;"	f	struct:server.Hooks
afterInitialize	server/hooks.go	/^func (c *Hooks) afterInitialize(ctx context.Context, id any, message *mcp.InitializeRequest, res/;"	f	struct:server.Hooks
afterListPrompts	server/hooks.go	/^func (c *Hooks) afterListPrompts(ctx context.Context, id any, message *mcp.ListPromptsRequest, r/;"	f	struct:server.Hooks
afterListResourceTemplates	server/hooks.go	/^func (c *Hooks) afterListResourceTemplates(ctx context.Context, id any, message *mcp.ListResourc/;"	f	struct:server.Hooks
afterListResources	server/hooks.go	/^func (c *Hooks) afterListResources(ctx context.Context, id any, message *mcp.ListResourcesReques/;"	f	struct:server.Hooks
afterListTools	server/hooks.go	/^func (c *Hooks) afterListTools(ctx context.Context, id any, message *mcp.ListToolsRequest, resul/;"	f	struct:server.Hooks
afterPing	server/hooks.go	/^func (c *Hooks) afterPing(ctx context.Context, id any, message *mcp.PingRequest, result *mcp.Emp/;"	f	struct:server.Hooks
afterReadResource	server/hooks.go	/^func (c *Hooks) afterReadResource(ctx context.Context, id any, message *mcp.ReadResourceRequest,/;"	f	struct:server.Hooks
afterSetLevel	server/hooks.go	/^func (c *Hooks) afterSetLevel(ctx context.Context, id any, message *mcp.SetLevelRequest, result /;"	f	struct:server.Hooks
allowImportingTsExtensions	www/tsconfig.json	/^    "allowImportingTsExtensions": true,$/;"	b	object:compilerOptions
appendQueryToMessageEndpoint	server/sse.go	/^	appendQueryToMessageEndpoint bool$/;"	m	struct:server.SSEServer	typeref:typename:bool
args	client/transport/stdio.go	/^	args    []string$/;"	m	struct:transport.Stdio	typeref:typename:[]string
asType	mcp/utils.go	/^func asType[T any](content any) (*T, bool) {$/;"	f	package:mcp	typeref:typename:(content any) (
authFromEnv	examples/custom_context/main.go	/^func authFromEnv(ctx context.Context) context.Context {$/;"	f	package:main	typeref:typename:context.Context
authFromRequest	examples/custom_context/main.go	/^func authFromRequest(ctx context.Context, r *http.Request) context.Context {$/;"	f	package:main	typeref:typename:context.Context
authKey	examples/custom_context/main.go	/^type authKey struct{}$/;"	s	package:main
basePath	server/sse.go	/^	basePath                     string$/;"	m	struct:server.SSEServer	typeref:typename:string
baseURL	client/transport/oauth.go	/^	baseURL          string$/;"	m	struct:transport.OAuthHandler	typeref:typename:string
baseURL	client/transport/sse.go	/^	baseURL        *url.URL$/;"	m	struct:transport.SSE	typeref:typename:*url.URL
baseURL	server/sse.go	/^	baseURL                      string$/;"	m	struct:server.SSEServer	typeref:typename:string
beforeAny	server/hooks.go	/^func (c *Hooks) beforeAny(ctx context.Context, id any, method mcp.MCPMethod, message any) {$/;"	f	struct:server.Hooks
beforeCallTool	server/hooks.go	/^func (c *Hooks) beforeCallTool(ctx context.Context, id any, message *mcp.CallToolRequest) {$/;"	f	struct:server.Hooks
beforeGetPrompt	server/hooks.go	/^func (c *Hooks) beforeGetPrompt(ctx context.Context, id any, message *mcp.GetPromptRequest) {$/;"	f	struct:server.Hooks
beforeInitialize	server/hooks.go	/^func (c *Hooks) beforeInitialize(ctx context.Context, id any, message *mcp.InitializeRequest) {$/;"	f	struct:server.Hooks
beforeListPrompts	server/hooks.go	/^func (c *Hooks) beforeListPrompts(ctx context.Context, id any, message *mcp.ListPromptsRequest) /;"	f	struct:server.Hooks
beforeListResourceTemplates	server/hooks.go	/^func (c *Hooks) beforeListResourceTemplates(ctx context.Context, id any, message *mcp.ListResour/;"	f	struct:server.Hooks
beforeListResources	server/hooks.go	/^func (c *Hooks) beforeListResources(ctx context.Context, id any, message *mcp.ListResourcesReque/;"	f	struct:server.Hooks
beforeListTools	server/hooks.go	/^func (c *Hooks) beforeListTools(ctx context.Context, id any, message *mcp.ListToolsRequest) {$/;"	f	struct:server.Hooks
beforePing	server/hooks.go	/^func (c *Hooks) beforePing(ctx context.Context, id any, message *mcp.PingRequest) {$/;"	f	struct:server.Hooks
beforeReadResource	server/hooks.go	/^func (c *Hooks) beforeReadResource(ctx context.Context, id any, message *mcp.ReadResourceRequest/;"	f	struct:server.Hooks
beforeSetLevel	server/hooks.go	/^func (c *Hooks) beforeSetLevel(ctx context.Context, id any, message *mcp.SetLevelRequest) {$/;"	f	struct:server.Hooks
build	www/package.json	/^    "build": "vocs build",$/;"	s	object:scripts
buildLogNotification	server/session.go	/^func (s *MCPServer) buildLogNotification(notification mcp.LoggingMessageNotification) mcp.JSONRP/;"	f	unknown:server.MCPServer	typeref:typename:mcp.JSONRPCNotification
cancel	mcptest/mcptest.go	/^	cancel func()$/;"	m	struct:mcptest.Server	typeref:typename:func()
cancelSSEStream	client/transport/sse.go	/^	cancelSSEStream context.CancelFunc$/;"	m	struct:transport.SSE	typeref:typename:context.CancelFunc
capabilities	server/server.go	/^	capabilities           serverCapabilities$/;"	m	struct:server.MCPServer	typeref:typename:serverCapabilities
capabilitiesMu	server/server.go	/^	capabilitiesMu         sync.RWMutex$/;"	m	struct:server.MCPServer	typeref:typename:sync.RWMutex
client	client/client.go	/^package client$/;"	p
client	client/http.go	/^package client$/;"	p
client	client/http_test.go	/^package client$/;"	p
client	client/inprocess.go	/^package client$/;"	p
client	client/inprocess_sampling_test.go	/^package client$/;"	p
client	client/inprocess_test.go	/^package client$/;"	p
client	client/interface.go	/^package client$/;"	p
client	client/oauth.go	/^package client$/;"	p
client	client/oauth_test.go	/^package client$/;"	p
client	client/protocol_negotiation_test.go	/^package client$/;"	p
client	client/sampling.go	/^package client$/;"	p
client	client/sampling_test.go	/^package client$/;"	p
client	client/sse.go	/^package client$/;"	p
client	client/sse_test.go	/^package client$/;"	p
client	client/stdio.go	/^package client$/;"	p
client	client/stdio_test.go	/^package client$/;"	p
client	examples/in_process/main.go	/^	client     *client.Client$/;"	m	struct:main.MCPClient	typeref:typename:*client.Client
client	mcptest/mcptest.go	/^	client    *client.Client$/;"	m	struct:mcptest.Server	typeref:typename:*client.Client
clientCapabilities	client/client.go	/^	clientCapabilities mcp.ClientCapabilities$/;"	m	struct:client.Client	typeref:typename:mcp.ClientCapabilities
clientCapabilities	server/inprocess_session.go	/^	clientCapabilities atomic.Value$/;"	m	struct:server.InProcessSession	typeref:typename:atomic.Value
clientCapabilities	server/session_test.go	/^	clientCapabilities  atomic.Value$/;"	m	struct:server.sessionTestClientWithClientInfo	typeref:typename:atomic.Value
clientCapabilities	server/sse.go	/^	clientCapabilities  atomic.Value \/\/ stores session-specific client capabilities$/;"	m	struct:server.sseSession	typeref:typename:atomic.Value
clientCapabilities	server/stdio.go	/^	clientCapabilities atomic.Value                     \/\/ stores session-specific client capabil/;"	m	struct:server.stdioSession	typeref:typename:atomic.Value
clientInfo	server/inprocess_session.go	/^	clientInfo         atomic.Value$/;"	m	struct:server.InProcessSession	typeref:typename:atomic.Value
clientInfo	server/session_test.go	/^	clientInfo          atomic.Value$/;"	m	struct:server.sessionTestClientWithClientInfo	typeref:typename:atomic.Value
clientInfo	server/sse.go	/^	clientInfo          atomic.Value \/\/ stores session-specific client info$/;"	m	struct:server.sseSession	typeref:typename:atomic.Value
clientInfo	server/stdio.go	/^	clientInfo         atomic.Value                     \/\/ stores session-specific client info$/;"	m	struct:server.stdioSession	typeref:typename:atomic.Value
clientReader	mcptest/mcptest.go	/^	clientReader *io.PipeReader$/;"	m	struct:mcptest.Server	typeref:typename:*io.PipeReader
clientSessionKey	server/session.go	/^type clientSessionKey struct{}$/;"	s	package:server
clientWriter	mcptest/mcptest.go	/^	clientWriter *io.PipeWriter$/;"	m	struct:mcptest.Server	typeref:typename:*io.PipeWriter
closed	client/protocol_negotiation_test.go	/^	closed              bool$/;"	m	struct:client.mockProtocolTransport	typeref:typename:bool
closed	client/transport/sse.go	/^	closed          atomic.Bool$/;"	m	struct:transport.SSE	typeref:typename:atomic.Bool
closed	client/transport/streamable_http.go	/^	closed chan struct{}$/;"	m	struct:transport.StreamableHTTP	typeref:typename:chan struct{}
cmd	client/transport/stdio.go	/^	cmd            *exec.Cmd$/;"	m	struct:transport.Stdio	typeref:typename:*exec.Cmd
cmdFunc	client/transport/stdio.go	/^	cmdFunc        CommandFunc$/;"	m	struct:transport.Stdio	typeref:typename:CommandFunc
code	server/server.go	/^	code int$/;"	m	struct:server.requestError	typeref:typename:int
command	client/transport/stdio.go	/^	command string$/;"	m	struct:transport.Stdio	typeref:typename:string
compileTestServer	client/stdio_test.go	/^func compileTestServer(outputPath string) error {$/;"	f	package:client	typeref:typename:error
compileTestServer	client/transport/stdio_test.go	/^func compileTestServer(outputPath string) error {$/;"	f	package:transport	typeref:typename:error
compilerOptions	www/tsconfig.json	/^  "compilerOptions": {$/;"	o
config	client/transport/oauth.go	/^	config           OAuthConfig$/;"	m	struct:transport.OAuthHandler	typeref:typename:OAuthConfig
contextAwareOfClientClose	client/transport/streamable_http.go	/^func (c *StreamableHTTP) contextAwareOfClientClose(ctx context.Context) (context.Context, contex/;"	f	struct:transport.StreamableHTTP	typeref:typename:(context.Context, context.CancelFunc)
contextFunc	server/sse.go	/^	contextFunc                  SSEContextFunc$/;"	m	struct:server.SSEServer	typeref:typename:SSEContextFunc
contextFunc	server/stdio.go	/^	contextFunc StdioContextFunc$/;"	m	struct:server.StdioServer	typeref:typename:StdioContextFunc
contextFunc	server/streamable_http.go	/^	contextFunc             HTTPContextFunc$/;"	m	struct:server.StreamableHTTPServer	typeref:typename:HTTPContextFunc
contextKey	client/sse_test.go	/^type contextKey string$/;"	t	package:client	typeref:typename:string
contextKey	server/ctx.go	/^type contextKey int$/;"	t	package:server	typeref:typename:int
createErrorResponse	server/server.go	/^func createErrorResponse($/;"	f	package:server	typeref:typename:mcp.JSONRPCMessage
createGETConnectionToServer	client/transport/streamable_http.go	/^func (c *StreamableHTTP) createGETConnectionToServer(ctx context.Context) error {$/;"	f	struct:transport.StreamableHTTP	typeref:typename:error
createResponse	server/server.go	/^func createResponse(id any, result any) mcp.JSONRPCMessage {$/;"	f	package:server	typeref:typename:mcp.JSONRPCMessage
createTestServer	server/server_test.go	/^func createTestServer() *MCPServer {$/;"	f	package:server	typeref:typename:*MCPServer
ctx	client/transport/stdio.go	/^	ctx            context.Context$/;"	m	struct:transport.Stdio	typeref:typename:context.Context
ctxMu	client/transport/stdio.go	/^	ctxMu          sync.RWMutex$/;"	m	struct:transport.Stdio	typeref:typename:sync.RWMutex
data	client/http_test.go	/^	data map[string]int$/;"	m	struct:client.SafeMap	typeref:typename:map[string]int
delete	server/streamable_http.go	/^func (s *sessionLogLevelsStore) delete(sessionID string) {$/;"	f	struct:server.sessionLogLevelsStore
delete	server/streamable_http.go	/^func (s *sessionToolsStore) delete(sessionID string) {$/;"	f	struct:server.sessionToolsStore
dependencies	www/package.json	/^  "dependencies": {$/;"	o
dev	www/package.json	/^    "dev": "vocs dev",$/;"	s	object:scripts
devDependencies	www/package.json	/^  "devDependencies": {$/;"	o
done	client/transport/stdio.go	/^	done           chan struct{}$/;"	m	struct:transport.Stdio	typeref:typename:chan struct{}
done	server/sse.go	/^	done                chan struct{}$/;"	m	struct:server.sseSession	typeref:typename:chan struct{}
dynamicBasePathFunc	server/sse.go	/^	dynamicBasePathFunc          DynamicBasePathFunc$/;"	m	struct:server.SSEServer	typeref:typename:DynamicBasePathFunc
endpoint	client/transport/sse.go	/^	endpoint       *url.URL$/;"	m	struct:transport.SSE	typeref:typename:*url.URL
endpointChan	client/transport/sse.go	/^	endpointChan   chan struct{}$/;"	m	struct:transport.SSE	typeref:typename:chan struct{}
endpointPath	server/streamable_http.go	/^	endpointPath            string$/;"	m	struct:server.StreamableHTTPServer	typeref:typename:string
env	client/transport/stdio.go	/^	env     []string$/;"	m	struct:transport.Stdio	typeref:typename:[]string
err	client/sampling_test.go	/^	err    error$/;"	m	struct:client.mockSamplingHandler	typeref:typename:error
err	server/sampling_test.go	/^	err    error$/;"	m	struct:server.mockSamplingSession	typeref:typename:error
err	server/server.go	/^	err     error$/;"	m	struct:server.UnparsableMessageError	typeref:typename:error
err	server/server.go	/^	err  error$/;"	m	struct:server.requestError	typeref:typename:error
err	server/stdio.go	/^	err    error$/;"	m	struct:server.samplingResponse	typeref:typename:error
errLogger	server/stdio.go	/^	errLogger   *log.Logger$/;"	m	struct:server.StdioServer	typeref:typename:*log.Logger
errToolSchemaConflict	mcp/tools.go	/^var errToolSchemaConflict = errors.New("provide either InputSchema or RawInputSchema, not both")$/;"	v	package:mcp
eventQueue	server/sse.go	/^	eventQueue          chan string \/\/ Channel for queuing events$/;"	m	struct:server.sseSession	typeref:typename:chan string
expectedState	client/transport/oauth.go	/^	expectedState    string \/\/ Expected state value for CSRF protection$/;"	m	struct:transport.OAuthHandler	typeref:typename:string
extractBaseURL	client/transport/oauth.go	/^func (h *OAuthHandler) extractBaseURL() (string, error) {$/;"	f	struct:transport.OAuthHandler	typeref:typename:(string, error)
extractOAuthError	client/transport/oauth.go	/^func extractOAuthError(body []byte, statusCode int, context string) error {$/;"	f	package:transport	typeref:typename:error
fakeSession	server/server_test.go	/^type fakeSession struct {$/;"	s	package:server
fetchMetadataFromURL	client/transport/oauth.go	/^func (h *OAuthHandler) fetchMetadataFromURL(ctx context.Context, metadataURL string) {$/;"	f	struct:transport.OAuthHandler
generateResources	examples/everything/main.go	/^func generateResources() []mcp.Resource {$/;"	f	package:main	typeref:typename:[]mcp.Resource
get	server/streamable_http.go	/^func (s *sessionLogLevelsStore) get(sessionID string) mcp.LoggingLevel {$/;"	f	struct:server.sessionLogLevelsStore	typeref:typename:mcp.LoggingLevel
get	server/streamable_http.go	/^func (s *sessionToolsStore) get(sessionID string) map[string]ServerTool {$/;"	f	struct:server.sessionToolsStore	typeref:typename:map[string]ServerTool
getDefaultEndpoints	client/transport/oauth.go	/^func (h *OAuthHandler) getDefaultEndpoints(baseURL string) (*AuthServerMetadata, error) {$/;"	f	struct:transport.OAuthHandler	typeref:typename:(*AuthServerMetadata, error)
getListeningEnabled	client/transport/streamable_http.go	/^	getListeningEnabled bool$/;"	m	struct:transport.StreamableHTTP	typeref:typename:bool
getServerMetadata	client/transport/oauth.go	/^func (h *OAuthHandler) getServerMetadata(ctx context.Context) (*AuthServerMetadata, error) {$/;"	f	struct:transport.OAuthHandler	typeref:typename:(*AuthServerMetadata, error)
getTextFromContent	examples/sampling_server/main.go	/^func getTextFromContent(content interface{}) string {$/;"	f	package:main	typeref:typename:string
getTools	server/server_test.go	/^func getTools(length int) []mcp.Tool {$/;"	f	package:server	typeref:typename:[]mcp.Tool
getValidToken	client/transport/oauth.go	/^func (h *OAuthHandler) getValidToken(ctx context.Context) (*Token, error) {$/;"	f	struct:transport.OAuthHandler	typeref:typename:(*Token, error)
handleAddTool	examples/everything/main.go	/^func handleAddTool($/;"	f	package:main	typeref:typename:(*mcp.CallToolResult, error)
handleComplexPrompt	examples/everything/main.go	/^func handleComplexPrompt($/;"	f	package:main	typeref:typename:(*mcp.GetPromptResult, error)
handleDelete	server/streamable_http.go	/^func (s *StreamableHTTPServer) handleDelete(w http.ResponseWriter, r *http.Request) {$/;"	f	struct:server.StreamableHTTPServer
handleDummyTool	examples/in_process/main.go	/^func handleDummyTool($/;"	f	package:main	typeref:typename:(*mcp.CallToolResult, error)
handleEchoTool	examples/everything/main.go	/^func handleEchoTool($/;"	f	package:main	typeref:typename:(*mcp.CallToolResult, error)
handleGeneratedResource	examples/everything/main.go	/^func handleGeneratedResource($/;"	f	package:main	typeref:typename:([]mcp.ResourceContents, error)
handleGet	server/streamable_http.go	/^func (s *StreamableHTTPServer) handleGet(w http.ResponseWriter, r *http.Request) {$/;"	f	struct:server.StreamableHTTPServer
handleGetPrompt	server/server.go	/^func (s *MCPServer) handleGetPrompt($/;"	f	struct:server.MCPServer	typeref:typename:(*mcp.GetPromptResult, *requestError)
handleGetResourceLinkTool	examples/everything/main.go	/^func handleGetResourceLinkTool($/;"	f	package:main	typeref:typename:(*mcp.CallToolResult, error)
handleGetTinyImageTool	examples/everything/main.go	/^func handleGetTinyImageTool($/;"	f	package:main	typeref:typename:(*mcp.CallToolResult, error)
handleIncomingRequest	client/client.go	/^func (c *Client) handleIncomingRequest(ctx context.Context, request transport.JSONRPCRequest) (*/;"	f	struct:client.Client	typeref:typename:(*transport.JSONRPCResponse, error)
handleIncomingRequest	client/transport/stdio.go	/^func (c *Stdio) handleIncomingRequest(request JSONRPCRequest) {$/;"	f	struct:transport.Stdio
handleInitialize	server/server.go	/^func (s *MCPServer) handleInitialize($/;"	f	struct:server.MCPServer	typeref:typename:(*mcp.InitializeResult, *requestError)
handleListPrompts	server/server.go	/^func (s *MCPServer) handleListPrompts($/;"	f	struct:server.MCPServer	typeref:typename:(*mcp.ListPromptsResult, *requestError)
handleListResourceTemplates	server/server.go	/^func (s *MCPServer) handleListResourceTemplates($/;"	f	struct:server.MCPServer	typeref:typename:(*mcp.ListResourceTemplatesResult, *requestError)
handleListResources	server/server.go	/^func (s *MCPServer) handleListResources($/;"	f	struct:server.MCPServer	typeref:typename:(*mcp.ListResourcesResult, *requestError)
handleListTools	server/server.go	/^func (s *MCPServer) handleListTools($/;"	f	struct:server.MCPServer	typeref:typename:(*mcp.ListToolsResult, *requestError)
handleLongRunningOperationTool	examples/everything/main.go	/^func handleLongRunningOperationTool($/;"	f	package:main	typeref:typename:(*mcp.CallToolResult, error)
handleMakeAuthenticatedRequestTool	examples/custom_context/main.go	/^func handleMakeAuthenticatedRequestTool($/;"	f	package:main	typeref:typename:(*mcp.CallToolResult, error)
handleMessage	server/sse.go	/^func (s *SSEServer) handleMessage(w http.ResponseWriter, r *http.Request) {$/;"	f	struct:server.SSEServer
handleNotification	examples/everything/main.go	/^func handleNotification($/;"	f	package:main
handleNotification	server/server.go	/^func (s *MCPServer) handleNotification($/;"	f	struct:server.MCPServer	typeref:typename:mcp.JSONRPCMessage
handleNotifications	server/stdio.go	/^func (s *StdioServer) handleNotifications(ctx context.Context, stdout io.Writer) {$/;"	f	struct:server.StdioServer
handlePing	server/server.go	/^func (s *MCPServer) handlePing($/;"	f	struct:server.MCPServer	typeref:typename:(*mcp.EmptyResult, *requestError)
handlePost	server/streamable_http.go	/^func (s *StreamableHTTPServer) handlePost(w http.ResponseWriter, r *http.Request) {$/;"	f	struct:server.StreamableHTTPServer
handleReadResource	examples/everything/main.go	/^func handleReadResource($/;"	f	package:main	typeref:typename:([]mcp.ResourceContents, error)
handleReadResource	server/server.go	/^func (s *MCPServer) handleReadResource($/;"	f	struct:server.MCPServer	typeref:typename:(*mcp.ReadResourceResult, *requestError)
handleRequest	testdata/mockstdio_server.go	/^func handleRequest(request JSONRPCRequest) JSONRPCResponse {$/;"	f	package:main	typeref:typename:JSONRPCResponse
handleResourceTemplate	examples/everything/main.go	/^func handleResourceTemplate($/;"	f	package:main	typeref:typename:([]mcp.ResourceContents, error)
handleSSE	server/sse.go	/^func (s *SSEServer) handleSSE(w http.ResponseWriter, r *http.Request) {$/;"	f	struct:server.SSEServer
handleSSEEvent	client/transport/sse.go	/^func (c *SSE) handleSSEEvent(event, data string) {$/;"	f	struct:transport.SSE
handleSSEResponse	client/transport/streamable_http.go	/^func (c *StreamableHTTP) handleSSEResponse(ctx context.Context, reader io.ReadCloser, ignoreResp/;"	f	struct:transport.StreamableHTTP	typeref:typename:(*JSONRPCResponse, error)
handleSamplingRequestTransport	client/client.go	/^func (c *Client) handleSamplingRequestTransport(ctx context.Context, request transport.JSONRPCRe/;"	f	struct:client.Client	typeref:typename:(*transport.JSONRPCResponse, error)
handleSamplingResponse	server/stdio.go	/^func (s *StdioServer) handleSamplingResponse(rawMessage json.RawMessage) bool {$/;"	f	struct:server.StdioServer	typeref:typename:bool
handleSamplingResponse	server/stdio.go	/^func (s *stdioSession) handleSamplingResponse(rawMessage json.RawMessage) bool {$/;"	f	struct:server.stdioSession	typeref:typename:bool
handleSendNotification	examples/everything/main.go	/^func handleSendNotification($/;"	f	package:main	typeref:typename:(*mcp.CallToolResult, error)
handleSetLevel	server/server.go	/^func (s *MCPServer) handleSetLevel($/;"	f	struct:server.MCPServer	typeref:typename:(*mcp.EmptyResult, *requestError)
handleSimplePrompt	examples/everything/main.go	/^func handleSimplePrompt($/;"	f	package:main	typeref:typename:(*mcp.GetPromptResult, error)
handleToolCall	server/server.go	/^func (s *MCPServer) handleToolCall($/;"	f	struct:server.MCPServer	typeref:typename:(*mcp.CallToolResult, *requestError)
handler	client/inprocess.go	/^	handler SamplingHandler$/;"	m	struct:client.inProcessSamplingHandlerWrapper	typeref:typename:SamplingHandler
handler	server/server.go	/^	handler  ResourceHandlerFunc$/;"	m	struct:server.resourceEntry	typeref:typename:ResourceHandlerFunc
handler	server/server.go	/^	handler  ResourceTemplateHandlerFunc$/;"	m	struct:server.resourceTemplateEntry	typeref:typename:ResourceTemplateHandlerFunc
headerFunc	client/transport/sse.go	/^	headerFunc     HTTPHeaderFunc$/;"	m	struct:transport.SSE	typeref:typename:HTTPHeaderFunc
headerFunc	client/transport/streamable_http.go	/^	headerFunc          HTTPHeaderFunc$/;"	m	struct:transport.StreamableHTTP	typeref:typename:HTTPHeaderFunc
headers	client/transport/sse.go	/^	headers        map[string]string$/;"	m	struct:transport.SSE	typeref:typename:map[string]string
headers	client/transport/streamable_http.go	/^	headers             map[string]string$/;"	m	struct:transport.StreamableHTTP	typeref:typename:map[string]string
helloWorldHandler	mcptest/mcptest_test.go	/^func helloWorldHandler(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, e/;"	f	package:mcptest_test	typeref:typename:(*mcp.CallToolResult, error)
hooks	server/server.go	/^	hooks                  *Hooks$/;"	m	struct:server.MCPServer	typeref:typename:*Hooks
hooksTemplate	server/internal/gen/main.go	/^var hooksTemplate string$/;"	v	package:main	typeref:typename:string
httpClient	client/transport/oauth.go	/^	httpClient       *http.Client$/;"	m	struct:transport.OAuthHandler	typeref:typename:*http.Client
httpClient	client/transport/sse.go	/^	httpClient     *http.Client$/;"	m	struct:transport.SSE	typeref:typename:*http.Client
httpClient	client/transport/streamable_http.go	/^	httpClient          *http.Client$/;"	m	struct:transport.StreamableHTTP	typeref:typename:*http.Client
httpServer	server/streamable_http.go	/^	httpServer *http.Server$/;"	m	struct:server.StreamableHTTPServer	typeref:typename:*http.Server
id	server/server.go	/^	id   any$/;"	m	struct:server.requestError	typeref:typename:any
idPrefix	server/streamable_http.go	/^const idPrefix = "mcp-session-"$/;"	c	package:server
implicitlyRegisterCapabilities	server/server.go	/^func (s *MCPServer) implicitlyRegisterCapabilities(check func() bool, register func()) {$/;"	f	struct:server.MCPServer
implicitlyRegisterPromptCapabilities	server/server.go	/^func (s *MCPServer) implicitlyRegisterPromptCapabilities() {$/;"	f	struct:server.MCPServer
implicitlyRegisterResourceCapabilities	server/server.go	/^func (s *MCPServer) implicitlyRegisterResourceCapabilities() {$/;"	f	struct:server.MCPServer
implicitlyRegisterToolCapabilities	server/server.go	/^func (s *MCPServer) implicitlyRegisterToolCapabilities() {$/;"	f	struct:server.MCPServer
inProcessSamplingHandlerKey	server/sampling.go	/^type inProcessSamplingHandlerKey struct{}$/;"	s	package:server
inProcessSamplingHandlerWrapper	client/inprocess.go	/^type inProcessSamplingHandlerWrapper struct {$/;"	s	package:client
include	www/tsconfig.json	/^  "include": ["**\/*.ts", "**\/*.tsx"]$/;"	a
initRequest	server/streamable_http_test.go	/^var initRequest = map[string]any{$/;"	v	package:server
initialized	client/client.go	/^	initialized        bool$/;"	m	struct:client.Client	typeref:typename:bool
initialized	client/transport/streamable_http.go	/^	initialized     chan struct{}$/;"	m	struct:transport.StreamableHTTP	typeref:typename:chan struct{}
initialized	server/inprocess_session.go	/^	initialized        atomic.Bool$/;"	m	struct:server.InProcessSession	typeref:typename:atomic.Bool
initialized	server/server_test.go	/^	initialized         bool$/;"	m	struct:server.fakeSession	typeref:typename:bool
initialized	server/session_test.go	/^	initialized         bool$/;"	m	struct:server.sessionTestClient	typeref:typename:bool
initialized	server/session_test.go	/^	initialized         bool$/;"	m	struct:server.sessionTestClientWithClientInfo	typeref:typename:bool
initialized	server/session_test.go	/^	initialized         bool$/;"	m	struct:server.sessionTestClientWithLogging	typeref:typename:bool
initialized	server/session_test.go	/^	initialized         bool$/;"	m	struct:server.sessionTestClientWithTools	typeref:typename:bool
initialized	server/sse.go	/^	initialized         atomic.Bool$/;"	m	struct:server.sseSession	typeref:typename:atomic.Bool
initialized	server/stdio.go	/^	initialized        atomic.Bool$/;"	m	struct:server.stdioSession	typeref:typename:atomic.Bool
initializedOnce	client/transport/streamable_http.go	/^	initializedOnce sync.Once$/;"	m	struct:transport.StreamableHTTP	typeref:typename:sync.Once
instructions	server/server.go	/^	instructions           string$/;"	m	struct:server.MCPServer	typeref:typename:string
isContent	mcp/types.go	/^	isContent()$/;"	n	interface:mcp.Content
isContent	mcp/types.go	/^func (AudioContent) isContent() {}$/;"	f	struct:mcp.AudioContent
isContent	mcp/types.go	/^func (EmbeddedResource) isContent() {}$/;"	f	struct:mcp.EmbeddedResource
isContent	mcp/types.go	/^func (ImageContent) isContent() {}$/;"	f	struct:mcp.ImageContent
isContent	mcp/types.go	/^func (ResourceLink) isContent() {}$/;"	f	struct:mcp.ResourceLink
isContent	mcp/types.go	/^func (TextContent) isContent() {}$/;"	f	struct:mcp.TextContent
isResourceContents	mcp/types.go	/^	isResourceContents()$/;"	n	interface:mcp.ResourceContents
isResourceContents	mcp/types.go	/^func (BlobResourceContents) isResourceContents() {}$/;"	f	struct:mcp.BlobResourceContents
isResourceContents	mcp/types.go	/^func (TextResourceContents) isResourceContents() {}$/;"	f	struct:mcp.TextResourceContents
isolatedModules	www/tsconfig.json	/^    "isolatedModules": true,$/;"	b	object:compilerOptions
jsonRPCResponse	server/streamable_http_test.go	/^type jsonRPCResponse struct {$/;"	s	package:server
jsx	www/tsconfig.json	/^    "jsx": "react-jsx",$/;"	s	object:compilerOptions
keepAlive	server/sse.go	/^	keepAlive         bool$/;"	m	struct:server.SSEServer	typeref:typename:bool
keepAliveInterval	server/sse.go	/^	keepAliveInterval time.Duration$/;"	m	struct:server.SSEServer	typeref:typename:time.Duration
levelToInt	mcp/types.go	/^var levelToInt = map[LoggingLevel]int{$/;"	v	package:mcp
lib	www/tsconfig.json	/^    "lib": ["ES2020", "DOM", "DOM.Iterable"],$/;"	a	object:compilerOptions
listByPage	client/client.go	/^func listByPage[T any]($/;"	f	package:client	typeref:typename:(ctx context.Context, client *Client, request mcp.PaginatedRequest, method string,) (
listByPagination	server/server.go	/^func listByPagination[T mcp.Named]($/;"	f	package:server	typeref:typename:(_ context.Context, s *MCPServer, cursor mcp.Cursor, allElements []T,) (
listByPaginationForReflect	server/server_test.go	/^func listByPaginationForReflect[T any]($/;"	f	package:server	typeref:typename:(_ context.Context, s *MCPServer, cursor mcp.Cursor, allElements []T,) (
listChanged	server/server.go	/^	listChanged bool$/;"	m	struct:server.promptCapabilities	typeref:typename:bool
listChanged	server/server.go	/^	listChanged bool$/;"	m	struct:server.resourceCapabilities	typeref:typename:bool
listChanged	server/server.go	/^	listChanged bool$/;"	m	struct:server.toolCapabilities	typeref:typename:bool
listenForever	client/transport/streamable_http.go	/^func (c *StreamableHTTP) listenForever(ctx context.Context) {$/;"	f	struct:transport.StreamableHTTP
listenHeartbeatInterval	server/streamable_http.go	/^	listenHeartbeatInterval time.Duration$/;"	m	struct:server.StreamableHTTPServer	typeref:typename:time.Duration
logBuffer	mcptest/mcptest.go	/^	logBuffer bytes.Buffer$/;"	m	struct:mcptest.Server	typeref:typename:bytes.Buffer
logChan	client/transport/streamable_http_test.go	/^	logChan chan string$/;"	m	struct:transport.testLogger	typeref:typename:chan string
logLevels	server/streamable_http.go	/^	logLevels           *sessionLogLevelsStore$/;"	m	struct:server.streamableHttpSession	typeref:typename:*sessionLogLevelsStore
logger	client/transport/streamable_http.go	/^	logger              util.Logger$/;"	m	struct:transport.StreamableHTTP	typeref:typename:util.Logger
logger	server/streamable_http.go	/^	logger                  util.Logger$/;"	m	struct:server.StreamableHTTPServer	typeref:typename:util.Logger
logger	util/logger.go	/^	logger *log.Logger$/;"	m	struct:util.stdLogger	typeref:typename:*log.Logger
logging	server/server.go	/^	logging   *bool$/;"	m	struct:server.serverCapabilities	typeref:typename:*bool
loggingLevel	server/inprocess_session.go	/^	loggingLevel       atomic.Value$/;"	m	struct:server.InProcessSession	typeref:typename:atomic.Value
loggingLevel	server/session_test.go	/^	loggingLevel        atomic.Value$/;"	m	struct:server.sessionTestClientWithLogging	typeref:typename:atomic.Value
loggingLevel	server/sse.go	/^	loggingLevel        atomic.Value$/;"	m	struct:server.sseSession	typeref:typename:atomic.Value
loggingLevel	server/stdio.go	/^	loggingLevel       atomic.Value$/;"	m	struct:server.stdioSession	typeref:typename:atomic.Value
logs	server/streamable_http.go	/^	logs map[string]mcp.LoggingLevel$/;"	m	struct:server.sessionLogLevelsStore	typeref:typename:map[string]mcp.LoggingLevel
main	examples/custom_context/main.go	/^func main() {$/;"	f	package:main
main	examples/custom_context/main.go	/^package main$/;"	p
main	examples/dynamic_path/main.go	/^func main() {$/;"	f	package:main
main	examples/dynamic_path/main.go	/^package main$/;"	p
main	examples/everything/main.go	/^func main() {$/;"	f	package:main
main	examples/everything/main.go	/^package main$/;"	p
main	examples/filesystem_stdio_client/main.go	/^func main() {$/;"	f	package:main
main	examples/filesystem_stdio_client/main.go	/^package main$/;"	p
main	examples/in_process/main.go	/^func main() {$/;"	f	package:main
main	examples/in_process/main.go	/^package main$/;"	p
main	examples/inprocess_sampling/main.go	/^func main() {$/;"	f	package:main
main	examples/inprocess_sampling/main.go	/^package main$/;"	p
main	examples/oauth_client/main.go	/^func main() {$/;"	f	package:main
main	examples/oauth_client/main.go	/^package main$/;"	p
main	examples/sampling_client/main.go	/^func main() {$/;"	f	package:main
main	examples/sampling_client/main.go	/^package main$/;"	p
main	examples/sampling_server/main.go	/^func main() {$/;"	f	package:main
main	examples/sampling_server/main.go	/^package main$/;"	p
main	examples/simple_client/main.go	/^func main() {$/;"	f	package:main
main	examples/simple_client/main.go	/^package main$/;"	p
main	examples/typed_tools/main.go	/^func main() {$/;"	f	package:main
main	examples/typed_tools/main.go	/^package main$/;"	p
main	server/internal/gen/data.go	/^package main$/;"	p
main	server/internal/gen/main.go	/^func main() {$/;"	f	package:main
main	server/internal/gen/main.go	/^package main$/;"	p
main	testdata/mockstdio_server.go	/^func main() {$/;"	f	package:main
main	testdata/mockstdio_server.go	/^package main$/;"	p
makeRequest	examples/custom_context/main.go	/^func makeRequest(ctx context.Context, message, token string) (*response, error) {$/;"	f	package:main	typeref:typename:(*response, error)
matchesTemplate	server/server.go	/^func matchesTemplate(uri string, template *mcp.URITemplate) bool {$/;"	f	package:server	typeref:typename:bool
maybeAuthorize	examples/oauth_client/main.go	/^func maybeAuthorize(err error) {$/;"	f	package:main
mcp	mcp/errors.go	/^package mcp$/;"	p
mcp	mcp/prompts.go	/^package mcp$/;"	p
mcp	mcp/resources.go	/^package mcp$/;"	p
mcp	mcp/tools.go	/^package mcp$/;"	p
mcp	mcp/tools_test.go	/^package mcp$/;"	p
mcp	mcp/typed_tools.go	/^package mcp$/;"	p
mcp	mcp/typed_tools_test.go	/^package mcp$/;"	p
mcp	mcp/types.go	/^package mcp$/;"	p
mcp	mcp/types_test.go	/^package mcp$/;"	p
mcp	mcp/utils.go	/^package mcp$/;"	p
mcptest	mcptest/mcptest.go	/^package mcptest$/;"	p
mcptest_test	mcptest/mcptest_test.go	/^package mcptest_test$/;"	p
message	server/server.go	/^	message json.RawMessage$/;"	m	struct:server.UnparsableMessageError	typeref:typename:json.RawMessage
messageEndpoint	server/sse.go	/^	messageEndpoint              string$/;"	m	struct:server.SSEServer	typeref:typename:string
metadataFetchErr	client/transport/oauth.go	/^	metadataFetchErr error$/;"	m	struct:transport.OAuthHandler	typeref:typename:error
metadataOnce	client/transport/oauth.go	/^	metadataOnce     sync.Once$/;"	m	struct:transport.OAuthHandler	typeref:typename:sync.Once
method	server/server.go	/^	method  mcp.MCPMethod$/;"	m	struct:server.UnparsableMessageError	typeref:typename:mcp.MCPMethod
middlewareMu	server/server.go	/^	middlewareMu           sync.RWMutex$/;"	m	struct:server.MCPServer	typeref:typename:sync.RWMutex
mockHTTPTransport	client/protocol_negotiation_test.go	/^type mockHTTPTransport struct {$/;"	s	package:client
mockJSONRPCRequest	client/sampling_test.go	/^func mockJSONRPCRequest(mcpRequest mcp.CreateMessageRequest) transport.JSONRPCRequest {$/;"	f	package:client	typeref:typename:transport.JSONRPCRequest
mockProtocolTransport	client/protocol_negotiation_test.go	/^	mockProtocolTransport$/;"	M	struct:client.mockHTTPTransport	typeref:typename:mockProtocolTransport
mockProtocolTransport	client/protocol_negotiation_test.go	/^type mockProtocolTransport struct {$/;"	s	package:client
mockSamplingHandler	client/sampling_test.go	/^type mockSamplingHandler struct {$/;"	s	package:client
mockSamplingSession	server/sampling_test.go	/^type mockSamplingSession struct {$/;"	s	package:server
mockSession	server/sampling_test.go	/^	mockSession$/;"	M	struct:server.mockSamplingSession	typeref:typename:mockSession
mockSession	server/sampling_test.go	/^type mockSession struct {$/;"	s	package:server
mockTransport	client/sampling_test.go	/^type mockTransport struct {$/;"	s	package:client
module	www/tsconfig.json	/^    "module": "ESNext",$/;"	s	object:compilerOptions
mu	client/http_test.go	/^	mu   sync.RWMutex$/;"	m	struct:client.SafeMap	typeref:typename:sync.RWMutex
mu	client/transport/oauth.go	/^	mu    sync.RWMutex$/;"	m	struct:transport.MemoryTokenStore	typeref:typename:sync.RWMutex
mu	client/transport/sse.go	/^	mu             sync.RWMutex$/;"	m	struct:transport.SSE	typeref:typename:sync.RWMutex
mu	client/transport/stdio.go	/^	mu             sync.RWMutex$/;"	m	struct:transport.Stdio	typeref:typename:sync.RWMutex
mu	server/inprocess_session.go	/^	mu                 sync.RWMutex$/;"	m	struct:server.InProcessSession	typeref:typename:sync.RWMutex
mu	server/session_test.go	/^	mu                  sync.RWMutex \/\/ Mutex to protect concurrent access to sessionTools$/;"	m	struct:server.sessionTestClientWithTools	typeref:typename:sync.RWMutex
mu	server/sse.go	/^	mu sync.RWMutex$/;"	m	struct:server.SSEServer	typeref:typename:sync.RWMutex
mu	server/stdio.go	/^	mu                 sync.RWMutex                     \/\/ protects writer$/;"	m	struct:server.stdioSession	typeref:typename:sync.RWMutex
mu	server/streamable_http.go	/^	mu         sync.RWMutex$/;"	m	struct:server.StreamableHTTPServer	typeref:typename:sync.RWMutex
mu	server/streamable_http.go	/^	mu    sync.RWMutex$/;"	m	struct:server.sessionToolsStore	typeref:typename:sync.RWMutex
mu	server/streamable_http.go	/^	mu   sync.RWMutex$/;"	m	struct:server.sessionLogLevelsStore	typeref:typename:sync.RWMutex
name	mcptest/mcptest.go	/^	name string$/;"	m	struct:mcptest.Server	typeref:typename:string
name	server/server.go	/^	name                   string$/;"	m	struct:server.MCPServer	typeref:typename:string
name	www/package.json	/^  "name": "mcp-go",$/;"	s
newMockTransport	client/sampling_test.go	/^func newMockTransport() *mockTransport {$/;"	f	package:client	typeref:typename:*mockTransport
newSessionLogLevelsStore	server/streamable_http.go	/^func newSessionLogLevelsStore() *sessionLogLevelsStore {$/;"	f	package:server	typeref:typename:*sessionLogLevelsStore
newSessionToolsStore	server/streamable_http.go	/^func newSessionToolsStore() *sessionToolsStore {$/;"	f	package:server	typeref:typename:*sessionToolsStore
newStreamableHttpSession	server/streamable_http.go	/^func newStreamableHttpSession(sessionID string, toolStore *sessionToolsStore, levels *sessionLog/;"	f	package:server	typeref:typename:*streamableHttpSession
nextRequestID	server/streamable_http.go	/^func (s *StreamableHTTPServer) nextRequestID(sessionID string) int64 {$/;"	f	struct:server.StreamableHTTPServer	typeref:typename:int64
noEmit	www/tsconfig.json	/^    "noEmit": true,$/;"	b	object:compilerOptions
noFallthroughCasesInSwitch	www/tsconfig.json	/^    "noFallthroughCasesInSwitch": true$/;"	b	object:compilerOptions
noUnusedLocals	www/tsconfig.json	/^    "noUnusedLocals": true,$/;"	b	object:compilerOptions
noUnusedParameters	www/tsconfig.json	/^    "noUnusedParameters": true,$/;"	b	object:compilerOptions
normalizeURLPath	server/sse.go	/^func normalizeURLPath(elem ...string) string {$/;"	f	package:server	typeref:typename:string
notificationChannel	server/server_test.go	/^	notificationChannel chan mcp.JSONRPCNotification$/;"	m	struct:server.fakeSession	typeref:typename:chan mcp.JSONRPCNotification
notificationChannel	server/session_test.go	/^	notificationChannel chan mcp.JSONRPCNotification$/;"	m	struct:server.sessionTestClient	typeref:typename:chan mcp.JSONRPCNotification
notificationChannel	server/session_test.go	/^	notificationChannel chan mcp.JSONRPCNotification$/;"	m	struct:server.sessionTestClientWithClientInfo	typeref:typename:chan mcp.JSONRPCNotification
notificationChannel	server/session_test.go	/^	notificationChannel chan mcp.JSONRPCNotification$/;"	m	struct:server.sessionTestClientWithLogging	typeref:typename:chan mcp.JSONRPCNotification
notificationChannel	server/session_test.go	/^	notificationChannel chan mcp.JSONRPCNotification$/;"	m	struct:server.sessionTestClientWithTools	typeref:typename:chan mcp.JSONRPCNotification
notificationChannel	server/sse.go	/^	notificationChannel chan mcp.JSONRPCNotification$/;"	m	struct:server.sseSession	typeref:typename:chan mcp.JSONRPCNotification
notificationChannel	server/streamable_http.go	/^	notificationChannel chan mcp.JSONRPCNotification \/\/ server -> client notifications$/;"	m	struct:server.streamableHttpSession	typeref:typename:chan mcp.JSONRPCNotification
notificationHandler	client/protocol_negotiation_test.go	/^	notificationHandler func(mcp.JSONRPCNotification)$/;"	m	struct:client.mockProtocolTransport	typeref:typename:func(mcp.JSONRPCNotification)
notificationHandler	client/transport/streamable_http.go	/^	notificationHandler func(mcp.JSONRPCNotification)$/;"	m	struct:transport.StreamableHTTP	typeref:typename:func(mcp.JSONRPCNotification)
notificationHandlers	server/server.go	/^	notificationHandlers   map[string]NotificationHandlerFunc$/;"	m	struct:server.MCPServer	typeref:typename:map[string]NotificationHandlerFunc
notificationHandlersMu	server/server.go	/^	notificationHandlersMu sync.RWMutex$/;"	m	struct:server.MCPServer	typeref:typename:sync.RWMutex
notifications	client/client.go	/^	notifications      []func(mcp.JSONRPCNotification)$/;"	m	struct:client.Client	typeref:typename:[]func(mcp.JSONRPCNotification)
notifications	server/inprocess_session.go	/^	notifications      chan mcp.JSONRPCNotification$/;"	m	struct:server.InProcessSession	typeref:typename:chan mcp.JSONRPCNotification
notifications	server/stdio.go	/^	notifications      chan mcp.JSONRPCNotification$/;"	m	struct:server.stdioSession	typeref:typename:chan mcp.JSONRPCNotification
notifyMu	client/client.go	/^	notifyMu           sync.RWMutex$/;"	m	struct:client.Client	typeref:typename:sync.RWMutex
notifyMu	client/transport/inprocess.go	/^	notifyMu       sync.RWMutex$/;"	m	struct:transport.InProcessTransport	typeref:typename:sync.RWMutex
notifyMu	client/transport/sse.go	/^	notifyMu       sync.RWMutex$/;"	m	struct:transport.SSE	typeref:typename:sync.RWMutex
notifyMu	client/transport/stdio.go	/^	notifyMu       sync.RWMutex$/;"	m	struct:transport.Stdio	typeref:typename:sync.RWMutex
notifyMu	client/transport/streamable_http.go	/^	notifyMu            sync.RWMutex$/;"	m	struct:transport.StreamableHTTP	typeref:typename:sync.RWMutex
oauthHandler	client/transport/sse.go	/^	oauthHandler *OAuthHandler$/;"	m	struct:transport.SSE	typeref:typename:*OAuthHandler
oauthHandler	client/transport/streamable_http.go	/^	oauthHandler *OAuthHandler$/;"	m	struct:transport.StreamableHTTP	typeref:typename:*OAuthHandler
onError	server/hooks.go	/^func (c *Hooks) onError(ctx context.Context, id any, method mcp.MCPMethod, message any, err erro/;"	f	struct:server.Hooks
onNotification	client/transport/inprocess.go	/^	onNotification func(mcp.JSONRPCNotification)$/;"	m	struct:transport.InProcessTransport	typeref:typename:func(mcp.JSONRPCNotification)
onNotification	client/transport/sse.go	/^	onNotification func(mcp.JSONRPCNotification)$/;"	m	struct:transport.SSE	typeref:typename:func(mcp.JSONRPCNotification)
onNotification	client/transport/stdio.go	/^	onNotification func(mcp.JSONRPCNotification)$/;"	m	struct:transport.Stdio	typeref:typename:func(mcp.JSONRPCNotification)
onRequest	client/transport/stdio.go	/^	onRequest      RequestHandler$/;"	m	struct:transport.Stdio	typeref:typename:RequestHandler
onRequestInitialization	server/hooks.go	/^func (c *Hooks) onRequestInitialization(ctx context.Context, id any, message any) error {$/;"	f	struct:server.Hooks	typeref:typename:error
onSuccess	server/hooks.go	/^func (c *Hooks) onSuccess(ctx context.Context, id any, method mcp.MCPMethod, message any, result/;"	f	struct:server.Hooks
openBrowser	examples/oauth_client/main.go	/^func openBrowser(url string) {$/;"	f	package:main
paginationLimit	server/server.go	/^	paginationLimit        *int$/;"	m	struct:server.MCPServer	typeref:typename:*int
parseCommand	examples/simple_client/main.go	/^func parseCommand(cmd string) []string {$/;"	f	package:main	typeref:typename:[]string
pendingMu	server/stdio.go	/^	pendingMu          sync.RWMutex                     \/\/ protects pendingRequests$/;"	m	struct:server.stdioSession	typeref:typename:sync.RWMutex
pendingRequests	server/stdio.go	/^	pendingRequests    map[int64]chan *samplingResponse \/\/ for tracking pending sampling requests$/;"	m	struct:server.stdioSession	typeref:typename:map[int64]chan *samplingResponse
postJSON	server/streamable_http_test.go	/^func postJSON(url string, bodyObject any) (*http.Response, error) {$/;"	f	package:server	typeref:typename:(*http.Response, error)
preview	www/package.json	/^    "preview": "vocs preview"$/;"	s	object:scripts
printToolResult	examples/filesystem_stdio_client/main.go	/^func printToolResult(result *mcp.CallToolResult) {$/;"	f	package:main
private	www/package.json	/^  "private": true,$/;"	b
processInputStream	server/stdio.go	/^func (s *StdioServer) processInputStream(ctx context.Context, reader *bufio.Reader, stdout io.Wr/;"	f	struct:server.StdioServer	typeref:typename:error
processMessage	server/stdio.go	/^func (s *StdioServer) processMessage($/;"	f	struct:server.StdioServer	typeref:typename:error
promptCapabilities	server/server.go	/^type promptCapabilities struct {$/;"	s	package:server
promptHandlers	server/server.go	/^	promptHandlers         map[string]PromptHandlerFunc$/;"	m	struct:server.MCPServer	typeref:typename:map[string]PromptHandlerFunc
prompts	mcptest/mcptest.go	/^	prompts           []server.ServerPrompt$/;"	m	struct:mcptest.Server	typeref:typename:[]server.ServerPrompt
prompts	server/server.go	/^	prompts                map[string]mcp.Prompt$/;"	m	struct:server.MCPServer	typeref:typename:map[string]mcp.Prompt
prompts	server/server.go	/^	prompts   *promptCapabilities$/;"	m	struct:server.serverCapabilities	typeref:typename:*promptCapabilities
promptsMu	server/server.go	/^	promptsMu              sync.RWMutex$/;"	m	struct:server.MCPServer	typeref:typename:sync.RWMutex
protocolVersion	client/client.go	/^	protocolVersion    string$/;"	m	struct:client.Client	typeref:typename:string
protocolVersion	client/protocol_negotiation_test.go	/^	protocolVersion string$/;"	m	struct:client.mockHTTPTransport	typeref:typename:string
protocolVersion	client/transport/sse.go	/^	protocolVersion atomic.Value \/\/ string$/;"	m	struct:transport.SSE	typeref:typename:atomic.Value
protocolVersion	client/transport/streamable_http.go	/^	protocolVersion atomic.Value \/\/ string$/;"	m	struct:transport.StreamableHTTP	typeref:typename:atomic.Value
protocolVersion	server/server.go	/^func (s *MCPServer) protocolVersion(clientVersion string) string {$/;"	f	struct:server.MCPServer	typeref:typename:string
react	www/package.json	/^    "react": "latest",$/;"	s	object:dependencies
react-dom	www/package.json	/^    "react-dom": "latest",$/;"	s	object:dependencies
readNextLine	server/stdio.go	/^func (s *StdioServer) readNextLine(ctx context.Context, reader *bufio.Reader) (string, error) {$/;"	f	struct:server.StdioServer	typeref:typename:(string, error)
readResponses	client/transport/stdio.go	/^func (c *Stdio) readResponses() {$/;"	f	struct:transport.Stdio
readSSE	client/transport/sse.go	/^func (c *SSE) readSSE(reader io.ReadCloser) {$/;"	f	struct:transport.SSE
readSSE	client/transport/streamable_http.go	/^func (c *StreamableHTTP) readSSE(ctx context.Context, reader io.ReadCloser, handler func(event, /;"	f	struct:transport.StreamableHTTP
readSSEEvent	server/sse_test.go	/^func readSSEEvent(sseResp *http.Response) (string, error) {$/;"	f	package:server	typeref:typename:(string, error)
redirectURI	examples/oauth_client/main.go	/^	redirectURI = "http:\/\/localhost:8085\/oauth\/callback"$/;"	c	package:main
refreshToken	client/transport/oauth.go	/^func (h *OAuthHandler) refreshToken(ctx context.Context, refreshToken string) (*Token, error) {$/;"	f	struct:transport.OAuthHandler	typeref:typename:(*Token, error)
requestChan	client/sampling_test.go	/^	requestChan  chan transport.JSONRPCRequest$/;"	m	struct:client.mockTransport	typeref:typename:chan transport.JSONRPCRequest
requestError	server/server.go	/^type requestError struct {$/;"	s	package:server
requestHandlerTemplate	server/internal/gen/main.go	/^var requestHandlerTemplate string$/;"	v	package:main	typeref:typename:string
requestHeader	server/ctx.go	/^	requestHeader contextKey = iota$/;"	c	package:server	typeref:type:contextKey
requestID	client/client.go	/^	requestID          atomic.Int64$/;"	m	struct:client.Client	typeref:typename:atomic.Int64
requestID	server/sse.go	/^	requestID           atomic.Int64$/;"	m	struct:server.sseSession	typeref:typename:atomic.Int64
requestID	server/stdio.go	/^	requestID          atomic.Int64                     \/\/ for generating unique request IDs$/;"	m	struct:server.stdioSession	typeref:typename:atomic.Int64
requestMu	client/transport/stdio.go	/^	requestMu      sync.RWMutex$/;"	m	struct:transport.Stdio	typeref:typename:sync.RWMutex
resolveJsonModule	www/tsconfig.json	/^    "resolveJsonModule": true,$/;"	b	object:compilerOptions
resource	server/server.go	/^	resource mcp.Resource$/;"	m	struct:server.resourceEntry	typeref:typename:mcp.Resource
resourceCapabilities	server/server.go	/^type resourceCapabilities struct {$/;"	s	package:server
resourceEntry	server/server.go	/^type resourceEntry struct {$/;"	s	package:server
resourceTemplateEntry	server/server.go	/^type resourceTemplateEntry struct {$/;"	s	package:server
resourceTemplates	mcptest/mcptest.go	/^	resourceTemplates []server.ServerResourceTemplate$/;"	m	struct:mcptest.Server	typeref:typename:[]server.ServerResourceTemplate
resourceTemplates	server/server.go	/^	resourceTemplates      map[string]resourceTemplateEntry$/;"	m	struct:server.MCPServer	typeref:typename:map[string]resourceTemplateEntry
resources	mcptest/mcptest.go	/^	resources         []server.ServerResource$/;"	m	struct:mcptest.Server	typeref:typename:[]server.ServerResource
resources	server/server.go	/^	resources              map[string]resourceEntry$/;"	m	struct:server.MCPServer	typeref:typename:map[string]resourceEntry
resources	server/server.go	/^	resources *resourceCapabilities$/;"	m	struct:server.serverCapabilities	typeref:typename:*resourceCapabilities
resourcesMu	server/server.go	/^	resourcesMu            sync.RWMutex$/;"	m	struct:server.MCPServer	typeref:typename:sync.RWMutex
response	examples/custom_context/main.go	/^type response struct {$/;"	s	package:main
responseChan	client/sampling_test.go	/^	responseChan chan *transport.JSONRPCResponse$/;"	m	struct:client.mockTransport	typeref:typename:chan *transport.JSONRPCResponse
responses	client/protocol_negotiation_test.go	/^	responses           map[string]string$/;"	m	struct:client.mockProtocolTransport	typeref:typename:map[string]string
responses	client/transport/sse.go	/^	responses      map[string]chan *JSONRPCResponse$/;"	m	struct:transport.SSE	typeref:typename:map[string]chan *JSONRPCResponse
responses	client/transport/stdio.go	/^	responses      map[string]chan *JSONRPCResponse$/;"	m	struct:transport.Stdio	typeref:typename:map[string]chan *JSONRPCResponse
result	client/sampling_test.go	/^	result *mcp.CreateMessageResult$/;"	m	struct:client.mockSamplingHandler	typeref:typename:*mcp.CreateMessageResult
result	server/sampling_test.go	/^	result *mcp.CreateMessageResult$/;"	m	struct:server.mockSamplingSession	typeref:typename:*mcp.CreateMessageResult
result	server/stdio.go	/^	result *mcp.CreateMessageResult$/;"	m	struct:server.samplingResponse	typeref:typename:*mcp.CreateMessageResult
resultToString	mcptest/mcptest_test.go	/^func resultToString(result *mcp.CallToolResult) (string, error) {$/;"	f	package:mcptest_test	typeref:typename:(string, error)
retryInterval	client/transport/streamable_http.go	/^	retryInterval = 1 * time.Second \/\/ a variable is convenient for testing$/;"	v	package:transport
runConcurrentOperation	server/server_race_test.go	/^func runConcurrentOperation($/;"	f	package:server
samplingHandler	client/client.go	/^	samplingHandler    SamplingHandler$/;"	m	struct:client.Client	typeref:typename:SamplingHandler
samplingHandler	client/transport/inprocess.go	/^	samplingHandler server.SamplingHandler$/;"	m	struct:transport.InProcessTransport	typeref:typename:server.SamplingHandler
samplingHandler	server/inprocess_session.go	/^	samplingHandler    SamplingHandler$/;"	m	struct:server.InProcessSession	typeref:typename:SamplingHandler
samplingResponse	server/stdio.go	/^type samplingResponse struct {$/;"	s	package:server
scripts	www/package.json	/^  "scripts": {$/;"	o
sendHTTP	client/transport/streamable_http.go	/^func (c *StreamableHTTP) sendHTTP($/;"	f	struct:transport.StreamableHTTP	typeref:typename:(resp *http.Response, err error)
sendNotificationCore	server/session.go	/^func (s *MCPServer) sendNotificationCore($/;"	f	unknown:server.MCPServer	typeref:typename:error
sendNotificationToAllClients	server/session.go	/^func (s *MCPServer) sendNotificationToAllClients(notification mcp.JSONRPCNotification) {$/;"	f	unknown:server.MCPServer
sendNotificationToSpecificClient	server/session.go	/^func (s *MCPServer) sendNotificationToSpecificClient(session ClientSession, notification mcp.JSO/;"	f	unknown:server.MCPServer	typeref:typename:error
sendRequest	client/client.go	/^func (c *Client) sendRequest($/;"	f	struct:client.Client	typeref:typename:(*json.RawMessage, error)
sendResponse	client/transport/stdio.go	/^func (c *Stdio) sendResponse(response JSONRPCResponse) {$/;"	f	struct:transport.Stdio
server	client/transport/inprocess.go	/^	server          *server.MCPServer$/;"	m	struct:transport.InProcessTransport	typeref:typename:*server.MCPServer
server	examples/custom_context/main.go	/^	server *server.MCPServer$/;"	m	struct:main.MCPServer	typeref:typename:*server.MCPServer
server	server/constants.go	/^package server$/;"	p
server	server/ctx.go	/^package server$/;"	p
server	server/errors.go	/^package server$/;"	p
server	server/hooks.go	/^package server$/;"	p
server	server/http_transport_options.go	/^package server$/;"	p
server	server/inprocess_session.go	/^package server$/;"	p
server	server/request_handler.go	/^package server$/;"	p
server	server/resource_test.go	/^package server$/;"	p
server	server/sampling.go	/^package server$/;"	p
server	server/sampling_test.go	/^package server$/;"	p
server	server/server.go	/^package server$/;"	p
server	server/server_race_test.go	/^package server$/;"	p
server	server/server_test.go	/^package server$/;"	p
server	server/session.go	/^package server$/;"	p
server	server/session_test.go	/^package server$/;"	p
server	server/sse.go	/^	server                       *MCPServer$/;"	m	struct:server.SSEServer	typeref:typename:*MCPServer
server	server/sse.go	/^package server$/;"	p
server	server/sse_test.go	/^package server$/;"	p
server	server/stdio.go	/^	server      *MCPServer$/;"	m	struct:server.StdioServer	typeref:typename:*MCPServer
server	server/stdio.go	/^package server$/;"	p
server	server/stdio_test.go	/^package server$/;"	p
server	server/streamable_http.go	/^	server            *MCPServer$/;"	m	struct:server.StreamableHTTPServer	typeref:typename:*MCPServer
server	server/streamable_http.go	/^package server$/;"	p
server	server/streamable_http_test.go	/^package server$/;"	p
serverCapabilities	client/client.go	/^	serverCapabilities mcp.ServerCapabilities$/;"	m	struct:client.Client	typeref:typename:mcp.ServerCapabilities
serverCapabilities	server/server.go	/^type serverCapabilities struct {$/;"	s	package:server
serverInfo	examples/in_process/main.go	/^	serverInfo *mcp.InitializeResult$/;"	m	struct:main.MCPClient	typeref:typename:*mcp.InitializeResult
serverKey	server/server.go	/^type serverKey struct{}$/;"	s	package:server
serverMetadata	client/transport/oauth.go	/^	serverMetadata   *AuthServerMetadata$/;"	m	struct:transport.OAuthHandler	typeref:typename:*AuthServerMetadata
serverReader	mcptest/mcptest.go	/^	serverReader *io.PipeReader$/;"	m	struct:mcptest.Server	typeref:typename:*io.PipeReader
serverURL	client/transport/streamable_http.go	/^	serverURL           *url.URL$/;"	m	struct:transport.StreamableHTTP	typeref:typename:*url.URL
serverURL	examples/oauth_client/main.go	/^	serverURL = "https:\/\/api.example.com\/v1\/mcp"$/;"	c	package:main
serverWriter	mcptest/mcptest.go	/^	serverWriter *io.PipeWriter$/;"	m	struct:mcptest.Server	typeref:typename:*io.PipeWriter
session	client/transport/inprocess.go	/^	session         *server.InProcessSession$/;"	m	struct:transport.InProcessTransport	typeref:typename:*server.InProcessSession
sessionID	client/transport/inprocess.go	/^	sessionID       string$/;"	m	struct:transport.InProcessTransport	typeref:typename:string
sessionID	client/transport/streamable_http.go	/^	sessionID       atomic.Value \/\/ string$/;"	m	struct:transport.StreamableHTTP	typeref:typename:atomic.Value
sessionID	server/inprocess_session.go	/^	sessionID          string$/;"	m	struct:server.InProcessSession	typeref:typename:string
sessionID	server/sampling_test.go	/^	sessionID string$/;"	m	struct:server.mockSession	typeref:typename:string
sessionID	server/server_test.go	/^	sessionID           string$/;"	m	struct:server.fakeSession	typeref:typename:string
sessionID	server/session_test.go	/^	sessionID           string$/;"	m	struct:server.sessionTestClient	typeref:typename:string
sessionID	server/session_test.go	/^	sessionID           string$/;"	m	struct:server.sessionTestClientWithClientInfo	typeref:typename:string
sessionID	server/session_test.go	/^	sessionID           string$/;"	m	struct:server.sessionTestClientWithLogging	typeref:typename:string
sessionID	server/session_test.go	/^	sessionID           string$/;"	m	struct:server.sessionTestClientWithTools	typeref:typename:string
sessionID	server/sse.go	/^	sessionID           string$/;"	m	struct:server.sseSession	typeref:typename:string
sessionID	server/streamable_http.go	/^	sessionID           string$/;"	m	struct:server.streamableHttpSession	typeref:typename:string
sessionIdManager	server/streamable_http.go	/^	sessionIdManager        SessionIdManager$/;"	m	struct:server.StreamableHTTPServer	typeref:typename:SessionIdManager
sessionLogLevels	server/streamable_http.go	/^	sessionLogLevels        *sessionLogLevelsStore$/;"	m	struct:server.StreamableHTTPServer	typeref:typename:*sessionLogLevelsStore
sessionLogLevelsStore	server/streamable_http.go	/^type sessionLogLevelsStore struct {$/;"	s	package:server
sessionRequestIDs	server/streamable_http.go	/^	sessionRequestIDs sync.Map \/\/ sessionId --> last requestID(*atomic.Int64)$/;"	m	struct:server.StreamableHTTPServer	typeref:typename:sync.Map
sessionTestClient	server/session_test.go	/^type sessionTestClient struct {$/;"	s	package:server
sessionTestClientWithClientInfo	server/session_test.go	/^type sessionTestClientWithClientInfo struct {$/;"	s	package:server
sessionTestClientWithLogging	server/session_test.go	/^type sessionTestClientWithLogging struct {$/;"	s	package:server
sessionTestClientWithTools	server/session_test.go	/^type sessionTestClientWithTools struct {$/;"	s	package:server
sessionTools	server/session_test.go	/^	sessionTools        map[string]ServerTool$/;"	m	struct:server.sessionTestClientWithTools	typeref:typename:map[string]ServerTool
sessionTools	server/streamable_http.go	/^	sessionTools      *sessionToolsStore$/;"	m	struct:server.StreamableHTTPServer	typeref:typename:*sessionToolsStore
sessionToolsStore	server/streamable_http.go	/^type sessionToolsStore struct {$/;"	s	package:server
sessions	server/server.go	/^	sessions               sync.Map$/;"	m	struct:server.MCPServer	typeref:typename:sync.Map
sessions	server/sse.go	/^	sessions                     sync.Map$/;"	m	struct:server.SSEServer	typeref:typename:sync.Map
set	server/streamable_http.go	/^func (s *sessionLogLevelsStore) set(sessionID string, level mcp.LoggingLevel) {$/;"	f	struct:server.sessionLogLevelsStore
set	server/streamable_http.go	/^func (s *sessionToolsStore) set(sessionID string, tools map[string]ServerTool) {$/;"	f	struct:server.sessionToolsStore
skipLibCheck	www/tsconfig.json	/^    "skipLibCheck": true,$/;"	b	object:compilerOptions
spawnCommand	client/transport/stdio.go	/^func (c *Stdio) spawnCommand(ctx context.Context) error {$/;"	f	struct:transport.Stdio	typeref:typename:error
srv	server/sse.go	/^	srv                          *http.Server$/;"	m	struct:server.SSEServer	typeref:typename:*http.Server
sseEndpoint	server/sse.go	/^	sseEndpoint                  string$/;"	m	struct:server.SSEServer	typeref:typename:string
sseSession	server/sse.go	/^type sseSession struct {$/;"	s	package:server
startCallbackServer	examples/oauth_client/main.go	/^func startCallbackServer(callbackChan chan<- map[string]string) *http.Server {$/;"	f	package:main	typeref:typename:*http.Server
startMockSSEEchoServer	client/transport/sse_test.go	/^func startMockSSEEchoServer() (string, func()) {$/;"	f	package:transport	typeref:typename:(string, func())
startMockStreamableHTTPServer	client/transport/streamable_http_test.go	/^func startMockStreamableHTTPServer() (string, func()) {$/;"	f	package:transport	typeref:typename:(string, func())
startMockStreamableWithGETSupport	client/transport/streamable_http_test.go	/^func startMockStreamableWithGETSupport(getSupport bool) (string, func(), chan bool, int) {$/;"	f	package:transport	typeref:typename:(string, func(), chan bool, int)
started	client/protocol_negotiation_test.go	/^	started             bool$/;"	m	struct:client.mockProtocolTransport	typeref:typename:bool
started	client/sampling_test.go	/^	started      bool$/;"	m	struct:client.mockTransport	typeref:typename:bool
started	client/transport/sse.go	/^	started         atomic.Bool$/;"	m	struct:transport.SSE	typeref:typename:atomic.Bool
stdLogger	util/logger.go	/^type stdLogger struct {$/;"	s	package:util
stderr	client/transport/stdio.go	/^	stderr         io.ReadCloser$/;"	m	struct:transport.Stdio	typeref:typename:io.ReadCloser
stdin	client/transport/stdio.go	/^	stdin          io.WriteCloser$/;"	m	struct:transport.Stdio	typeref:typename:io.WriteCloser
stdioSession	server/stdio.go	/^type stdioSession struct {$/;"	s	package:server
stdioSessionInstance	server/stdio.go	/^var stdioSessionInstance = stdioSession{$/;"	v	package:server
stdout	client/transport/stdio.go	/^	stdout         *bufio.Reader$/;"	m	struct:transport.Stdio	typeref:typename:*bufio.Reader
streamableHttpSession	server/streamable_http.go	/^type streamableHttpSession struct {$/;"	s	package:server
subscribe	server/server.go	/^	subscribe   bool$/;"	m	struct:server.resourceCapabilities	typeref:typename:bool
target	www/tsconfig.json	/^    "target": "ES2020",$/;"	s	object:compilerOptions
template	server/server.go	/^	template mcp.ResourceTemplate$/;"	m	struct:server.resourceTemplateEntry	typeref:typename:mcp.ResourceTemplate
testHeaderFuncKey	client/sse_test.go	/^	testHeaderFuncKey contextKey = "X-Test-Header-Func"$/;"	c	package:client	typeref:type:contextKey
testHeaderKey	client/sse_test.go	/^	testHeaderKey     contextKey = "X-Test-Header"$/;"	c	package:client	typeref:type:contextKey
testLogger	client/transport/streamable_http_test.go	/^type testLogger struct {$/;"	s	package:transport
token	client/transport/oauth.go	/^	token *Token$/;"	m	struct:transport.MemoryTokenStore	typeref:typename:*Token
tokenFromContext	examples/custom_context/main.go	/^func tokenFromContext(ctx context.Context) (string, error) {$/;"	f	package:main	typeref:typename:(string, error)
toolCapabilities	server/server.go	/^type toolCapabilities struct {$/;"	s	package:server
toolFilters	server/server.go	/^	toolFilters            []ToolFilterFunc$/;"	m	struct:server.MCPServer	typeref:typename:[]ToolFilterFunc
toolFiltersMu	server/server.go	/^	toolFiltersMu          sync.RWMutex$/;"	m	struct:server.MCPServer	typeref:typename:sync.RWMutex
toolHandlerMiddlewares	server/server.go	/^	toolHandlerMiddlewares []ToolHandlerMiddleware$/;"	m	struct:server.MCPServer	typeref:typename:[]ToolHandlerMiddleware
tools	mcptest/mcptest.go	/^	tools             []server.ServerTool$/;"	m	struct:mcptest.Server	typeref:typename:[]server.ServerTool
tools	server/server.go	/^	tools                  map[string]ServerTool$/;"	m	struct:server.MCPServer	typeref:typename:map[string]ServerTool
tools	server/server.go	/^	tools     *toolCapabilities$/;"	m	struct:server.serverCapabilities	typeref:typename:*toolCapabilities
tools	server/sse.go	/^	tools               sync.Map     \/\/ stores session-specific tools$/;"	m	struct:server.sseSession	typeref:typename:sync.Map
tools	server/streamable_http.go	/^	tools               *sessionToolsStore$/;"	m	struct:server.streamableHttpSession	typeref:typename:*sessionToolsStore
tools	server/streamable_http.go	/^	tools map[string]map[string]ServerTool \/\/ sessionID -> toolName -> tool$/;"	m	struct:server.sessionToolsStore	typeref:typename:map[string]map[string]ServerTool
toolsMu	server/server.go	/^	toolsMu                sync.RWMutex$/;"	m	struct:server.MCPServer	typeref:typename:sync.RWMutex
transport	client/client.go	/^	transport transport.Interface$/;"	m	struct:client.Client	typeref:typename:transport.Interface
transport	client/transport/constants.go	/^package transport$/;"	p
transport	client/transport/error.go	/^package transport$/;"	p
transport	client/transport/inprocess.go	/^package transport$/;"	p
transport	client/transport/interface.go	/^package transport$/;"	p
transport	client/transport/oauth.go	/^package transport$/;"	p
transport	client/transport/oauth_test.go	/^package transport$/;"	p
transport	client/transport/oauth_utils.go	/^package transport$/;"	p
transport	client/transport/oauth_utils_test.go	/^package transport$/;"	p
transport	client/transport/sse.go	/^package transport$/;"	p
transport	client/transport/sse_oauth_test.go	/^package transport$/;"	p
transport	client/transport/sse_test.go	/^package transport$/;"	p
transport	client/transport/stdio.go	/^package transport$/;"	p
transport	client/transport/stdio_test.go	/^package transport$/;"	p
transport	client/transport/streamable_http.go	/^package transport$/;"	p
transport	client/transport/streamable_http_oauth_test.go	/^package transport$/;"	p
transport	client/transport/streamable_http_test.go	/^package transport$/;"	p
transport	mcptest/mcptest.go	/^	transport transport.Interface$/;"	m	struct:mcptest.Server	typeref:typename:transport.Interface
type	www/package.json	/^  "type": "module",$/;"	s
typedGreetingHandler	examples/typed_tools/main.go	/^func typedGreetingHandler(ctx context.Context, request mcp.CallToolRequest, args GreetingArgs) (/;"	f	package:main	typeref:typename:(*mcp.CallToolResult, error)
typescript	www/package.json	/^    "typescript": "latest"$/;"	s	object:devDependencies
upgradeToSSE	server/streamable_http.go	/^	upgradeToSSE        atomic.Bool$/;"	m	struct:server.streamableHttpSession	typeref:typename:atomic.Bool
useDefineForClassFields	www/tsconfig.json	/^    "useDefineForClassFields": true,$/;"	b	object:compilerOptions
useFullURLForMessageEndpoint	server/sse.go	/^	useFullURLForMessageEndpoint bool$/;"	m	struct:server.SSEServer	typeref:typename:bool
util	util/logger.go	/^package util$/;"	p
value	mcp/types.go	/^	value any$/;"	m	struct:mcp.RequestId	typeref:typename:any
version	server/server.go	/^	version                string$/;"	m	struct:server.MCPServer	typeref:typename:string
version	www/package.json	/^  "version": "0.0.0",$/;"	s
vocs	www/package.json	/^    "vocs": "latest"$/;"	s	object:dependencies
wg	client/transport/streamable_http.go	/^	wg           sync.WaitGroup$/;"	m	struct:transport.StreamableHTTP	typeref:typename:sync.WaitGroup
wg	mcptest/mcptest.go	/^	wg sync.WaitGroup$/;"	m	struct:mcptest.Server	typeref:typename:sync.WaitGroup
withAuthKey	examples/custom_context/main.go	/^func withAuthKey(ctx context.Context, auth string) context.Context {$/;"	f	package:main	typeref:typename:context.Context
writeJSONRPCError	server/sse.go	/^func (s *SSEServer) writeJSONRPCError($/;"	f	struct:server.SSEServer
writeJSONRPCError	server/streamable_http.go	/^func (s *StreamableHTTPServer) writeJSONRPCError($/;"	f	struct:server.StreamableHTTPServer
writeResponse	server/stdio.go	/^func (s *StdioServer) writeResponse($/;"	f	struct:server.StdioServer	typeref:typename:error
writeSSEEvent	server/streamable_http.go	/^func writeSSEEvent(w io.Writer, data any) error {$/;"	f	package:server	typeref:typename:error
writer	server/stdio.go	/^	writer             io.Writer                        \/\/ for sending requests to client$/;"	m	struct:server.stdioSession	typeref:typename:io.Writer
