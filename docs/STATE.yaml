# STATE.yaml v5.1-claude-optimized
# λ=limitation φ=file ∇=implement ∅=missing †=workaround ‡=critical

∞STATUS:
  MODE: everything_server[tools-only†]
  BUILD: go build -o bin/cowpilot cmd/cowpilot/main.go
  RUN: ./bin/cowpilot
  TEST: npx @modelcontextprotocol/inspector ./bin/cowpilot
  
λMCP-GO:
  VERSION: v0.34.1-0.20250715114859-baa715326fab
  ∅MISSING: [SetResourceHandler,SetPromptHandler,SetCompletionHandler,SetLoggingHandler,ProgressNotifications]
  EXISTS: [NewMCPServer,AddTool,ServeStdio,NewSSEServer]
  
∇TOOLS[15]:
  hello→"Hello,World!"
  echo[message:string]→"Echo:$message"
  add[a,b:number]→a+b
  get_time[format?:unix|iso|human]→time.Now()
  base64_encode[text:string]→base64(text)
  base64_decode[data:string]→decode(data)
  string_operation[text,operation:upper|lower|reverse|length]→transform(text)
  format_json[json:string,minify?:bool]→prettify|minify
  long_running_operation[duration?,steps?:number]→simulate_progress
  †list_resources[]→["example://text/hello","example://text/readme","example://image/logo"]
  †read_resource[uri:string]→content_by_uri
  †list_prompts[]→["simple_greeting","code_review[language,code]"]
  †get_prompt[name,arguments?:object]→prompt_template
  get_test_image[]→ImageContent{base64,image/png}
  get_resource_content[uri]→EmbeddedResource{TextResourceContents|BlobResourceContents}

†SIMULATIONS:
  RESOURCES: ∇via_tools{list_resources,read_resource,get_resource_content}
  PROMPTS: ∇via_tools{list_prompts,get_prompt}
  COMPLETIONS: ∅not_implemented
  LOGGING: ∅not_implemented
  PROGRESS: ∅not_implemented[λno_api]

φMAIN: /Users/vcto/Projects/cowpilot/cmd/cowpilot/main.go
  PATTERN_TOOL: s.AddTool(mcp.NewTool(name,opts...),handler)
  PATTERN_MULTI: &mcp.CallToolResult{Content:[]interface{}{TextContent{},ImageContent{}}}
  PATTERN_ERROR: mcp.NewToolResultError(msg),nil
  PATTERN_EMBED: EmbeddedResource{Type:"resource",Resource:TextResourceContents{URI,MimeType,Text}}

‡DECISIONS:
  λLIBRARY: mcp-go[minimal]→tools_only
  †APPROACH: simulate_via_tools>fork_library>custom_jsonrpc>switch_library
  RATIONALE: quick_implementation+no_modifications+demonstrates_concepts
  
‡BLOCKERS:
  1. λmcp-go∅[resources,prompts,completions,logging,progress]
  2. †tools!=native_capabilities
  3. ∅protocol_compliance[partial]

SAMPLE_DATA:
  RES: {
    "example://text/hello": "Hello,World!This is a simple text resource from the everything server.",
    "example://text/readme": "# Everything Server\n\nThis is an example MCP server...",
    "example://image/logo": "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg=="
  }
  PROMPTS: {
    "simple_greeting": {args:∅,msg:"Please provide a friendly greeting for a new user joining our community."},
    "code_review": {args:{language:required,code:required},msg:"Please review the following $language code..."}
  }

∇NEXT:
  TEST: [∀tool∈TOOLS:verify_functionality,error_cases,multi_content,embedded_resources]
  DECIDE: [accept_limitations|fork_mcp-go|custom_impl|find_alternative]
  ENHANCE: [+tools,+examples,+docs,?auth,?ratelimit,?metrics]
  
‡VERIFY:
  ✓tools.len==15
  ✓echo("test")=="Echo: test"
  ✓add(2,3)==5
  ✓string_operation("hello","upper")=="HELLO"
  ✓base64_encode("test")==base64_decode("dGVzdA==")
  ✓get_test_image().Content[1].Type=="image"
  ✓list_resources().includes("example://text/hello")
  ✓get_prompt("code_review",{language:"go",code:"..."}).includes("review")
  ✓get_resource_content("example://image/logo").Content[1].Type=="resource"

≈CONTEXT[next_session]:
  WHERE: cowpilot/cmd/cowpilot/main.go[everything_server,15_tools,†simulated_capabilities]
  WHAT: mcp-go[tools_only]→workarounds_implemented
  WHY: demonstrate_all_mcp_capabilities_despite_library_limitations
  HOW: tools_simulate_resources+prompts,multi_content_for_richness
  BLOCKERS: λmcp-go_missing_features
  OPTIONS: [live_with_it|extend_lib|new_approach]