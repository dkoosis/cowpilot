# STATE.yaml - Claude-optimized context
# Format: v3.0 | Updated: 2025-01-18T19:00:00Z
# Purpose: Machine-readable project state for Claude

STATUS:
  phase: deployed
  quality: production
  blocker: none
  target: operational
  live_url: https://cowpilot.fly.dev/
  
CONTEXT:
  proj: cowpilot
  stack: [golang, fly.io, mcp]
  baseline: fresh_start
  previous_stack: [ts, cf-workers, oauth, agents-mcp]
  mcp_sdk: github.com/modelcontextprotocol/go-sdk
  
ARCH:
  transport: [stdio, sse]
  auth: tbd
  deployment: fly.io
  deferred: [http_streaming]
  
PLAN:
  ✓: [assess_artifacts, project_structure, hello_world_implementation, testing_setup, sse_transport]
  →: fly_deployment
  ◯: [http_streaming, advanced_features]
  
LEGACY_ARTIFACTS:
  relevant:
    - mcp_protocol_knowledge: /docs/MCP-PROTOCOL-STANDARDS.md
    - architecture_decisions: /docs/adr/*
    - assets: /docs/assets/*
  
  delete_candidates:
    - ts_specific: [package.json, tsconfig.json, vitest.config.ts]
    - cf_specific: [wrangler.toml, worker configs]
    - old_tests: [*.test.ts files]
    
  review_needed:
    - documentation: assess for golang relevance
    - prompts: may be language-agnostic

COWGNITION_ASSETS:
  immediately_useful:
    - ndjson_transport: internal/transport/transport.go (stdio implementation)
    - error_patterns: structured error types with context
    - validation_patterns: message validation approach
    
  assess_later:
    - fsm_implementation: state machine for connection lifecycle
    - router_pattern: method dispatch architecture  
    - middleware_chain: validation and logging middleware
    - service_registry: modular service architecture
    - schema_validation: jsonschema/v5 usage
    - testing_patterns: integration test structure
    - metrics_collection: prometheus-style metrics
    - config_management: yaml-based configuration
    - secret_management: keyring integration
    
  architectural_insights:
    - they built full MCP in Go before official SDK
    - uses looplab/fsm for state management
    - cockroachdb/errors for error handling
    - comprehensive validation at transport layer
    
FLAGS:
  stack_change: ts_to_golang
  platform_change: cf_to_fly
  fresh_start: true
  sdk_choice: mark3labs/mcp-go
  
NEXT_ACTIONS:
  1. ✓ Implemented MCP server with "hello" tool using mark3labs/mcp-go
  2. ✓ Created unit and integration tests
  3. ✓ Makefile ready with test targets
  4. ✓ Switched to SSE transport for Fly.io deployment
  5. ✓ Fixed Go version and API compatibility issues
  6. ✓ Deployed to Fly.io: https://cowpilot.fly.dev/
  
OPERATIONAL:
  - Health check: https://cowpilot.fly.dev/health
  - SSE endpoint: https://cowpilot.fly.dev/
  - Connect via MCP client to test hello tool
  
PARKED:
  - HTTP streaming transport implementation

REQUIREMENTS:
  foundation:
    - Single "hello" tool returning "Hello, World!"
    - HTTP transport compatible with Fly.io
    - Testing as standard part of build
    - Clean separation of concerns
  testing:
    - Unit tests for business logic
    - Integration tests for MCP protocol
    - make test target
    - CI pipeline ready